
/* ===== File: src\app\app.component.html ===== */
<app-confirm-modal
  [isVisible]="(showTokenExpiryModal$ | async) ?? false"
  title="Session Expiring Soon!"
  message="Your session is about to expire. Stay logged in?"
  confirmText="Stay Logged In"
  cancelText="Logout"
  [countdown]="(logoutCountdown$ | async) ?? 60"
  (closeModal)="onLogout()"
  (confirmAction)="onRefreshToken()"
></app-confirm-modal>

<router-outlet></router-outlet>


/* ===== File: src\app\app.component.scss ===== */


/* ===== File: src\app\app.component.spec.ts ===== */
import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(() => TestBed.configureTestingModule({
    imports: [AppComponent]
  }));

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have the 'adminlteapp' title`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('adminlteapp');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('.content span')?.textContent).toContain('adminlteapp app is running!');
  });
});


/* ===== File: src\app\app.component.ts ===== */
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router, RouterOutlet } from '@angular/router';
import { HttpClientModule } from '@angular/common/http';
import { AuthActions } from './auth/ngrx/login.actions';
import { select, Store } from '@ngrx/store';
import { checkTokenExpiry } from './functions/token_expiry';
import { NgSelectModule } from '@ng-select/ng-select';
import { ConfirmModalComponent } from './my-components/modals/confirm-modal/confirm-modal.component';
import { defaultIfEmpty, map, Observable } from 'rxjs';
import { selectLogoutCountdown, selectShowTokenExpiryModal } from './auth/ngrx/login.reducers';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [CommonModule, RouterOutlet, HttpClientModule, NgSelectModule, ConfirmModalComponent],
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent {
  showTokenExpiryModal$: Observable<boolean>;
  logoutCountdown$: Observable<number | null>;

  constructor(private store: Store) {
    this.showTokenExpiryModal$ = this.store.pipe(
      select(selectShowTokenExpiryModal),
      defaultIfEmpty(false)
    );
    
    this.logoutCountdown$ = this.store.pipe(
      select(selectLogoutCountdown),
      defaultIfEmpty(60)
    );
  }

  onLogout(): void {
    this.store.dispatch(AuthActions.logout({ refreshToken: localStorage.getItem('refreshToken')! }));
  }

  onRefreshToken(): void {
    this.store.dispatch(AuthActions.refreshToken({ refreshToken: localStorage.getItem('refreshToken')! }));
  }
}


/* ===== File: src\app\app.config.ts ===== */
import { ApplicationConfig } from '@angular/core';
import { provideRouter } from '@angular/router';

import { routes } from './app.routes';
import { HTTP_INTERCEPTORS, provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';
import { AuthInterceptor } from './services/auth/auth.interceptor';
import { provideStore } from '@ngrx/store';
import { environment } from 'src/environments/environment.prod';
import { provideStoreDevtools } from '@ngrx/store-devtools';
import { provideEffects } from '@ngrx/effects';
import { authFeatureKey, authReducer } from './auth/ngrx/login.reducers';
import { AuthEffects } from './auth/ngrx/login.effects';
import { profileFeatureKey, profileReducer } from './ngrx/user_profile/user_profile.reducers';
import { ProfileEffects } from './ngrx/user_profile/user_profile.effects';
import { patientsFeatureKey, patientsReducer } from './ngrx/patients/patients.reducers';
import { PatientsEffects } from './ngrx/patients/patients.effects';
import { dentistFeatureKey, dentistReducer } from './ngrx/dentist/dentist.reducers';
import { DentistEffects } from './ngrx/dentist/dentist.effects';
import { scheduleFeatureKey, scheduleReducer } from './ngrx/schedules/schedules.reducers';
import { ScheduleEffects } from './ngrx/schedules/schedules.effects';
import { appointmentFeatureKey, appointmentReducer } from './ngrx/appointment/addappointment.reducers';
import { AppointmentEffects } from './ngrx/appointment/addappointment.effects';
import { servicesFeatureKey, servicesReducer } from './ngrx/servicelist/servicelist.reducers';
import { ServicesEffects } from './ngrx/servicelist/servicelist.effects';
import { prescriptionsFeatureKey, prescriptionsReducer } from './ngrx/prescription/prescription.reducers';
import { PrescriptionsEffects } from './ngrx/prescription/prescription.effects';

export const appConfig: ApplicationConfig = {
  providers: [
    provideRouter(routes), 
    provideHttpClient(withInterceptorsFromDi()),
    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },
    provideStore({
      [authFeatureKey]: authReducer,
      [profileFeatureKey]: profileReducer,
      [patientsFeatureKey]: patientsReducer,
      [dentistFeatureKey]: dentistReducer,
      [scheduleFeatureKey]: scheduleReducer,
      [appointmentFeatureKey]: appointmentReducer,
      [servicesFeatureKey]: servicesReducer,
      [prescriptionsFeatureKey]: prescriptionsReducer
    }),
    provideEffects([
      AuthEffects, 
      ProfileEffects, 
      PatientsEffects, 
      DentistEffects,
      ScheduleEffects,
      AppointmentEffects,
      ServicesEffects,
      PrescriptionsEffects
    ]),  // <-- Ensure AuthEffects is provided
    provideStoreDevtools({
      maxAge: 25,
      logOnly: environment.production, // or !isDevMode()
    }),
  ]
};


/* ===== File: src\app\app.routes.ts ===== */
import { Routes } from '@angular/router';
import { LoginComponent } from './auth/login/login.component';
import { RegisterComponent } from './auth/register/register.component';

import { DentistdashboardComponent } from './dashboard/dentistdashboard/dentistdashboard.component';
import { PatientsComponent } from './dashboard/dentistdashboard/patients/patients.component';
import { ScheduleComponent } from './dashboard/dentistdashboard/schedule/schedule.component';
import { PrescriptionComponent } from './dashboard/dentistdashboard/prescription/prescription.component';
import { TreatmentComponent } from './dashboard/dentistdashboard/treatment/treatment.component';
import { ProfileComponent } from './dashboard/dentistdashboard/profile/profile.component';
import { DefaultviewdentistComponent } from './dashboard/dentistdashboard/defaultviewdentist/defaultviewdentist.component';
import { WalkinrequestComponent } from './dashboard/dentistdashboard/walkinrequest/walkinrequest.component';
import { OnlinerequestComponent } from './dashboard/dentistdashboard/onlinerequest/onlinerequest.component';
import { CalendarComponent } from './dashboard/dentistdashboard/calendar/calendar.component';
import { PatientDetailsComponent } from './dashboard/dentistdashboard/patients/patient-details/patient-details.component';
import { PatientdashboardComponent } from './dashboard/patientdashboard/patientdashboard.component';
import { DefaultviewComponent } from './dashboard/patientdashboard/defaultview/defaultview.component';
import { AppointmentComponent } from './dashboard/patientdashboard/appointment/appointment.component';
import { UserprofileComponent } from './dashboard/patientdashboard/userprofile/userprofile.component';
import { AuthGuard } from './services/auth/auth.guard';
import { LoginGuard } from './services/auth/login.guard';
import { HealthDeclarationComponent } from './dashboard/patientdashboard/health_declaration/health_declaration.component';
import { PatientTreatmentComponent } from './dashboard/patientdashboard/patient_treatment/patient_treatment.component';



export const routes: Routes = [
  { path: 'login', component: LoginComponent, canActivate: [LoginGuard] },
  { path: 'register', component: RegisterComponent },

  {
    path: 'patientdashboard',
    component: PatientdashboardComponent,
    canActivate: [AuthGuard], // ✅ Protect patient dashboard
    children: [
      { path: '', component: DefaultviewComponent }, // Default view for /patientdashboard
      { path: 'appointment', component: AppointmentComponent },
      { path: 'userprofile', component: UserprofileComponent },
      { path: 'healthdeclaration', component: HealthDeclarationComponent },
      { path: 'treatment', component: PatientTreatmentComponent },
    ],
  },

  {
    path: 'dentistdashboard',
    component: DentistdashboardComponent,
    canActivate: [AuthGuard], // ✅ Protect dentist dashboard
    children: [
      { path: '', component: DefaultviewdentistComponent },
      { path: 'patients', component: PatientsComponent },
      { path: 'patients/patient-details/:patientId', component: PatientDetailsComponent },
      { path: 'schedule', component: ScheduleComponent },
      { path: 'walkinrequest', component: WalkinrequestComponent },
      { path: 'onlinerequest', component: OnlinerequestComponent },
      { path: 'calendar', component: CalendarComponent },
      { path: 'prescription', component: PrescriptionComponent },
      { path: 'treatment', component: TreatmentComponent },
      { path: 'dentistprofile', component: ProfileComponent },
    ],
  },

  { path: '**', redirectTo: 'login', pathMatch: 'full' }, // Redirect invalid routes to login
];


/* ===== File: src\app\auth\login\login.component.html ===== */
<!-- ✅ Success Alert (Auto-dismiss after 3 seconds) -->
<div class="alert-container" *ngIf="(loginMessage$ | async) as loginMessage">
  <div class="alert alert-success alert-dismissible">
    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
    <h5><i class="icon fas fa-check"></i> Success!</h5>
    {{ loginMessage }}
  </div>
</div>

<!-- ✅ Error Alert (Auto-dismiss after 3 seconds) -->
<div class="alert-container" *ngIf="(loginError$ | async) as loginError">
  <div class="alert alert-danger alert-dismissible">
    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
    <h5><i class="icon fas fa-ban"></i> Error!</h5>
    {{ loginError }}
  </div>
</div>

<div class="container d-flex justify-content-center align-items-center" style="min-height: 100vh;">
  <div class="content">
    <div class="row">
      <div class="col-lg-12 col-md-10 col-sm-8">
        <div class="card card-primary card-outline">
          <div class="card-body">
            <h1 class="card-title">Somosot Dental</h1>
            <p class="card-text">Sign In</p>

            <!-- ✅ Reactive Form -->
            <form [formGroup]="loginForm" (ngSubmit)="onLogin()">

              <!-- ✅ Email Field -->
              <div class="input-group mb-3">
                <input type="email" class="form-control" placeholder="Email" formControlName="email">
                <div class="input-group-append">
                  <span class="input-group-text"><i class="fa fa-envelope"></i></span>
                </div>
              </div>
              <div *ngIf="loginForm.controls['email']?.invalid && loginForm.controls['email']?.touched" class="text-danger">
                <small *ngIf="loginForm.controls['email']?.errors?.['required']">Email is required.</small>
                <small *ngIf="loginForm.controls['email']?.errors?.['email']">Enter a valid email.</small>
              </div>

              <!-- ✅ Password Field -->
              <div class="input-group mb-3">
                <input type="password" class="form-control" placeholder="Password" formControlName="password">
                <div class="input-group-append">
                  <span class="input-group-text"><i class="fa fa-lock"></i></span>
                </div>
              </div>
              <div *ngIf="loginForm.controls['password']?.invalid && loginForm.controls['password']?.touched" class="text-danger">
                <small *ngIf="loginForm.controls['password']?.errors?.['required']">Password is required.</small>
                <small *ngIf="loginForm.controls['password']?.errors?.['minlength']">Password must be at least 6 characters.</small>
              </div>

              <!-- ✅ Submit Button -->
              <button type="submit" class="btn btn-block btn-primary" [disabled]="loginForm.invalid">
                Login
              </button>

            </form>

            <div class="d-flex flex-column mt-3">
              <a href="#" class="text-primary custom-link">Forgot password?</a>
              <a href="#" class="text-primary custom-link">Create Account?</a>
            </div>

          </div>
        </div>
      </div>
    </div>
  </div>
</div>


/* ===== File: src\app\auth\login\login.component.scss ===== */
.card-title {
    text-align: center !important;
    float: unset !important;
    font-weight: bold !important;
    font-size: 1.4rem !important;

}

.input-group-text {
    background-color: transparent !important;
  }

.form-control{
    border-right: none !important;

}

p{
    text-align: center;
    font-size: 0.9rem !important;
    margin-top: 0.6rem !important;
}

.custom-link{
    font-size: 0.8rem !important;
    margin-bottom: 0.3rem !important;
}

.alert-container {
    position: fixed;
    top: 10px;
    right: 10px;
    z-index: 1050; /* Ensures alert is above everything */
    min-width: 250px;
    max-width: 400px;
  }
  
  

/* ===== File: src\app\auth\login\login.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { LoginComponent } from './login.component';

describe('LoginComponent', () => {
  let component: LoginComponent;
  let fixture: ComponentFixture<LoginComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [LoginComponent]
    });
    fixture = TestBed.createComponent(LoginComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\auth\login\login.component.ts ===== */
import { Component, OnDestroy } from '@angular/core';
import { ReactiveFormsModule, FormBuilder, Validators } from '@angular/forms';
import { Store, select } from '@ngrx/store';
import { AuthActions } from '../ngrx/login.actions';
import { LoginRequest } from 'src/app/interfaces/auth.interfaces';
import { CommonModule } from '@angular/common';
import { Observable, Subscription } from 'rxjs';
import { selectLoginError, selectLoginMessage } from '../ngrx/login.reducers';


@Component({
  selector: 'app-login',
  standalone: true,
  imports: [ReactiveFormsModule, CommonModule],
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss']
})
export class LoginComponent implements OnDestroy {
  loginForm = this.fb.group({
    email: ['', [Validators.required, Validators.email]],
    password: ['', [Validators.required, Validators.minLength(6)]]
  });

  loginMessage$: Observable<string | null> = this.store.pipe(select(selectLoginMessage));
  loginError$: Observable<string | null> = this.store.pipe(select(selectLoginError)); // ✅ No need for map()

  
  private subscriptions: Subscription = new Subscription();
  constructor(private fb: FormBuilder, private store: Store) {
        // ✅ Auto-dismiss success messages after 3 seconds
        this.loginMessage$.subscribe(message => {
          if (message) {
            setTimeout(() => {
              this.store.dispatch(AuthActions.clearMessage()); // ✅ Dispatch action to clear message
            }, 3000);
          }
        });
    
        // ✅ Auto-dismiss error messages after 3 seconds
        this.loginError$.subscribe(error => {
          if (error) {
            setTimeout(() => {
              this.store.dispatch(AuthActions.clearError()); // ✅ Dispatch action to clear error
            }, 3000);
          }
        });
  }

  onLogin() {
    if (this.loginForm.invalid) return;

    const loginRequest: LoginRequest = {
      email: this.loginForm.get('email')?.value as string,  
      password: this.loginForm.get('password')?.value as string 
    };

    this.store.dispatch(AuthActions.login({ loginRequest }));
  }

  ngOnDestroy() {
    this.subscriptions.unsubscribe(); // ✅ Cleanup to avoid memory leaks
  }
}


/* ===== File: src\app\auth\ngrx\epek.ts ===== */
import { Injectable } from '@angular/core';
import { createEffect, Actions, ofType } from '@ngrx/effects';
import { catchError, delay, map, mergeMap, of, switchMap, takeUntil, tap } from 'rxjs';
import { Router } from '@angular/router';
import { AuthService } from 'src/app/services/auth/auth.service';
import { AuthActions } from './login.actions';
import { ProfileActions } from 'src/app/ngrx/user_profile/user_profile.actions';

import { decodeAccessToken } from 'src/app/services/auth/auth.utils';
import { AlertActions } from 'src/app/ngrx/reusablealerts/reusablealerts.actions';
import { Store } from '@ngrx/store';

@Injectable()
export class AuthEffects {
  constructor(private actions$: Actions, private authService: AuthService, private router: Router, private store: Store) {}

  // ✅ Handle Login Effect
  login$ = createEffect(() =>
    this.actions$.pipe(
      ofType(AuthActions.login),
      mergeMap(({ loginRequest }) =>
        this.authService.login(loginRequest).pipe(
          mergeMap(response => {
            const expiresInMinutes = 15; // Adjust based on backend expiry time
            const expiresAt = Date.now() + expiresInMinutes * 60 * 1000;

            sessionStorage.setItem('accessToken', response.data.accessToken);
            sessionStorage.setItem('accessTokenExpiry', expiresAt.toString());
            localStorage.setItem('refreshToken', response.data.refreshToken ?? '');

            return [
              AuthActions.loginSuccess({ loginResponse: response }),
              AlertActions.setSuccess({ message: 'Login successful!' }), // ✅ Show success alert
              ProfileActions.loadProfile() // ✅ Auto-fetch user profile after login
            ];
          }),
          catchError(error => of(
            AuthActions.loginFailure({ loginResponseError: { message: error.error.message || 'Login failed' } }),
            AlertActions.setError({ message: 'Invalid credentials. Please try again.' }) // ❌ Show error alert
          ))
        )
      )
    )
  );

  // ✅ Auto-Refresh Token Before Expiry
  autoRefreshToken$ = createEffect(() =>
    this.actions$.pipe(
      ofType(AuthActions.loginSuccess, AuthActions.refreshTokenSuccess),
      switchMap(() => {
        const expiresAt = Number(sessionStorage.getItem('accessTokenExpiry'));
        const now = Date.now();
        const timeUntilExpiry = expiresAt - now;
        const refreshTime = timeUntilExpiry - (30 * 1000); // 🔄 Refresh 30s before expiry

        if (timeUntilExpiry <= 0) {
          return of(AuthActions.logout({ refreshToken: localStorage.getItem('refreshToken') ?? '' }));
        }

        return of(AuthActions.refreshToken({ refreshToken: localStorage.getItem('refreshToken') ?? '' })).pipe(
          delay(refreshTime) // ⏳ Wait until 30s before token expiry
        );
      })
    )
  );

  // ✅ Handle Refresh Token Effect
  refreshToken$ = createEffect(() =>
    this.actions$.pipe(
      ofType(AuthActions.refreshToken),
      mergeMap(({ refreshToken }) =>
        this.authService.refreshTokenApi(refreshToken).pipe(
          mergeMap(response => {
            const expiresInMinutes = 15;
            const expiresAt = Date.now() + expiresInMinutes * 60 * 1000;

            sessionStorage.setItem('accessToken', response.accessToken);
            sessionStorage.setItem('accessTokenExpiry', expiresAt.toString());

            return [
              AuthActions.refreshTokenSuccess({ message: 'Session extended successfully' }),
              AlertActions.setSuccess({ message: 'Session extended!' }) // ✅ Show success alert
            ];
          }),
          catchError(error => of(
            AuthActions.refreshTokenFailure({ error: error.message || 'Session refresh failed' }),
            AlertActions.setError({ message: 'Session refresh failed. Please log in again.' }) // ❌ Show error alert
          ))
        )
      )
    )
  );

  // ✅ Handle Logout Effect
  logout$ = createEffect(() =>
    this.actions$.pipe(
      ofType(AuthActions.logout),
      mergeMap(({ refreshToken }) =>
        this.authService.logoutApi(refreshToken).pipe(
          mergeMap(response => {
            sessionStorage.removeItem('accessToken');
            sessionStorage.removeItem('userRole');
            sessionStorage.removeItem('accessTokenExpiry');
            localStorage.removeItem('refreshToken');

            this.router.navigate(['/login']); // ✅ Redirect to login page

            return [
              AuthActions.logoutSuccess({ message: response.message }),
              AlertActions.setInfo({ message: 'You have been logged out.' }) // ✅ Show info alert
            ];
          }),
          catchError(error => of(
            AuthActions.logoutFailure({ error: error.message || 'Logout failed' }),
            AlertActions.setError({ message: 'Logout failed. Try again.' }) // ❌ Show error alert
          ))
        )
      )
    )
  );

  // ✅ Auto Logout Countdown Effect
  startLogoutCountdown$ = createEffect(() =>
    this.actions$.pipe(
      ofType(AuthActions.showTokenExpiryModal),
      switchMap(() =>
        of(60).pipe(
          map((count) => count - 1), // Countdown from 60s
          delay(1000),
          takeUntil(this.actions$.pipe(ofType(AuthActions.refreshToken, AuthActions.logout))),
          tap((remaining) => {
            this.store.dispatch(AuthActions.updateLogoutCountdown({ remaining }));

            if (remaining === 30) {
              this.store.dispatch(AlertActions.setWarning({ message: 'Your session will expire in 30 seconds!' })); // ✅ 30s warning
            }
            if (remaining === 10) {
              this.store.dispatch(AlertActions.setWarning({ message: 'Your session will expire in 10 seconds!' })); // ✅ 10s warning
            }
          }),
          map((remaining) => {
            if (remaining <= 0) {
              return AuthActions.logout({ refreshToken: localStorage.getItem('refreshToken')! });
            }
            return { type: 'NO_ACTION' };
          }),
          catchError(() => of({ type: 'NO_ACTION' })) // Prevent errors from breaking effects
        )
      )
    )
  );

  autoShowTokenExpiryModal$ = createEffect(() =>
    this.actions$.pipe(
      ofType(AuthActions.refreshTokenSuccess, AuthActions.loginSuccess), // ✅ Run after login or refresh
      switchMap(() => {
        const expiresAt = Number(sessionStorage.getItem('accessTokenExpiry'));
        const now = Date.now();
        const timeUntilExpiry = expiresAt - now;
        const warningTime = 60 * 1000; // Show modal 1 minute before expiry
  
        if (timeUntilExpiry > warningTime) {
          return of(AuthActions.showTokenExpiryModal()).pipe(delay(timeUntilExpiry - warningTime));
        }
        return of(); // ✅ No action if already expired
      })
    )
  );
  

  // ✅ Auto-Clear Messages After 3s
  clearMessages$ = createEffect(() =>
    this.actions$.pipe(
      ofType(AuthActions.loginSuccess, AuthActions.logoutSuccess, AuthActions.refreshTokenSuccess),
      delay(3000),
      map(() => AuthActions.clearMessage()) // ✅ Clear messages
    )
  );

  // ❌ Auto-Clear Error Messages After 3s
  clearErrors$ = createEffect(() =>
    this.actions$.pipe(
      ofType(AuthActions.loginFailure, AuthActions.logoutFailure, AuthActions.refreshTokenFailure),
      delay(3000),
      map(() => AuthActions.clearError()) // ✅ Clear errors
    )
  );
}


/* ===== File: src\app\auth\ngrx\login.actions.ts ===== */
import { createActionGroup, emptyProps, props } from '@ngrx/store';
import { LoginRequest, LoginResponse, LoginResponseError } from 'src/app/interfaces/auth.interfaces';


export const AuthActions = createActionGroup({
  source: 'Auth',
  events: {
    'Login': props<{ loginRequest: LoginRequest }>(),
    'Login Success': props<{ loginResponse: LoginResponse }>(),
    'Login Failure': props<{ loginResponseError: LoginResponseError }>(),
    'Refresh Token': props<{ refreshToken: string  }>(),
    'Refresh Token Success': props<{ message: string  }>(),
    'Refresh Token Failure': props<{ error: string }>(), 
    'Logout': props<{ refreshToken: string  }>(),
    'Logout Success': props<{ message: string  }>(),
    'Logout Failure': props<{ error: string }>(), // 

    // ✅ Add actions to clear messages after 3s
    'Clear Message': emptyProps(),
    'Clear Error': emptyProps(),

        // ✅ Add actions for token expiry warning
        'Show Token Expiry Modal': emptyProps(),
        'Update Logout Countdown': props<{ remaining: number }>(),
  }
});


/* ===== File: src\app\auth\ngrx\login.effects.ts ===== */
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, exhaustMap, map, of, tap, delay, switchMap, takeUntil } from 'rxjs';
import { Router } from '@angular/router';
import { AuthService } from 'src/app/services/auth/auth.service';
import { AuthActions } from './login.actions';
import { ProfileActions } from 'src/app/ngrx/user_profile/user_profile.actions';
import { Store } from '@ngrx/store';
import { LoginResponseError } from 'src/app/interfaces/auth.interfaces';
import { AlertActions } from 'src/app/ngrx/reusablealerts/reusablealerts.actions';

@Injectable()
export class AuthEffects {
  constructor(private actions$: Actions, private authService: AuthService, private router: Router, private store: Store) {}

  // ✅ Handle Login Effect
  login$ = createEffect(() =>
    this.actions$.pipe(
      ofType(AuthActions.login),
      exhaustMap(({ loginRequest }) =>
        this.authService.login(loginRequest).pipe(
          map(response => {
            const expiresInMinutes = 15; // Adjust based on backend expiry time
            const expiresAt = Date.now() + expiresInMinutes * 60 * 1000; // Calculate expiration time
  
            sessionStorage.setItem('accessToken', response.data.accessToken);
            sessionStorage.setItem('accessTokenExpiry', expiresAt.toString());
            localStorage.setItem('refreshToken', response.data.refreshToken ?? '');
  
            return AuthActions.loginSuccess({ loginResponse: response });
          }),
          catchError(error => {
            const errorMessage: LoginResponseError = {
              message: error.error.message || 'Login failed' // ✅ Store as an object
            };
            return of(AuthActions.loginFailure({ loginResponseError: errorMessage }));
          })
        )
      )
    )
  );
  
  
  

  // ✅ Fetch Profile After Login Success (tap used for side-effect)
  fetchProfileAfterLogin$ = createEffect(() =>
    this.actions$.pipe(
      ofType(AuthActions.loginSuccess),
      tap(() => this.store.dispatch(ProfileActions.loadProfile())) // ✅ Dispatch action as side effect
    ),
    { dispatch: false } // Prevents unnecessary action dispatch
  );


  handleProfileLoad$ = createEffect(() =>
    this.actions$.pipe(
      ofType(ProfileActions.loadProfileSuccess),
      tap(({ profile }) => {
        const userRole = profile.role; // ✅ Extract user role
        sessionStorage.setItem('userRole', userRole); // ✅ Store user role in sessionStorage
        if (userRole === 'patient') {
          this.router.navigate(['/patientdashboard']);
        } else if (userRole === 'dentist') {
          this.router.navigate(['/dentistdashboard']);
        }
      })
    ),
    { dispatch: false }
  );

  // ✅ Handle Logout Effect
  logout$ = createEffect(() =>
    this.actions$.pipe(
      ofType(AuthActions.logout),
      exhaustMap(({ refreshToken }) =>
        this.authService.logoutApi(refreshToken).pipe(
          map(response => {
            sessionStorage.removeItem('accessToken'); // ✅ Remove access token from sessionStorage
            sessionStorage.removeItem('userRole');
            sessionStorage.removeItem('accessTokenExpiry'); // ✅ Remove token expiration time
            localStorage.removeItem('refreshToken'); // ✅ Remove refresh token from localStorage
            this.router.navigate(['/login']); // ✅ Redirect to login page after logout
            return AuthActions.logoutSuccess({ message: response.message });
          }),
          catchError(error => of(AuthActions.logoutFailure({ error: error.message || 'Logout failed' })))
        )
      )
    )
  );

  //✅ Handle Refresh Token Effect
  refreshToken$ = createEffect(() =>
    this.actions$.pipe(
      ofType(AuthActions.refreshToken),
      exhaustMap(({ refreshToken }) =>
        this.authService.refreshTokenApi(refreshToken).pipe(
          switchMap(response => {
            const expiresInMinutes = 15;
            const expiresAt = Date.now() + expiresInMinutes * 60 * 1000;
  
            sessionStorage.setItem('accessToken', response.accessToken); // ✅ Update access token in sessionStorage
            sessionStorage.setItem('accessTokenExpiry', expiresAt.toString()); // ✅ Update expiration time
  
            return [
              AuthActions.refreshTokenSuccess({ message: 'Token refreshed successfully' }),
              ProfileActions.loadProfile() // ✅ Fetch user profile after refreshing token
            ];
          }),
          catchError(error => {
            console.error('Token refresh failed:', error);
            return of(AuthActions.refreshTokenFailure({ error: error.message || 'Token refresh failed' }));
          })
        )
      )
    )
  );
  

  // ✅ Automatically Refresh Token Before Expiry
  autoRefreshToken$ = createEffect(() =>
    this.actions$.pipe(
      ofType(AuthActions.loginSuccess, AuthActions.refreshTokenSuccess), // ✅ Run on login or refresh
      switchMap(() => {
        const expiresAt = Number(sessionStorage.getItem('accessTokenExpiry'));
        const now = Date.now();
        const timeUntilExpiry = expiresAt - now;
        const refreshTime = timeUntilExpiry - (30 * 1000); // 🔄 Refresh 30 seconds before expiry
  
        if (timeUntilExpiry <= 0) {
          return of(AuthActions.logout({ refreshToken: localStorage.getItem('refreshToken') ?? '' })); // ❌ Logout if expired
        }
  
        return of(AuthActions.refreshToken({ refreshToken: localStorage.getItem('refreshToken') ?? '' })).pipe(
          delay(refreshTime) // ⏳ Wait until 30 seconds before token expiry
        );
      })
    )
  );

    // ✅ Auto-Clear Messages After 3s
    clearMessages$ = createEffect(() =>
      this.actions$.pipe(
        ofType(AuthActions.loginSuccess, AuthActions.logoutSuccess, AuthActions.refreshTokenSuccess),
        delay(3000),
        map(() => AuthActions.clearMessage()) // ✅ Clear messages
      )
    );
  
    // ❌ Auto-Clear Error Messages After 3s
    clearErrors$ = createEffect(() =>
      this.actions$.pipe(
        ofType(AuthActions.loginFailure, AuthActions.logoutFailure, AuthActions.refreshTokenFailure),
        delay(3000),
        map(() => AuthActions.clearError()) // ✅ Clear errors
      )
    );

      startLogoutCountdown$ = createEffect(() =>
        this.actions$.pipe(
          ofType(AuthActions.showTokenExpiryModal),
          switchMap(() =>
            of(60).pipe(
              map((count) => count - 1), // Countdown from 60s
              delay(1000),
              takeUntil(this.actions$.pipe(ofType(AuthActions.refreshToken, AuthActions.logout))),
              tap((remaining) => {
                this.store.dispatch(AuthActions.updateLogoutCountdown({ remaining }));
    
                if (remaining === 30) {
                  this.store.dispatch(AlertActions.setWarning({ message: 'Your session will expire in 30 seconds!' })); // ✅ 30s warning
                }
                if (remaining === 10) {
                  this.store.dispatch(AlertActions.setWarning({ message: 'Your session will expire in 10 seconds!' })); // ✅ 10s warning
                }
              }),
              map((remaining) => {
                if (remaining <= 0) {
                  return AuthActions.logout({ refreshToken: localStorage.getItem('refreshToken')! });
                }
                return { type: 'NO_ACTION' };
              }),
              catchError(() => of({ type: 'NO_ACTION' })) // Prevent errors from breaking effects
            )
          )
        )
      );
    
      autoShowTokenExpiryModal$ = createEffect(() =>
        this.actions$.pipe(
          ofType(AuthActions.refreshTokenSuccess, AuthActions.loginSuccess), // ✅ Run after login or refresh
          switchMap(() => {
            const expiresAt = Number(sessionStorage.getItem('accessTokenExpiry'));
            const now = Date.now();
            const timeUntilExpiry = expiresAt - now;
            const warningTime = 60 * 1000; // Show modal 1 minute before expiry
      
            if (timeUntilExpiry > warningTime) {
              return of(AuthActions.showTokenExpiryModal()).pipe(delay(timeUntilExpiry - warningTime));
            }
            return of(); // ✅ No action if already expired
          })
        )
      );
  
}


/* ===== File: src\app\auth\ngrx\login.reducers.ts ===== */
import { createFeature, createReducer, on } from '@ngrx/store';
import { AuthActions } from './login.actions';
import { LoginResponseError, Token } from 'src/app/interfaces/auth.interfaces';

export interface AuthState {
  isLoading: boolean;
  isSubmitting: boolean;
  loginMessage: string | null;  // ✅ Success Message
  loginError: string | null;
  generatedTokens: Token | null;
  refreshError: string | null;
  logoutMessage: string | null;
  logoutError: string | null;
  showTokenExpiryModal: boolean;
  logoutCountdown: number;
}

export const initialAuthState: AuthState = {
  isLoading: false,
  isSubmitting: false,
  loginMessage: null, // ✅ Success Message
  loginError: null,   // ✅ Separate Error Message
  generatedTokens: null,
  refreshError: null,
  logoutMessage: null,
  logoutError: null,
  showTokenExpiryModal: false,
  logoutCountdown: 60, // Default 60s before logout
};

export const authFeature = createFeature({
  name: 'auth',
  reducer: createReducer(
    initialAuthState,

     // ✅ LOGIN START
     on(AuthActions.login, (state) => ({
      ...state,
      isLoading: true,
      isSubmitting: true,
      loginMessage: null, // ✅ Clear previous success message
      loginError: null,   // ✅ Clear previous error message
    })),

    // ✅ LOGIN SUCCESS (Store success message)
    on(AuthActions.loginSuccess, (state, { loginResponse }) => ({
      ...state,
      loginMessage: loginResponse.message, // ✅ Store success message
      loginError: null,                    // ✅ Clear any previous error
      generatedTokens: { 
        accessToken: loginResponse.data.accessToken, 
        refreshToken: loginResponse.data.refreshToken 
      },
      isLoading: false,
      isSubmitting: false,
    })),

    // ✅ LOGIN FAILURE (Store error message separately)
    on(AuthActions.loginFailure, (state, { loginResponseError }) => ({
      ...state,
      isLoading: false,
      isSubmitting: false,
      loginMessage: null,  
      loginError: loginResponseError.message, // ✅ Store only the string
    })),

        // ✅ Clear login message
    on(AuthActions.clearMessage, (state) => ({
      ...state,
      loginMessage: null
    })),

    // ✅ Clear login error
    on(AuthActions.clearError, (state) => ({
      ...state,
      loginError: null
    })),
    
    

    // ✅ REFRESH TOKEN START
    on(AuthActions.refreshToken, (state) => ({
      ...state,
      isLoading: true,
      refreshError: null, 
    })),

    // ✅ REFRESH TOKEN SUCCESS
    on(AuthActions.refreshTokenSuccess, (state, { message }) => ({
      ...state,
      isLoading: false,
      refreshError: null,
      generatedTokens: {
        ...(state.generatedTokens || {}), // Preserve existing refreshToken
        accessToken: message, // ✅ Update only the accessToken
      },
    })),

    // ✅ REFRESH TOKEN FAILURE
    on(AuthActions.refreshTokenFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      refreshError: error,
    })),

    // ✅ LOGOUT
    on(AuthActions.logout, (state) => ({
      ...state,
      isLoading: true,
    })),

    // ✅ LOGOUT SUCCESS
    on(AuthActions.logoutSuccess, (state, { message }) => ({
      ...state,
      isLoading: false,
      generatedTokens: null, // Clear tokens on logout success
      logoutMessage: message,
      logoutError: null,
    })),

    // ✅ LOGOUT FAILURE
    on(AuthActions.logoutFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      logoutMessage: null,
      logoutError: error,
    })),

      // ✅ Update Logout Countdown
  on(AuthActions.updateLogoutCountdown, (state, { remaining }) => ({
    ...state,
    logoutCountdown: remaining
  })),

  // ✅ Hide Modal on Logout or Token Refresh
  on(AuthActions.logout, (state) => ({
    ...state,
    showTokenExpiryModal: false,
    logoutCountdown: 60
  })),

  on(AuthActions.refreshToken, (state) => ({
    ...state,
    showTokenExpiryModal: false,
    logoutCountdown: 60
  }))
  ),
});

export const {
  name: authFeatureKey,
  reducer: authReducer,
  selectIsSubmitting,
  selectIsLoading,
  selectLoginMessage,
  selectLoginError,
  selectGeneratedTokens,
  selectRefreshError,
  selectLogoutMessage,
  selectLogoutError,
  selectLogoutCountdown,
  selectShowTokenExpiryModal
} = authFeature;


/* ===== File: src\app\auth\register\register.component.html ===== */
<div class="container d-flex justify-content-center align-items-center" style="min-height: 100vh;">
  <div class="col-lg-8 col-md-10 col-sm-12">
    <div class="card">
      <div class="card-body">
        <!-- Title Section -->
        <div class="text-center mb-4">
          <h1 class="card-title">Somosot</h1>
          <p class="card-text text-muted">Create your account by filling the form below</p>
        </div>

        <form [formGroup]="registerForm" (ngSubmit)="onSubmit()">
          <!-- Name Section -->
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="firstName">First Name <span class="text-danger">*</span></label>
              <input
                id="firstName"
                type="text"
                class="form-control"
                placeholder="First Name"
                formControlName="firstName"
              />
              <small class="text-danger" *ngIf="registerForm.get('firstName')?.touched && registerForm.get('firstName')?.invalid">
                First Name is required.
              </small>
            </div>
            <div class="col-md-6 mb-3">
              <label for="lastName">Last Name <span class="text-danger">*</span></label>
              <input
                id="lastName"
                type="text"
                class="form-control"
                placeholder="Last Name"
                formControlName="lastName"
              />
              <small class="text-danger" *ngIf="registerForm.get('lastName')?.touched && registerForm.get('lastName')?.invalid">
                Last Name is required.
              </small>
            </div>
          </div>

          <!-- Birthday and Gender -->
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="dateOfBirth">Date of Birth <span class="text-danger">*</span></label>
              <input
                id="dateOfBirth"
                type="date"
                class="form-control"
                formControlName="dateOfBirth"
              />
              <small class="text-danger" *ngIf="registerForm.get('dateOfBirth')?.touched && registerForm.get('dateOfBirth')?.invalid">
                Date of Birth is required.
              </small>
            </div>
            <div class="col-md-6 mb-3">
              <label for="gender">Gender <span class="text-danger">*</span></label>
              <select
                id="gender"
                class="form-control"
                formControlName="gender"
              >
                <option value="" disabled>Select Gender</option>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
              </select>
              <small class="text-danger" *ngIf="registerForm.get('gender')?.touched && registerForm.get('gender')?.invalid">
                Gender is required.
              </small>
            </div>
          </div>

          <!-- Address and Mobile -->
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="address">Address <span class="text-danger">*</span></label>
              <input
                id="address"
                type="text"
                class="form-control"
                placeholder="Address"
                formControlName="address"
              />
              <small class="text-danger" *ngIf="registerForm.get('address')?.touched && registerForm.get('address')?.invalid">
                Address is required.
              </small>
            </div>
            <div class="col-md-6 mb-3">
              <label for="mobile">Mobile Number <span class="text-danger">*</span></label>
              <input
                id="mobile"
                type="text"
                class="form-control"
                placeholder="Mobile Number"
                formControlName="mobile"
              />
              <small
                class="text-danger"
                *ngIf="registerForm.get('mobile')?.touched && registerForm.get('mobile')?.invalid"
              >
                A valid Mobile Number is required.
              </small>
            </div>
          </div>

          <!-- Email and Profile Picture -->
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="email">Email <span class="text-danger">*</span></label>
              <input
                id="email"
                type="email"
                class="form-control"
                placeholder="Email"
                formControlName="email"
              />
              <small class="text-danger" *ngIf="registerForm.get('email')?.touched && registerForm.get('email')?.invalid">
                A valid Email is required.
              </small>
            </div>
            <div class="col-md-6 mb-3">
              <label for="profilePicture">Profile Picture <span class="text-danger">*</span></label>
              <input
                type="file"
                id="profilePicture"
                class="form-control"
                (change)="handleFileInput($event)"
              />
              <small class="text-muted">Only images are allowed</small>
              <div *ngIf="registerForm.get('profilePicture')?.invalid && registerForm.get('profilePicture')?.touched" class="text-danger">
                Profile picture is required.
              </div>
            </div>
          </div>

          <!-- Password Section -->
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="password">Password <span class="text-danger">*</span></label>
              <input
                id="password"
                type="password"
                class="form-control"
                placeholder="Password"
                formControlName="password"
                (input)="checkPasswordStrength()"
              />
              <small class="text-danger" *ngIf="registerForm.get('password')?.touched && registerForm.get('password')?.invalid">
                Password must be at least 8 characters.
              </small>
            </div>
            <div class="col-md-6 mb-3">
              <label for="confirmPassword">Confirm Password <span class="text-danger">*</span></label>
              <input
                id="confirmPassword"
                type="password"
                class="form-control"
                placeholder="Confirm Password"
                formControlName="confirmPassword"
              />
              <small class="text-danger" *ngIf="registerForm.get('confirmPassword')?.value !== registerForm.get('password')?.value">
                Passwords must match.
              </small>
            </div>
          </div>

          <!-- Password Strength -->
          <div class="mb-3">
            <label>Password Strength</label>
            <div class="progress">
              <div
                class="progress-bar"
                [ngClass]="{
                  'bg-danger': progressBarWidth < 40,
                  'bg-warning': progressBarWidth >= 40 && progressBarWidth < 60,
                  'bg-primary': progressBarWidth >= 60 && progressBarWidth < 80,
                  'bg-success': progressBarWidth >= 80,
                  'progress-bar-striped': true
                }"
                role="progressbar"
                [style.width.%]="progressBarWidth"
              ></div>
            </div>
            <small class="text-muted">{{ passwordStrength }}</small>
          </div>

          <!-- Submit Button -->
          <div class="mt-4">
            <button
              type="submit"
              class="btn btn-primary btn-block"
              [disabled]="registerForm.invalid"
            >
              Register
            </button>
            <div class="text-center mt-3">
              <a href="#" class="text-primary">I already have an account</a>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>


/* ===== File: src\app\auth\register\register.component.scss ===== */
.card-title {
    text-align: center !important;
    float: unset !important;
    font-weight: bold !important;
    font-size: 1.4rem !important;
}

.input-group-text {
    background-color: transparent !important;
}


p {
    text-align: center;
    font-size: 0.9rem !important;
    margin-top: 0.6rem !important;
}

.custom-link {
    font-size: 0.8rem !important;
    margin-bottom: 0.3rem !important;
}

.password-strength ul {
    list-style-type: none !important;
    padding: 0;
}

ul.password-criteria{
    list-style-type: none !important;
    padding: unset !important;
}

.password-strength li {
    color: red;
}

.password-strength .text-success {
    color: green !important;
}

.bg-yellow {
    background-color: yellow !important;
}

/* ===== File: src\app\auth\register\register.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { RegisterComponent } from './register.component';

describe('RegisterComponent', () => {
  let component: RegisterComponent;
  let fixture: ComponentFixture<RegisterComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [RegisterComponent]
    });
    fixture = TestBed.createComponent(RegisterComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\auth\register\register.component.ts ===== */
import { CommonModule } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';

import { Router } from '@angular/router';
import { PatientDataService } from 'src/app/services/patients/patient-data-service';

@Component({
  selector: 'app-register',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.scss']
})
export class RegisterComponent implements OnInit {
  registerForm!: FormGroup;
  passwordStrength: string = 'Weak';
  progressBarWidth: number = 0;
  isSubmitting: boolean = false;

  constructor(
    private fb: FormBuilder,
    private patientDataService: PatientDataService,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.initializeForm();
  }

  initializeForm(): void {
    this.registerForm = this.fb.group({
      firstName: ['', Validators.required],
      lastName: ['', Validators.required],
      dateOfBirth: ['', Validators.required],
      gender: ['', Validators.required],
      address: ['', Validators.required],
      mobile: ['', [Validators.required, Validators.pattern(/^\d{11}$/)]],
      email: ['', [Validators.required, Validators.email]],
      profilePicture: [null, Validators.required],
      password: ['', [Validators.required, Validators.minLength(8)]],
      confirmPassword: ['', Validators.required],
    });
  }

  handleFileInput(event: Event): void {
    const file = (event.target as HTMLInputElement)?.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = () => {
        const base64String = reader.result as string;
        this.registerForm.patchValue({ profilePicture: base64String });
      };
      reader.onerror = (error) => {
        console.error('Error reading file:', error);
      };
      reader.readAsDataURL(file);
    }
  }

  checkPasswordStrength(): void {
    const password = this.registerForm.get('password')?.value || '';
    let strength = 0;

    const criteria = [
      { regex: /[a-z]/, description: 'lowercase' },
      { regex: /[A-Z]/, description: 'uppercase' },
      { regex: /[0-9]/, description: 'number' },
      { regex: /[!@#$%^&*]/, description: 'special character' },
      { regex: /.{8,}/, description: 'minimum 8 characters' }
    ];

    criteria.forEach((criterion) => {
      if (criterion.regex.test(password)) {
        strength += 20;
      }
    });

    this.progressBarWidth = strength;
    if (strength < 40) {
      this.passwordStrength = 'Weak';
    } else if (strength < 60) {
      this.passwordStrength = 'Moderate';
    } else if (strength < 80) {
      this.passwordStrength = 'Good';
    } else {
      this.passwordStrength = 'Strong';
    }
  }

  onSubmit(): void {
    if (this.registerForm.valid) {
      this.isSubmitting = true;
      const patientData = this.registerForm.value;

      this.patientDataService.addPatient(patientData).subscribe({
        next: (response) => {
          console.log('Patient added successfully:', response);
          this.isSubmitting = false;
          this.router.navigate(['/patients']); // Redirect to patients list or another page
        },
        error: (err) => {
          console.error('Failed to add patient:', err);
          this.isSubmitting = false;
        }
      });
    } else {
      this.registerForm.markAllAsTouched();
    }
  }
}


/* ===== File: src\app\dashboard\dentistdashboard\calendar\calendar.component.html ===== */
<p>calendar works!</p>


/* ===== File: src\app\dashboard\dentistdashboard\calendar\calendar.component.scss ===== */


/* ===== File: src\app\dashboard\dentistdashboard\calendar\calendar.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { CalendarComponent } from './calendar.component';

describe('CalendarComponent', () => {
  let component: CalendarComponent;
  let fixture: ComponentFixture<CalendarComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [CalendarComponent]
    });
    fixture = TestBed.createComponent(CalendarComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\dashboard\dentistdashboard\calendar\calendar.component.ts ===== */
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-calendar',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './calendar.component.html',
  styleUrls: ['./calendar.component.scss']
})
export class CalendarComponent {

}


/* ===== File: src\app\dashboard\dentistdashboard\defaultviewdentist\defaultviewdentist.component.html ===== */
<section class="content-header">
    <div class="container-fluid">
      <div class="row mb-2">
        <div class="col-sm-6">
          <h1>Dentist Dashboard</h1>
        </div>
        <div class="col-sm-6">
          <ol class="breadcrumb float-sm-right">
            <li class="breadcrumb-item"><a href="#">Home</a></li>
            <li class="breadcrumb-item active">Dentist Dashboard</li>
          </ol>
        </div>
      </div>
    </div>
  </section>
<section>
    <div class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-lg-3 col-6">
                  <!-- small box -->
                  <div class="small-box bg-info">
                    <div class="inner">
                      <h3>150</h3>
      
                      <p>New Orders</p>
                    </div>
                    <div class="icon">
                      <i class="ion ion-bag"></i>
                    </div>
                    <a href="#" class="small-box-footer">More info <i class="fas fa-arrow-circle-right"></i></a>
                  </div>
                </div>
                <!-- ./col -->
                <div class="col-lg-3 col-6">
                  <!-- small box -->
                  <div class="small-box bg-success">
                    <div class="inner">
                      <h3>53<sup style="font-size: 20px">%</sup></h3>
      
                      <p>Bounce Rate</p>
                    </div>
                    <div class="icon">
                      <i class="ion ion-stats-bars"></i>
                    </div>
                    <a href="#" class="small-box-footer">More info <i class="fas fa-arrow-circle-right"></i></a>
                  </div>
                </div>
                <!-- ./col -->
                <div class="col-lg-3 col-6">
                  <!-- small box -->
                  <div class="small-box bg-warning">
                    <div class="inner">
                      <h3>44</h3>
      
                      <p>User Registrations</p>
                    </div>
                    <div class="icon">
                      <i class="ion ion-person-add"></i>
                    </div>
                    <a href="#" class="small-box-footer">More info <i class="fas fa-arrow-circle-right"></i></a>
                  </div>
                </div>
                <!-- ./col -->
                <div class="col-lg-3 col-6">
                  <!-- small box -->
                  <div class="small-box bg-danger">
                    <div class="inner">
                      <h3>65</h3>
      
                      <p>Unique Visitors</p>
                    </div>
                    <div class="icon">
                      <i class="ion ion-pie-graph"></i>
                    </div>
                    <a href="#" class="small-box-footer">More info <i class="fas fa-arrow-circle-right"></i></a>
                  </div>
                </div>
                <!-- ./col -->
              </div>
        </div>
    </div>
</section>

/* ===== File: src\app\dashboard\dentistdashboard\defaultviewdentist\defaultviewdentist.component.scss ===== */
.content{
    padding: 0 .5rem !important;
}

/* ===== File: src\app\dashboard\dentistdashboard\defaultviewdentist\defaultviewdentist.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { DefaultviewdentistComponent } from './defaultviewdentist.component';

describe('DefaultviewdentistComponent', () => {
  let component: DefaultviewdentistComponent;
  let fixture: ComponentFixture<DefaultviewdentistComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [DefaultviewdentistComponent]
    });
    fixture = TestBed.createComponent(DefaultviewdentistComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\dashboard\dentistdashboard\defaultviewdentist\defaultviewdentist.component.ts ===== */
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-defaultviewdentist',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './defaultviewdentist.component.html',
  styleUrls: ['./defaultviewdentist.component.scss']
})
export class DefaultviewdentistComponent {

}


/* ===== File: src\app\dashboard\dentistdashboard\dentistdashboard.component.html ===== */
<div class="wrapper">
  <!-- Navbar -->
  <nav class="main-header navbar navbar-expand navbar-white navbar-light">
    <!-- Left navbar links -->
    <ul class="navbar-nav">
      <li class="nav-item">
        <a class="nav-link" data-widget="pushmenu" href="#" role="button"><i class="fas fa-bars"></i></a>
      </li>
    </ul>

    <!-- Right navbar links -->
    <ul class="navbar-nav ml-auto">
      <!-- Notifications Dropdown Menu -->
      <li class="nav-item dropdown">
        <a class="nav-link" data-toggle="dropdown" href="#">
          <i class="far fa-bell"></i>
          <span class="badge badge-warning navbar-badge">15</span>
        </a>
        <div class="dropdown-menu dropdown-menu-lg dropdown-menu-right">
          <span class="dropdown-item dropdown-header">15 Notifications</span>
          <div class="dropdown-divider"></div>
          <a href="#" class="dropdown-item">
            <i class="fas fa-envelope mr-2"></i> 4 new messages
            <span class="float-right text-muted text-sm">3 mins</span>
          </a>
          <div class="dropdown-divider"></div>
          <a href="#" class="dropdown-item">
            <i class="fas fa-users mr-2"></i> 8 friend requests
            <span class="float-right text-muted text-sm">12 hours</span>
          </a>
          <div class="dropdown-divider"></div>
          <a href="#" class="dropdown-item">
            <i class="fas fa-file mr-2"></i> 3 new reports
            <span class="float-right text-muted text-sm">2 days</span>
          </a>
          <div class="dropdown-divider"></div>
          <a href="#" class="dropdown-item dropdown-footer">See All Notifications</a>
        </div>
      </li>

      <li class="nav-item dropdown">
        <a class="nav-link" data-toggle="dropdown" href="#">
          <i class="far fa-user-circle"></i>
          <span>{{ user.name }}</span>
        </a>
        <div class="dropdown-menu dropdown-menu-lg dropdown-menu-right">
          <div class="dropdown-divider"></div>
          <a href="#" class="dropdown-item" data-toggle="modal" data-target="#logoutModal">
            <i class="fas fa-sign-out-alt mr-2"></i> Logout
          </a>
        </div>
      </li>
    </ul>
  </nav>

  <!-- Main Sidebar Container -->
  <aside class="main-sidebar sidebar-dark-primary elevation-4">
    <!-- Brand Logo -->
    <a href="../../index3.html" class="brand-link">
      <img src="assets/img/user2-160x160.jpg" alt="AdminLTE Logo" class="brand-image img-circle elevation-3" style="opacity: .8">
      <span class="brand-text font-weight-light">Alexander Pierce</span>
    </a>

    <!-- Sidebar -->
    <div class="sidebar">
      <nav class="mt-2">
        <ul class="nav nav-pills nav-sidebar flex-column" data-widget="treeview" role="menu" data-accordion="false">
          <li class="nav-item">
            <a routerLink="/dentistdashboard" routerLinkActive="active" [routerLinkActiveOptions]="{exact: true}" class="nav-link">
              <i class="nav-icon fa fa-home"></i>
              <p>Dashboard</p>
            </a>
          </li>
          <li class="nav-item">
            <a routerLink="/dentistdashboard/patients" routerLinkActive="active" class="nav-link">
              <i class="nav-icon fa fa-user-plus"></i>
              <p>Patients</p>
            </a>
          </li>
          <li class="nav-item">
            <a routerLink="/dentistdashboard/schedule" routerLinkActive="active" class="nav-link">
              <i class="nav-icon fa fa-calendar"></i>
              <p>Schedule</p>
            </a>
          </li>
          <li class="nav-item has-treeview" [routerLinkActive]="['menu-open', 'active']" #rla="routerLinkActive">
            <a href="#" class="nav-link" [ngClass]="{ active: rla.isActive }">
              <i class="nav-icon fa fa-list-ul"></i>
              <p>
                Appointment
                <i class="fas fa-angle-left right"></i>
              </p>
            </a>
            <ul class="nav nav-treeview">
              <li class="nav-item">
                <a routerLink="/dentistdashboard/walkinrequest" routerLinkActive="active" class="nav-link">
                  <i class="far fa-circle nav-icon"></i>
                  <p>Walk-in Request</p>
                </a>
              </li>
              <li class="nav-item">
                <a routerLink="/dentistdashboard/onlinerequest" routerLinkActive="active" class="nav-link">
                  <i class="far fa-circle nav-icon"></i>
                  <p>Online Request</p>
                </a>
              </li>
              <li class="nav-item">
                <a routerLink="/dentistdashboard/calendar" routerLinkActive="active" class="nav-link">
                  <i class="far fa-circle nav-icon"></i>
                  <p>Calendar</p>
                </a>
              </li>
            </ul>
          </li>
          
          
          <li class="nav-item">
            <a routerLink="/dentistdashboard/prescription" routerLinkActive="active" class="nav-link">
              <i class="nav-icon fa fa-tags"></i>
              <p>Prescription</p>
            </a>
          </li>
          <li class="nav-item">
            <a routerLink="/dentistdashboard/treatment" routerLinkActive="active" class="nav-link">
              <i class="nav-icon fa fa-list-alt"></i>
              <p>Treatment</p>
            </a>
          </li>
          <li class="nav-item">
            <a routerLink="/dentistdashboard/dentistprofile" routerLinkActive="active" class="nav-link">
              <i class="nav-icon fa fa-user"></i>
              <p>Profile</p>
            </a>
          </li>
        </ul>
      </nav>
    </div>
  </aside>

  <!-- Logout Modal -->
  <div class="modal fade top-center-modal" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="logoutModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="logoutModalLabel">Ready to Leave?</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">Are you sure you want to logout?</div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">No</button>
          <button type="button" class="btn btn-primary" (click)="logout()">Logout</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Content Wrapper. Contains page content -->
  <div class="content-wrapper">
    <!-- Content Header (Page header) -->


    <!-- Main content -->
    <router-outlet></router-outlet>
  </div>

  <app-footer></app-footer>

  <!-- Control Sidebar -->
  <aside class="control-sidebar control-sidebar-dark">
  </aside>
</div>

/* ===== File: src\app\dashboard\dentistdashboard\dentistdashboard.component.scss ===== */


/* ===== File: src\app\dashboard\dentistdashboard\dentistdashboard.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { DentistdashboardComponent } from './dentistdashboard.component';

describe('DentistdashboardComponent', () => {
  let component: DentistdashboardComponent;
  let fixture: ComponentFixture<DentistdashboardComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [DentistdashboardComponent]
    });
    fixture = TestBed.createComponent(DentistdashboardComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\dashboard\dentistdashboard\dentistdashboard.component.ts ===== */
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FooterComponent } from "../../footer/footer.component";
import { Router, RouterModule, RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-dentistdashboard',
  standalone: true,
  imports: [CommonModule, FooterComponent, RouterModule, RouterOutlet],
  templateUrl: './dentistdashboard.component.html',
  styleUrls: ['./dentistdashboard.component.scss']
})
export class DentistdashboardComponent {
    constructor(private router: Router) {}
    
  user = {
    name: 'Dr. Jane Doe',
    email: 'feliztoothdev@gmail.com',
  };

  logout() {
    // Remove modal backdrop manually
    const backdrop = document.querySelector('.modal-backdrop');
    if (backdrop) {
      backdrop.remove();
    }

    this.router.navigate(['/login']);
  }
}

/* ===== File: src\app\dashboard\dentistdashboard\onlinerequest\onlinerequest.component.html ===== */
<p>onlinerequest works!</p>


/* ===== File: src\app\dashboard\dentistdashboard\onlinerequest\onlinerequest.component.scss ===== */


/* ===== File: src\app\dashboard\dentistdashboard\onlinerequest\onlinerequest.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { OnlinerequestComponent } from './onlinerequest.component';

describe('OnlinerequestComponent', () => {
  let component: OnlinerequestComponent;
  let fixture: ComponentFixture<OnlinerequestComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [OnlinerequestComponent]
    });
    fixture = TestBed.createComponent(OnlinerequestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\dashboard\dentistdashboard\onlinerequest\onlinerequest.component.ts ===== */
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-onlinerequest',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './onlinerequest.component.html',
  styleUrls: ['./onlinerequest.component.scss']
})
export class OnlinerequestComponent {

}


/* ===== File: src\app\dashboard\dentistdashboard\patients\patient-details\patient-details.component.html ===== */
<section>
  <div class="row">
    <div class="col-12">
      <div class="card card-primary card-outline card-tabs">
        <div class="card-header p-0 pt-1 border-bottom-0">
          <ul class="nav nav-tabs" id="custom-tabs-three-tab" role="tablist">
            <li class="nav-item">
              <a class="nav-link active" id="overview-tab" data-toggle="pill" href="#overview" role="tab" aria-controls="overview" aria-selected="true">Overview</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" id="medical-history-tab" data-toggle="pill" href="#medical-history" role="tab" aria-controls="medical-history" aria-selected="false">Medical History</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" id="treatment-tab" data-toggle="pill" href="#treatment" role="tab" aria-controls="treatment" aria-selected="false">Treatment</a>
            </li>
          </ul>
        </div>
        <div class="card-body">
          <div class="tab-content" id="custom-tabs-three-tabContent">
            <!-- Overview Tab -->
            <div class="tab-pane fade show active" id="overview" role="tabpanel" aria-labelledby="overview-tab">
              <div class="row">
                <!-- Patient Info Card -->
                <div class="col-12 col-md-3 mb-3">
                  <ng-container *ngIf="patientData$ | async as patientData; ">
                    <app-info-card
                      [title]="'Patient Info'"
                      [imageSrc]="patientData.photo"
                      [name]="patientData.fullname"
                      [subtitle]="patientData.email"
                      [details]="[
                        { label: 'Birthdate', value: patientData.birthday},
                        { label: 'Phone', value: patientData.contact_number},
                        { label: 'Address', value: patientData.address }
                      ]"
                    ></app-info-card>
                  </ng-container>
                </div>
                
                <!-- Appointment and Prescription Section -->
                <div class="col-12 col-md-9">
                  <div class="card">
                    <div class="card-header p-2">
                      <ul class="nav nav-pills">
                        <li class="nav-item"><a class="nav-link active" href="#appointment" data-toggle="tab">Appointment</a></li>
                        <li class="nav-item"><a class="nav-link" href="#prescription" data-toggle="tab">Prescription</a></li>
                      </ul>
                    </div>
                    <div class="card-body">
                      <div class="tab-content">
                        <!-- Appointment Tab -->
                        <div class="tab-pane fade show active" id="appointment">
                          <app-patient-appointment-table></app-patient-appointment-table>
                        </div>
                        <!-- Prescription Tab -->
                        <div class="tab-pane fade" id="prescription">
                          <app-patient-prescription-table></app-patient-prescription-table>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Other Tabs -->
            <div class="tab-pane fade" id="medical-history" role="tabpanel" aria-labelledby="medical-history-tab">
              <!-- Medical/Dental History Section -->
              <div class="row">
                <div class="col-12 col-md-6">
                  <div class="card">
                    <div class="card-header">
                      <button class="btn btn-primary" (click)="openAddDentalHistoryModal()">
                        <i class="fas fa-plus"></i> Add Dental History
                      </button>
                    </div>
                    <div class="card-body">
                      <app-patient-dentalhistory-table></app-patient-dentalhistory-table>
                    </div>
                  </div>
                </div>
                <div class="col-12 col-md-6">
                  <div class="card">
                    <div class="card-header">
                      <button class="btn btn-primary" (click)="openAddMedicalHistoryModal()">
                        <i class="fas fa-plus"></i> Add Medical History
                      </button>
                    </div>
                    <div class="card-body">
                      <app-patient-medicalhistory-table></app-patient-medicalhistory-table>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="tab-pane fade" id="treatment" role="tabpanel" aria-labelledby="treatment-tab">
              <div class="card">
                <div class="card-body">
                  <app-patient-treatment-table></app-patient-treatment-table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>







<!-- Add/Edit Dental History Modal -->
<app-add-edit-dental-history
  [isVisible]="isAddDentalHistoryModalVisible"
  [title]="'Add Dental History'"
  (closeModal)="closeAddDentalHistoryModal()"
  (submitModal)="handleDentalHistorySubmit($event)"
></app-add-edit-dental-history>

<!-- Add/Edit Medical History Modal -->
<app-add-edit-medical-history
  [isVisible]="isAddMedicalHistoryModalVisible"
  [title]="'Add Medical History'"
  (closeModal)="closeAddMedicalHistoryModal()"
  (submitModal)="handleMedicalHistorySubmit($event)"
></app-add-edit-medical-history>

/* ===== File: src\app\dashboard\dentistdashboard\patients\patient-details\patient-details.component.scss ===== */
.list-group-item{
    border: unset !important;
    border-bottom: 1px solid rgba(0, 0, 0, .125) !important;
}

.float-right{
    color: #6c757d!important

}

.patientinfo{
    font-size: 1.4rem !important;
}

h2{
    font-size: 1.2rem !important;
    font-weight: 300 !important;
    margin-top: 1rem !important;
    margin-bottom: 2rem !important;
}

b{
    color: #000 !important;
}

.row{
    margin: 1rem 0 !important;
}

.alert.alert-success.alert-dismissible {
    margin: 0 0.5rem !important;
}

/* ===== File: src\app\dashboard\dentistdashboard\patients\patient-details\patient-details.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { PatientDetailsComponent } from './patient-details.component';

describe('PatientDetailsComponent', () => {
  let component: PatientDetailsComponent;
  let fixture: ComponentFixture<PatientDetailsComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [PatientDetailsComponent]
    });
    fixture = TestBed.createComponent(PatientDetailsComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\dashboard\dentistdashboard\patients\patient-details\patient-details.component.ts ===== */
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ActivatedRoute, Router } from '@angular/router';
import { PatientData } from 'src/app/interfaces/patients.interface';
import { PatientDataService } from 'src/app/services/patients/patient-data-service';
import { InfoCardComponent } from 'src/app/my-components/cards/info-card/info-card.component';
import { PatientAppointmentTableComponent } from 'src/app/shareables/tables/patient-tables/patient-appointment-table/patient-appointment-table.component';
import { PatientPrescriptionTableComponent } from 'src/app/shareables/tables/patient-tables/patient-prescription-table/patient-prescription-table.component';
import { AddEditDentalHistoryComponent } from 'src/app/my-components/modals/add-edit-dental-history/add-edit-dental-history.component';
import { PatientDentalhistoryTableComponent } from 'src/app/shareables/tables/patient-tables/patient-dentalhistory-table/patient-dentalhistory-table.component';
import { AddEditMedicalHistoryComponent } from 'src/app/my-components/modals/add-edit-medical-history/add-edit-medical-history.component';
import { PatientMedicalhistoryTableComponent } from 'src/app/shareables/tables/patient-tables/patient-medicalhistory-table/patient-medicalhistory-table.component';
import { PatientTreatmentTableComponent } from 'src/app/shareables/tables/patient-tables/patient-treatment-table/patient-treatment-table.component';
import { Patient } from 'src/app/interfaces/patient_details.interface';
import { Observable } from 'rxjs';
import { Store } from '@ngrx/store';
import { selectPatients, selectSelectedPatient } from 'src/app/ngrx/patients/patients.reducers';
import { PatientsActions } from 'src/app/ngrx/patients/patients.actions';
import { decodeAccessToken } from 'src/app/services/auth/auth.utils';

@Component({
  selector: 'app-patient-details',
  standalone: true,
  imports: [
    CommonModule,
    InfoCardComponent,
    PatientAppointmentTableComponent,
    PatientPrescriptionTableComponent,
    AddEditDentalHistoryComponent,
    PatientDentalhistoryTableComponent,
    AddEditMedicalHistoryComponent,
    PatientMedicalhistoryTableComponent,
    PatientTreatmentTableComponent,
  ],
  templateUrl: './patient-details.component.html',
  styleUrls: ['./patient-details.component.scss'],
})
export class PatientDetailsComponent implements OnInit {
  isAddDentalHistoryModalVisible = false;
  isAddMedicalHistoryModalVisible = false;

  errorMessage = '';
  isLoading = false;
  patientData$: Observable<Patient | null> = this.store.select(selectSelectedPatient);

  constructor(
    private store: Store,
    private route: ActivatedRoute
  ) {}

  ngOnInit(): void {
    this.store.dispatch(PatientsActions.loadPatients()); // Load the selected patient
   

    const patientId = Number(this.route.snapshot.paramMap.get('patientId')); // ✅ Get patientId from the URL

    if (patientId) {
      this.store.dispatch(PatientsActions.loadPatient({ id: patientId })); // ✅ Dispatch action to load the patient
    }
  
  
  }
  
  

  // Methods for modals
  openAddDentalHistoryModal(): void {
    this.isAddDentalHistoryModalVisible = true;
  }

  openAddMedicalHistoryModal(): void {
    this.isAddMedicalHistoryModalVisible = true;
  }

  closeAddDentalHistoryModal(): void {
    this.isAddDentalHistoryModalVisible = false;
  }

  closeAddMedicalHistoryModal(): void {
    this.isAddMedicalHistoryModalVisible = false;
  }

  handleDentalHistorySubmit(dentalHistory: any): void {
    console.log('Dental History Submitted:', dentalHistory);
    this.closeAddDentalHistoryModal();
  }

  handleMedicalHistorySubmit(medicalHistory: any): void {
    console.log('Medical History Submitted:', medicalHistory);
    this.closeAddMedicalHistoryModal();
  }
}


/* ===== File: src\app\dashboard\dentistdashboard\patients\patients.component.html ===== */
<section class="content-header">
  <div class="container-fluid">
    <div class="row mb-2">
      <div class="col-sm-6">
        <h1>{{ pagetitle }}</h1>
      </div>
      <div class="col-sm-6">
        <ol class="breadcrumb float-sm-right">
          <li class="breadcrumb-item"><a href="#">Home</a></li>
          <li class="breadcrumb-item active">{{ pagetitle }}</li>
        </ol>
      </div>
    </div>
  </div>
</section>

<section>
  <div class="content">
    <div class="container-fluid">
      <div class="col-md-12">
        <ng-container *ngIf="isLoading$ | async; else tableContent">
          <p>Loading patients...</p>
        </ng-container>

        <ng-template #tableContent>
          <app-table
            [title]="pagetitle + ' List'"
            [data]="(filteredPatients$ | async) || []"
            [columns]="columns"
            [itemsPerPage]="itemsPerPage"
            [(currentPage)]="currentPage"
            [searchTerm]="searchTerm"
            [pageSizeOptions]="[5, 10, 15, 20]"
            [showAddButton]="false"
            (searchTermChange)="filterPatientsBySearch($event)"
            (currentPageChange)="currentPage = $event"
            (rowAction)="handleRowAction($event)"
            (sort)="sortPatientsByColumn($event)"
            (actionClick)="handleActionClick($event)"
          >
            <!-- ✅ Custom Action Button for Viewing Patient -->
            <ng-template #actionsTemplate let-patient="row">
              <button class="btn btn-primary" (click)="handleRowAction(patient)">
                View Details
              </button>
            </ng-template>
          </app-table>
        </ng-template>
      </div>
    </div>
  </div>
</section>


/* ===== File: src\app\dashboard\dentistdashboard\patients\patients.component.scss ===== */
.content{
    padding: 0 .5rem !important;
}

.card-title{
    font-size: 1.5rem;
}

/* ===== File: src\app\dashboard\dentistdashboard\patients\patients.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { PatientsComponent } from './patients.component';

describe('PatientsComponent', () => {
  let component: PatientsComponent;
  let fixture: ComponentFixture<PatientsComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [PatientsComponent]
    });
    fixture = TestBed.createComponent(PatientsComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\dashboard\dentistdashboard\patients\patients.component.ts ===== */
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { CommonModule } from '@angular/common';
import { Store, select } from '@ngrx/store';
import { Observable, BehaviorSubject, combineLatest, map } from 'rxjs';
import { TableComponent } from 'src/app/my-components/tables/table/table.component';
import { Patient } from 'src/app/interfaces/patient_details.interface';
import { PatientsActions } from 'src/app/ngrx/patients/patients.actions';
import { selectPatients, selectIsLoading, selectError } from 'src/app/ngrx/patients/patients.reducers';
import { DisplayTableComponent } from 'src/app/my-components/tables/display-table/display-table.component';

@Component({
  selector: 'app-patients',
  standalone: true,
  imports: [CommonModule, TableComponent],
  templateUrl: './patients.component.html',
  styleUrls: ['./patients.component.scss']
})
export class PatientsComponent implements OnInit {
  pagetitle = 'Patients';

  // ✅ Fetch patients from NgRx Store
  patients$: Observable<Patient[]> = this.store.pipe(select(selectPatients));
  isLoading$: Observable<boolean> = this.store.pipe(select(selectIsLoading));
  errorMessage$: Observable<string | null> = this.store.pipe(select(selectError));

  // ✅ BehaviorSubjects for search and sorting
  private searchTermSubject = new BehaviorSubject<string>('');
  searchTerm$ = this.searchTermSubject.asObservable();

  private sortColumnSubject = new BehaviorSubject<string>('fullname'); // Default sorting column
  private sortDirectionSubject = new BehaviorSubject<'asc' | 'desc'>('asc');

  filteredPatients$: Observable<Patient[]>;

  currentPage = 1;
  itemsPerPage = 10;

  columns = [
    { key: 'photo', label: 'Photo', render: (data: any) => `<img src="${data}" class="img-thumbnail" width="50" alt="Photo">`, sortable: false },
    { key: 'fullname', label: 'Name', sortable: true },
    { key: 'birthday', label: 'Birthday', sortable: true },
    { key: 'sex', label: 'Gender', sortable: true },
    { key: 'contact_number', label: 'Contact', sortable: false },
    { key: 'email', label: 'Email', sortable: true },
    { key: 'action', label: 'Action', sortable: false }
  ];

  actions = [
    { label: 'View', icon: 'fas fa-eye', callback: 'view' }
  ];

  constructor(private router: Router, private store: Store) {
    // ✅ Combine Observables for filtering & sorting
    this.filteredPatients$ = combineLatest([
      this.patients$,
      this.searchTerm$,
      this.sortColumnSubject,
      this.sortDirectionSubject
    ]).pipe(
      map(([patients, searchTerm, sortColumn, sortDirection]) => {
        let filtered = this.filterPatients(patients, searchTerm);
        filtered = filtered.map(patient => ({
          ...patient,
          birthday: this.formatDate(patient.birthday),
        }));
        return this.sortPatients(filtered, sortColumn, sortDirection);
      })
    );
  }

  ngOnInit(): void {
    this.store.dispatch(PatientsActions.loadPatients()); // ✅ Dispatch action to load patients
  }

  // ✅ Format birthday
  formatDate(dateString: string): string {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' });
  }

  // ✅ Filter Patients based on search term
  private filterPatients(patients: Patient[], searchTerm: string): Patient[] {
    if (!searchTerm.trim()) return patients;
    return patients.filter((patient) =>
      `${patient.fullname} ${patient.email} ${patient.sex} ${patient.contact_number}`
        .toLowerCase()
        .includes(searchTerm.toLowerCase())
    );
  }

  // ✅ Sort Patients efficiently
  private sortPatients(
    patients: Patient[],
    sortColumn: string,
    sortDirection: 'asc' | 'desc'
  ): Patient[] {
    return [...patients].sort((a, b) => {
      const aValue = a[sortColumn as keyof Patient];
      const bValue = b[sortColumn as keyof Patient];

      if (typeof aValue === 'string' && typeof bValue === 'string') {
        return sortDirection === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
      }

      if (typeof aValue === 'number' && typeof bValue === 'number') {
        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;
      }

      return 0;
    });
  }

  // ✅ Getter for search term
  get searchTerm(): string {
    return this.searchTermSubject.getValue();
  }

  // 🔍 Updates the search term dynamically
  filterPatientsBySearch(search: string): void {
    this.searchTermSubject.next(search.trim());
  }

  // 📌 Sort patients by column
  sortPatientsByColumn(column: string): void {
    if (this.sortColumnSubject.getValue() === column) {
      this.sortDirectionSubject.next(this.sortDirectionSubject.getValue() === 'asc' ? 'desc' : 'asc');
    } else {
      this.sortColumnSubject.next(column);
      this.sortDirectionSubject.next('asc');
    }
  }

  handleRowAction(rowData: any): void {
    this.navigateToPatientDetails(rowData.user_id);
  }

  navigateToPatientDetails(patientId: number): void {
    this.router.navigate([`/dentistdashboard/patients/patient-details`, patientId]);
  }

  handleActionClick(event: { action: string; row: any }): void {
    if (event.action === 'view') {
      this.navigateToPatientDetails(event.row.user_id);
    }
  }
}


/* ===== File: src\app\dashboard\dentistdashboard\prescription\prescription.component.html ===== */
<p>prescription works!</p>


/* ===== File: src\app\dashboard\dentistdashboard\prescription\prescription.component.scss ===== */


/* ===== File: src\app\dashboard\dentistdashboard\prescription\prescription.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { PrescriptionComponent } from './prescription.component';

describe('PrescriptionComponent', () => {
  let component: PrescriptionComponent;
  let fixture: ComponentFixture<PrescriptionComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [PrescriptionComponent]
    });
    fixture = TestBed.createComponent(PrescriptionComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\dashboard\dentistdashboard\prescription\prescription.component.ts ===== */
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-prescription',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './prescription.component.html',
  styleUrls: ['./prescription.component.scss']
})
export class PrescriptionComponent {

}


/* ===== File: src\app\dashboard\dentistdashboard\profile\profile.component.html ===== */
<p>profile works!</p>


/* ===== File: src\app\dashboard\dentistdashboard\profile\profile.component.scss ===== */


/* ===== File: src\app\dashboard\dentistdashboard\profile\profile.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ProfileComponent } from './profile.component';

describe('ProfileComponent', () => {
  let component: ProfileComponent;
  let fixture: ComponentFixture<ProfileComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [ProfileComponent]
    });
    fixture = TestBed.createComponent(ProfileComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\dashboard\dentistdashboard\profile\profile.component.ts ===== */
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-profile',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './profile.component.html',
  styleUrls: ['./profile.component.scss']
})
export class ProfileComponent {

}


/* ===== File: src\app\dashboard\dentistdashboard\schedule\schedule.component.html ===== */
<section class="content-header">
  <div class="container-fluid">
    <div class="row mb-2">
      <div class="col-sm-6">
        <h1>{{ pagetitle }}</h1>
      </div>
      <div class="col-sm-6">
        <ol class="breadcrumb float-sm-right">
          <li class="breadcrumb-item"><a href="#">Home</a></li>
          <li class="breadcrumb-item active">{{ pagetitle }}</li>
        </ol>
      </div>
    </div>
  </div>
</section>

<section>
  <div class="content">
    <div class="container-fluid">
      <div class="col-md-12">
        <app-table
          [title]="pagetitle + ' List'"
          [data]="filteredSchedules"
          [columns]="[
            { key: 'date', label: 'Day', sortable: true },
            { key: 'startTime', label: 'Start Time', sortable: true },
            { key: 'endTime', label: 'End Time', sortable: true },
            { key: 'duration', label: 'Duration', sortable: true }
          ]"
          [pageSizeOptions]="[5, 10, 15, 20]"
          [(itemsPerPage)]="itemsPerPage"
          [(currentPage)]="p"
          [(searchTerm)]="searchTerm"
          [showAddButton]="true"
          [addButtonText]="'Add Schedule'"
          (sort)="sortSchedules($event)"
          (add)="openAddScheduleModal()"
          (itemsPerPageChange)="onItemsPerPageChange($event)"
          (currentPageChange)="p = $event"
          (searchTermChange)="filterSchedules($event)"
        ></app-table>
      </div>
    </div>
  </div>
</section>

<app-general-modal
  [isVisible]="isAddScheduleModalVisible"
  [title]="'Add Schedule'"
  (closeModal)="closeAddScheduleModal()"
  (submitModal)="handleAddSchedule($event)"
></app-general-modal>


/* ===== File: src\app\dashboard\dentistdashboard\schedule\schedule.component.scss ===== */
.content{
    padding: 0 .5rem !important;
}

.card-title{
    font-size: 1.5rem;
}

th.active {
    background-color: #f0f0f0;
    font-weight: bold;
  }
  

/* ===== File: src\app\dashboard\dentistdashboard\schedule\schedule.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ScheduleComponent } from './schedule.component';

describe('ScheduleComponent', () => {
  let component: ScheduleComponent;
  let fixture: ComponentFixture<ScheduleComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [ScheduleComponent]
    });
    fixture = TestBed.createComponent(ScheduleComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\dashboard\dentistdashboard\schedule\schedule.component.ts ===== */
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NgxPaginationModule } from 'ngx-pagination';
import { GeneralModalComponent } from 'src/app/my-components/modals/general-modal/general-modal.component';
import { TableComponent } from 'src/app/my-components/tables/table/table.component';
import { Schedule } from 'src/app/interfaces/patients.interface';
import { ScheduleService } from 'src/app/services/dentist/schedules.service';

@Component({
  selector: 'app-schedule',
  standalone: true,
  imports: [CommonModule, GeneralModalComponent, NgxPaginationModule, TableComponent],
  templateUrl: './schedule.component.html',
  styleUrls: ['./schedule.component.scss'],
})
export class ScheduleComponent implements OnInit {
  pagetitle = 'Schedule';
  isAddScheduleModalVisible: boolean = false;
  itemsPerPage: number = 10;
  p: number = 1; // Current page number
  searchTerm: string = '';
  sortColumn: string = 'date';
  sortDirection: string = 'asc';

  originalSchedules: Schedule[] = [];
  filteredSchedules: Schedule[] = [];

  constructor(private scheduleService: ScheduleService) {}

  ngOnInit(): void {
    this.fetchSchedules();
  }

  fetchSchedules(): void {
    this.scheduleService.getSchedules().subscribe({
      next: (schedules) => {
        this.originalSchedules = schedules;
        this.filteredSchedules = [...schedules];
      },
      error: (err) => console.error('Failed to fetch schedules:', err),
    });
  }

  openAddScheduleModal(): void {
    this.isAddScheduleModalVisible = true;
  }

  closeAddScheduleModal(): void {
    this.isAddScheduleModalVisible = false;
  }

  handleAddSchedule(schedule: Schedule): void {
    console.log('handleAddSchedule called with:', schedule); // Debug log
    this.scheduleService.addSchedule(schedule).subscribe({
      next: (newSchedule) => {
        console.log('API response:', newSchedule);
        this.originalSchedules.push(newSchedule); // Add the returned schedule
        this.filteredSchedules = [...this.originalSchedules];
        this.isAddScheduleModalVisible = false; // Close modal
      },
      error: (err) => console.error('Failed to add schedule:', err),
    });
  }

  sortSchedules(column: string): void {
    this.sortColumn = column;
    this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';
    this.filteredSchedules.sort((a: any, b: any) => {
      const valA = a[column].toLowerCase();
      const valB = b[column].toLowerCase();
      return this.sortDirection === 'asc' ? valA.localeCompare(valB) : valB.localeCompare(valA);
    });
  }

  filterSchedules(search: string): void {
    this.filteredSchedules = this.originalSchedules.filter((schedule) =>
      Object.values(schedule)
        .join(' ')
        .toLowerCase()
        .includes(search.toLowerCase())
    );
  }

  onItemsPerPageChange(items: number): void {
    this.itemsPerPage = items;
  }

  onSearch(event: Event): void {
    const input = (event.target as HTMLInputElement).value.trim().toLowerCase();
  
    if (input === '') {
      // Reset to original schedules if the input is empty
      this.filteredSchedules = [...this.originalSchedules];
    } else {
      // Filter schedules based on input
      this.filteredSchedules = this.originalSchedules.filter((schedule) =>
        Object.values(schedule)
          .join(' ')
          .toLowerCase()
          .includes(input)
      );
    }
  }
  
}


/* ===== File: src\app\dashboard\dentistdashboard\treatment\treatment.component.html ===== */
<p>treatment works!</p>


/* ===== File: src\app\dashboard\dentistdashboard\treatment\treatment.component.scss ===== */


/* ===== File: src\app\dashboard\dentistdashboard\treatment\treatment.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { TreatmentComponent } from './treatment.component';

describe('TreatmentComponent', () => {
  let component: TreatmentComponent;
  let fixture: ComponentFixture<TreatmentComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [TreatmentComponent]
    });
    fixture = TestBed.createComponent(TreatmentComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\dashboard\dentistdashboard\treatment\treatment.component.ts ===== */
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-treatment',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './treatment.component.html',
  styleUrls: ['./treatment.component.scss']
})
export class TreatmentComponent {

}


/* ===== File: src\app\dashboard\dentistdashboard\walkinrequest\walkinrequest.component.html ===== */
<p>walkinrequest works!</p>


/* ===== File: src\app\dashboard\dentistdashboard\walkinrequest\walkinrequest.component.scss ===== */


/* ===== File: src\app\dashboard\dentistdashboard\walkinrequest\walkinrequest.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { WalkinrequestComponent } from './walkinrequest.component';

describe('WalkinrequestComponent', () => {
  let component: WalkinrequestComponent;
  let fixture: ComponentFixture<WalkinrequestComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [WalkinrequestComponent]
    });
    fixture = TestBed.createComponent(WalkinrequestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\dashboard\dentistdashboard\walkinrequest\walkinrequest.component.ts ===== */
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-walkinrequest',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './walkinrequest.component.html',
  styleUrls: ['./walkinrequest.component.scss']
})
export class WalkinrequestComponent {

}


/* ===== File: src\app\dashboard\patientdashboard\appointment\appointment.component.html ===== */
<section class="content-header">
  <div class="container-fluid">
    <div class="row mb-2">
      <div class="col-sm-6"></div>
      <div class="col-sm-6">
        <ol class="breadcrumb float-sm-right"></ol>
      </div>
    </div>
  </div>
</section>

<!-- Appointment Card -->
<div class="col-md-8">
  <div class="card card-default">
    <div class="card-header">
      <h3 class="card-title">Set an Appointment</h3>
    </div>
    <div class="card-body">
      <div class="callout callout-danger">
        <h5>
          Please be advised that this is not yet a confirmed appointment.
          Our Clinic will email or call you to send your schedule.
        </h5>
      </div>
      <p>
        Please do not come to your appointment if you have signs or symptoms of COVID-19. Wearing a face mask is a must to ensure the safety of Doctors and Patients. We will confirm your appointment via email or call 2 to 3 days before your appointment date.
        This questionnaire is designed with your safety in mind and must be answered honestly. Your answers will be reviewed prior to your appointment, and a member of our team will contact you if we recommend rescheduling to a later date. An answer of YES does not exclude you from treatment. Please answer YES or NO to each of the following questions. Thank you for your consideration and understanding.
      </p>
      <div class="row">

        <form [formGroup]="appointmentForm" (ngSubmit)="onSubmit()">
          <div class="col-md-8">
            <div class="card card-default">
              <div class="card-header">
                <h3 class="card-title">Set an Appointment</h3>
              </div>
              <div class="card-body">
                <div class="callout callout-danger">
                  <h5>Please be advised that this is not yet a confirmed appointment.</h5>
                </div>
        
                <!-- Preferred Dentist (Single Select with Search) -->
                <div class="form-group">
                  <label for="dentist-select">Preferred Dentist</label>
                  <ng-select [items]="dentists$ | async"
                             bindLabel="fullname"
                             bindValue="user_id"
                             formControlName="dentist_id"
                             placeholder="Select a Dentist"
                             [searchable]="true">
                  </ng-select>
                  <div *ngIf="appointmentForm.get('dentist_id')?.invalid && appointmentForm.get('dentist_id')?.touched" class="text-danger">
                    Dentist selection is required.
                  </div>
                </div>
        
                <!-- Appointment Date -->
                <div class="form-group">
                  <label for="appointment-date">Date:</label>
                  <input type="date" id="appointment-date" class="form-control" formControlName="date" />
                  <div *ngIf="appointmentForm.get('date')?.invalid && appointmentForm.get('date')?.touched" class="text-danger">
                    Date is required.
                  </div>
                </div>
        
                <!-- Appointment Time -->
                <div class="form-group">
                  <label for="appointment-time">Time:</label>
                  <input type="time" id="appointment-time" class="form-control" formControlName="time" />
                  <div *ngIf="appointmentForm.get('time')?.invalid && appointmentForm.get('time')?.touched" class="text-danger">
                    Time is required.
                  </div>
                </div>
        
                <!-- Services Selection (Multi-Select with Search) -->
                <div class="form-group">
                  <label for="services-select">Services:</label>
                  <ng-select [items]="services"
                             bindLabel="name"
                             bindValue="id"
                             formControlName="services"
                             [multiple]="true"
                             placeholder="Select services">
                  </ng-select>
                  <div *ngIf="appointmentForm.get('services')?.invalid && appointmentForm.get('services')?.touched" class="text-danger">
                    At least one service must be selected.
                  </div>
                </div>
        
                <!-- Submit Button -->
                <button type="submit" class="btn btn-primary" [disabled]="appointmentForm.invalid">Submit</button>
              </div>
            </div>
          </div>
        </form>
        
        
        
        
      </div>
    </div>
  </div>
</div>

<!-- Health Declaration Card -->
<div class="col-md-8">
  <div class="card card-default">
    <div class="card-header">
      <h3 class="card-title">Health Declaration</h3>
    </div>
    <div class="card-body">
      <!-- Health Declaration Questions -->
      <div class="questionnaire">
        <!-- Question 1 -->
        <div class="question">
          <div class="question-title">
            <b>Do you have a fever or temperature over 38 °C?</b>
          </div>
          <div class="form-group">
            <div class="form-check">
              <input class="form-check-input" type="radio" id="fever-yes" name="fever" value="yes" />
              <label class="form-check-label" for="fever-yes">Yes</label>
            </div>
            <div class="form-check">
              <input class="form-check-input" type="radio" id="fever-no" name="fever" value="no"  />
              <label class="form-check-label" for="fever-no">No</label>
            </div>
          </div>
        </div>

        <!-- Question 2 -->
        <div class="question">
          <div class="question-title">
            <b>Have you experienced shortness of breath or had trouble breathing?</b>
          </div>
          <div class="form-group">
            <div class="form-check">
              <input class="form-check-input" type="radio" id="breath-yes" name="breathing" value="yes" />
              <label class="form-check-label" for="breath-yes">Yes</label>
            </div>
            <div class="form-check">
              <input class="form-check-input" type="radio" id="breath-no" name="breathing" value="no"  />
              <label class="form-check-label" for="breath-no">No</label>
            </div>
          </div>
        </div>

        <!-- Question 3 -->
        <div class="question">
          <div class="question-title">
            <b>Do you have a dry cough?</b>
          </div>
          <div class="form-group">
            <div class="form-check">
              <input class="form-check-input" type="radio" id="cough-yes" name="cough" value="yes" />
              <label class="form-check-label" for="cough-yes">Yes</label>
            </div>
            <div class="form-check">
              <input class="form-check-input" type="radio" id="cough-no" name="cough" value="no"  />
              <label class="form-check-label" for="cough-no">No</label>
            </div>
          </div>
        </div>

        <!-- Question 4 -->
        <div class="question">
          <div class="question-title">
            <b>Do you have a runny nose?</b>
          </div>
          <div class="form-group">
            <div class="form-check">
              <input class="form-check-input" type="radio" id="nose-yes" name="nose" value="yes" />
              <label class="form-check-label" for="nose-yes">Yes</label>
            </div>
            <div class="form-check">
              <input class="form-check-input" type="radio" id="nose-no" name="nose" value="no"  />
              <label class="form-check-label" for="nose-no">No</label>
            </div>
          </div>
        </div>

                <!-- Question 5 -->
                <div class="question">
                  <div class="question-title">
                    <b>Have you recently lost or had a reduction in your sense of smell?</b>
                  </div>
                  <div class="form-group">
                    <div class="form-check">
                      <input class="form-check-input" type="radio" id="smell-yes" name="smell" value="yes" />
                      <label class="form-check-label" for="smell-yes">Yes</label>
                    </div>
                    <div class="form-check">
                      <input class="form-check-input" type="radio" id="smell-no" name="smell" value="no"  />
                      <label class="form-check-label" for="smell-no">No</label>
                    </div>
                  </div>
                </div>
        
                <!-- Question 6 -->
                <div class="question">
                  <div class="question-title">
                    <b>Do you have a sore throat?</b>
                  </div>
                  <div class="form-group">
                    <div class="form-check">
                      <input class="form-check-input" type="radio" id="throat-yes" name="throat" value="yes" />
                      <label class="form-check-label" for="throat-yes">Yes</label>
                    </div>
                    <div class="form-check">
                      <input class="form-check-input" type="radio" id="throat-no" name="throat" value="no"  />
                      <label class="form-check-label" for="throat-no">No</label>
                    </div>
                  </div>
                </div>
        
                <!-- Question 7 -->
                <div class="question">
                  <div class="question-title">
                    <b>Do you have diarrhea?</b>
                  </div>
                  <div class="form-group">
                    <div class="form-check">
                      <input class="form-check-input" type="radio" id="diarrhea-yes" name="diarrhea" value="yes" />
                      <label class="form-check-label" for="diarrhea-yes">Yes</label>
                    </div>
                    <div class="form-check">
                      <input class="form-check-input" type="radio" id="diarrhea-no" name="diarrhea" value="no"  />
                      <label class="form-check-label" for="diarrhea-no">No</label>
                    </div>
                  </div>
                </div>
        
                <!-- Question 8 -->
                <div class="question">
                  <div class="question-title">
                    <b>Do you have influenza-like symptoms? (headache, aches and pains, a rash on skin)</b>
                  </div>
                  <div class="form-group">
                    <div class="form-check">
                      <input class="form-check-input" type="radio" id="influenza-yes" name="influenza" value="yes" />
                      <label class="form-check-label" for="influenza-yes">Yes</label>
                    </div>
                    <div class="form-check">
                      <input class="form-check-input" type="radio" id="influenza-no" name="influenza" value="no"  />
                      <label class="form-check-label" for="influenza-no">No</label>
                    </div>
                  </div>
                </div>
        
                <!-- Question 9 -->
                <div class="question">
                  <div class="question-title">
                    <b>Do you have a history of COVID-19 infection?</b>
                  </div>
                  <div class="form-group">
                    <div class="form-check">
                      <input class="form-check-input" type="radio" id="history-covid-yes" name="history-covid" value="yes" />
                      <label class="form-check-label" for="history-covid-yes">Yes</label>
                    </div>
                    <div class="form-check">
                      <input class="form-check-input" type="radio" id="history-covid-no" name="history-covid" value="no"  />
                      <label class="form-check-label" for="history-covid-no">No</label>
                    </div>
                  </div>
                </div>
        
                <!-- Question 10 -->
                <div class="question">
                  <div class="question-title">
                    <b>Do you have a member of your family who tested positive for COVID-19?</b>
                  </div>
                  <div class="form-group">
                    <div class="form-check">
                      <input class="form-check-input" type="radio" id="family-positive-yes" name="family-positive" value="yes" />
                      <label class="form-check-label" for="family-positive-yes">Yes</label>
                    </div>
                    <div class="form-check">
                      <input class="form-check-input" type="radio" id="family-positive-no" name="family-positive" value="no"  />
                      <label class="form-check-label" for="family-positive-no">No</label>
                    </div>
                  </div>
                </div>
        
                <!-- Question 11 -->
                <div class="question">
                  <div class="question-title">
                    <b>Have you been in contact with someone who has tested positive for COVID-19?</b>
                  </div>
                  <div class="form-group">
                    <div class="form-check">
                      <input class="form-check-input" type="radio" id="contact-positive-yes" name="contact-positive" value="yes" />
                      <label class="form-check-label" for="contact-positive-yes">Yes</label>
                    </div>
                    <div class="form-check">
                      <input class="form-check-input" type="radio" id="contact-positive-no" name="contact-positive" value="no"  />
                      <label class="form-check-label" for="contact-positive-no">No</label>
                    </div>
                  </div>
                </div>
        
                <!-- Question 12 -->
                <div class="question">
                  <div class="question-title">
                    <b>Have you traveled or lived in an area with a report of local transmission of COVID-19?</b>
                  </div>
                  <div class="form-group">
                    <div class="form-check">
                      <input class="form-check-input" type="radio" id="local-transmission-yes" name="local-transmission" value="yes" />
                      <label class="form-check-label" for="local-transmission-yes">Yes</label>
                    </div>
                    <div class="form-check">
                      <input class="form-check-input" type="radio" id="local-transmission-no" name="local-transmission" value="no"  />
                      <label class="form-check-label" for="local-transmission-no">No</label>
                    </div>
                  </div>
                </div>
        
                <!-- Question 13 -->
                <div class="question">
                  <div class="question-title">
                    <b>Have you traveled within the Philippines by air, bus, or train within the past 14 days?</b>
                  </div>
                  <div class="form-group">
                    <div class="form-check">
                      <input class="form-check-input" type="radio" id="travel-ph-yes" name="travel-ph" value="yes" />
                      <label class="form-check-label" for="travel-ph-yes">Yes</label>
                    </div>
                    <div class="form-check">
                      <input class="form-check-input" type="radio" id="travel-ph-no" name="travel-ph" value="no"  />
                      <label class="form-check-label" for="travel-ph-no">No</label>
                    </div>
                  </div>
                </div>
        
                <!-- Question 14 -->
                <div class="question">
                  <div class="question-title">
                    <b>Have you traveled outside the Philippines by air or cruise ship in the past 14 days?</b>
                  </div>
                  <div class="form-group">
                    <div class="form-check">
                      <input class="form-check-input" type="radio" id="travel-outside-ph-yes" name="travel-outside-ph" value="yes" />
                      <label class="form-check-label" for="travel-outside-ph-yes">Yes</label>
                    </div>
                    <div class="form-check">
                      <input class="form-check-input" type="radio" id="travel-outside-ph-no" name="travel-outside-ph" value="no"  />
                      <label class="form-check-label" for="travel-outside-ph-no">No</label>
                    </div>
                  </div>
                </div>

              </div>
              <!-- Submit Button -->
              <div class="col-md-8">
                <button type="submit" class="btn btn-primary">Submit</button>
            
              </div>
      </div>
    </div>

</div>

  

        

/* ===== File: src\app\dashboard\patientdashboard\appointment\appointment.component.scss ===== */
h3.card-title {
    font-size: 2rem !important;
    font-weight: 500 !important;
    color: dodgerblue !important;
}

h3.card-title2 {
    font-size: 1.8rem !important;
    font-weight: 500 !important;
    color: rgb(0, 0, 0) !important;
}

.question-title{
    margin-bottom: 10px;
}

/* ===== File: src\app\dashboard\patientdashboard\appointment\appointment.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AppointmentComponent } from './appointment.component';

describe('AppointmentComponent', () => {
  let component: AppointmentComponent;
  let fixture: ComponentFixture<AppointmentComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [AppointmentComponent]
    });
    fixture = TestBed.createComponent(AppointmentComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\dashboard\patientdashboard\appointment\appointment.component.ts ===== */
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NgSelectModule } from '@ng-select/ng-select';
import { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';
import { Store, select } from '@ngrx/store';
import { selectDentists } from 'src/app/ngrx/dentist/dentist.reducers';
import { DentistActions } from 'src/app/ngrx/dentist/dentist.actions';
import { Dentist } from 'src/app/interfaces/dentist.interface';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-appointment',
  standalone: true,
  imports: [CommonModule, NgSelectModule, ReactiveFormsModule, FormsModule], // ✅ Added FormsModule
  templateUrl: './appointment.component.html',
  styleUrls: ['./appointment.component.scss'],
})
export class AppointmentComponent implements OnInit {
  appointmentForm!: FormGroup;
  dentists$!: Observable<Dentist[]>;

  services = [
    { id: 1, name: 'Exodontia' },
    { id: 2, name: 'Prosthodontics Treatment' },
    { id: 3, name: 'Oral Prophylaxis' },
    { id: 4, name: 'Orthodontic Treatment' },
    { id: 5, name: 'Oral Surgery' },
    { id: 6, name: 'Cosmetic Dentistry' },
    { id: 7, name: 'Restorative Treatment' }
  ];

  constructor(private fb: FormBuilder, private store: Store) {}

  ngOnInit(): void {
    this.dentists$ = this.store.pipe(select(selectDentists));
    this.store.dispatch(DentistActions.loadDentists());

    // ✅ Initialize Parent Form that holds both Appointment and Health Declaration Forms
    this.appointmentForm = this.fb.group({
      appointmentForm: this.fb.group({
        dentist_id: ['', Validators.required],
        date: ['', Validators.required],
        time: ['', Validators.required],
        services: [[], Validators.required], // ✅ Multi-select
        fever: ['', Validators.required],
        breathing: ['', Validators.required],
        cough: ['', Validators.required],
        nose: ['', Validators.required],
        smell: ['', Validators.required],
        throat: ['', Validators.required],
        diarrhea: ['', Validators.required],
        influenza: ['', Validators.required],
        history_covid: ['', Validators.required],
        family_positive: ['', Validators.required],
        contact_positive: ['', Validators.required],
        local_transmission: ['', Validators.required],
        travel_ph: ['', Validators.required],
        travel_outside_ph: ['', Validators.required]
      })
    });
  }

  onSubmit(): void {
    if (this.appointmentForm.valid) {
      console.log('Submitting Appointment and Health Declaration:', this.appointmentForm.value);
    } else {
      console.log('Form is invalid');
    }
  }
}


/* ===== File: src\app\dashboard\patientdashboard\appointment\polyfills.ts ===== */
import 'zone.js';  // Included with Angular CLI.
import * as $ from 'jquery';

(window as any).$ = $;
(window as any).jQuery = $;

/* ===== File: src\app\dashboard\patientdashboard\defaultview\defaultview.component.html ===== */
<section class="content-header">
  <div class="container-fluid">
    <div class="row mb-2">
      <div class="col-sm-6">
        <h1>Patient Dashboard</h1>
      </div>
      <div class="col-sm-6">
        <ol class="breadcrumb float-sm-right">
          <li class="breadcrumb-item"><a href="#">Home</a></li>
          <li class="breadcrumb-item active">Patient Dashboard</li>
        </ol>
      </div>
    </div>
  </div>
</section>
<section class="alerts">
  <div>
    <div class="container-fluid">
      <div class="alert alert-success alert-dismissible">
        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
        <i class="icon fas fa-check"></i>
        Appointment Submitted Successfully
      </div>
    </div>
  </div>
</section>
<section class="content">
  <div class="container-fluid">
    <div class="row">
      <div class="col-md-3">
        <div class="card card-primary card-outline" *ngIf="patient$ | async as patient; else noPatient">
          <div class="card-body box-profile">
            <ul class="list-group list-group-unbordered mb-3">
              <li class="list-group-item">
                <b class="patientinfo">Patient Info</b>
              </li>
            </ul>
        
            <div class="text-center">
              <img class="profile-user-img img-fluid img-circle"
                   [src]="patient.photo || 'assets/img/default-user.jpg'"
                   alt="User profile picture">
            </div>
        
            <h3 class="profile-username text-center">{{ patient.fullname }}</h3>
            <p class="text-muted text-center">{{ patient.email }}</p>
        
            <ul class="list-group list-group-unbordered mb-3">
              <li class="list-group-item">
                <b>Birthdate</b> <a class="float-right">{{ patient.birthday }}</a>
              </li>
              <li class="list-group-item">
                <b>Phone</b> <a class="float-right">{{ patient.contact_number }}</a>
              </li>
              <li class="list-group-item">
                <b>Address</b> <a class="float-right">{{ patient.address }}</a>
              </li>
            </ul>
          </div>
        </div>
        
        <!-- No Patient Selected -->
        <ng-template #noPatient>
          <p class="text-danger text-center">No patient selected.</p>
        </ng-template>
        
        
      </div>
      <div class="col-md-9">
        <div class="card">
          <div class="card-header p-2">
            <ul class="nav nav-pills">
              <li class="nav-item"><a class="nav-link active" href="#requestappointment" data-toggle="tab">Request Appointment</a></li>
              <li class="nav-item"><a class="nav-link" href="#appointment" data-toggle="tab">Appointment</a></li>
              <li class="nav-item"><a class="nav-link" href="#prescription" data-toggle="tab">Prescription</a></li>
              <li class="nav-item"><a class="nav-link" href="#treatment" data-toggle="tab">Treatment</a></li>
            </ul>
          </div>
          <div class="card-body">
            <div class="tab-content">
              <div class="tab-pane fade show active" id="requestappointment">

                <button type="button" class="btn btn-outline-success" (click)="openAddAppointmentModal()">
                  <i class="fa fa-plus-circle"></i> Request an Appointment
                </button>

                <div class="post" *ngIf="latestAppointment$ | async as appointment; else noAppointment">
                  <div class="col-md-4 text-left">

                  </div>
                  <h2>Your Appointment Details</h2>
                  <div class="row">
                    <div class="col-md-6">
                      <b>Date:</b>
                    </div>
                    <div class="col-md-6">
                      <span>{{appointment.schedule_date | date: 'MMMM d, y' }}</span>
                    </div>
                  </div>
                  <div class="row">
                    <div class="col-md-6">
                      <b>Time:</b>
                    </div>
                    <div class="col-md-6">
                      <span>{{ appointment.timeslot_start_time }} - {{ appointment.timeslot_end_time}}</span>
                    </div>
                  </div>
                  <div class="row">
                    <div class="col-md-6">
                      <b>Dentist:</b>
                    </div>
                    <div class="col-md-6">
                      <span>{{ appointment.dentist_name }}</span>
                    </div>
                  </div>
                  <div class="row">
                    <div class="col-md-6">
                      <b>Status:</b>
                    </div>
                    <div class="col-md-6">
                      <span [ngClass]="{
                          'badge-danger': appointment.status === 'canceled',
                          'badge-warning': appointment.status === 'pending',
                          'badge-success': appointment.status === 'confirmed'
                        }" 
                        class="badge">
                        {{ appointment.status | titlecase }}
                      </span>
                    </div>
                  </div>
                  
                  <div class="row">
                    <div class="col-md-6">
                    </div>
                    <div class="col-md-5">
                      <button
                      *ngIf="appointment.status !== 'canceled'"
                      type="button"
                      class="btn btn-danger btn-block"
                      (click)="openCancelModal(appointment.appointment_id)"
                    >
                      <i class="fa fa-times-circle"></i> Cancel Appointment
                    </button>
                    </div>
                  </div>
                </div>

              <!-- No Patient Selected -->
              <ng-template #noAppointment>
                <p class="text-danger text-center">No appointment selected.</p>
              </ng-template>
              </div>
              <div class="tab-pane fade" id="appointment">
                <table id="example2" class="table table-bordered table-hover">
                  <thead>
                    <tr>
                      <th>Date</th>
                      <th>Time</th>
                      <th>Doctor</th>
                      <th>Status</th>
                      <th>Services</th> <!-- ✅ New Column -->
                    </tr>
                  </thead>
                  <tbody>
                    <tr *ngFor="let appointment of detailedAppointments$ | async">
                      <td>{{ appointment.schedule_date | date:'yyyy-MM-dd' }}</td>
                      <td>{{ appointment.timeslot_start_time }} - {{ appointment.timeslot_end_time }}</td>
                      <td>{{ appointment.dentist_name }}</td>
                      <td>
                        <span class="badge"
                          [ngClass]="{
                            'badge-success': appointment.status === 'confirmed',
                            'badge-warning': appointment.status === 'pending',
                            'badge-danger': appointment.status === 'canceled'
                          }">
                          {{ appointment.status }}
                        </span>
                      </td>
                      <td>
                        {{ getServiceNames(appointment) }}
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <div class="tab-pane fade" id="prescription">
                <table id="example3" class="table table-bordered table-hover">
                  <thead>
                    <tr>
                      <th>Doctor Name</th>
                      <th>Date</th>
                      <th>Medicine</th>
                      <th>Notes</th>
                    </tr>
                  </thead>
                  <tbody>
                    <!-- Data will be populated by DataTables -->
                  </tbody>
                </table>
              </div>
              <div class="tab-pane fade" id="treatment">
                <table id="example4" class="table table-bordered table-hover">
                  <thead>
                    <tr>
                      <th>Date Visit</th>
                      <th>Teeth No./s</th>
                      <th>Treatment</th>
                      <th>Description</th>
                      <th>Fees</th>
                      <th>Remarks</th>
                    </tr>
                  </thead>
                  <tbody>
                    <!-- Data will be populated by DataTables -->
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>


<app-add-appointment-modal
  [isVisible]="isAddAppointmentModalVisible"
  [title]="'Add Appointment'"
  (closeModal)="closeAddAppointmentModal()"
  (submitModal)="handleAddAppointment()"
></app-add-appointment-modal>

<app-confirm-modal
  [isVisible]="isCancelModalVisible"
  [title]="'Cancel Appointment?'"
  [message]="'Are you sure you want to cancel appointment?'"
  [confirmText]="'Confirm'"
  [cancelText]="'No'"
  (closeModal)="isCancelModalVisible = false"
  (confirmAction)="confirmCancelAppointment()"
></app-confirm-modal>

/* ===== File: src\app\dashboard\patientdashboard\defaultview\defaultview.component.scss ===== */
.list-group-item{
    border: unset !important;
    border-bottom: 1px solid rgba(0, 0, 0, .125) !important;
}

.float-right{
    color: #6c757d!important

}

.patientinfo{
    font-size: 1.4rem !important;
}

h2{
    font-size: 1.2rem !important;
    font-weight: 300 !important;
    margin-top: 1rem !important;
    margin-bottom: 2rem !important;
}

b{
    color: #000 !important;
}

.row{
    margin: 1rem 0 !important;
}

.alert.alert-success.alert-dismissible {
    margin: 0 0.5rem !important;
}

/* ===== File: src\app\dashboard\patientdashboard\defaultview\defaultview.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { DefaultviewComponent } from './defaultview.component';

describe('DefaultviewComponent', () => {
  let component: DefaultviewComponent;
  let fixture: ComponentFixture<DefaultviewComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [DefaultviewComponent]
    });
    fixture = TestBed.createComponent(DefaultviewComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\dashboard\patientdashboard\defaultview\defaultview.component.ts ===== */
import { Component, AfterViewInit, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router } from '@angular/router';
import 'datatables.net';
import 'datatables.net-bs4';
import { map, Observable } from 'rxjs';
import { Patient } from 'src/app/interfaces/patient_details.interface';
import { select, Store } from '@ngrx/store';
import { selectError, selectPatients, selectSelectedPatient } from 'src/app/ngrx/patients/patients.reducers';
import { decodeAccessToken } from 'src/app/services/auth/auth.utils';
import { PatientsActions } from 'src/app/ngrx/patients/patients.actions';
import { AddAppointmentModalComponent } from 'src/app/my-components/modals/add-appointment-modal/add-appointment-modal.component';
import { Appointment, DetailedAppointment } from 'src/app/interfaces/addappointment.interface';
import { selectAppointments, selectDetailedAppointments, selectSelectedAppointment, selectSelectedAppointmentPatient } from 'src/app/ngrx/appointment/addappointment.reducers';
import { AppointmentActions } from 'src/app/ngrx/appointment/addappointment.actions';
import { Dentist } from 'src/app/interfaces/dentist.interface';
import { Schedule, TimeSlot } from 'src/app/interfaces/schedule.interface';
import { selectSchedules, selectSelectedSchedule, selectSelectedTimeSlot, selectTimeSlots, selectTimeSlotsById } from 'src/app/ngrx/schedules/schedules.reducers';
import { selectDentists, selectSelectedDentist } from 'src/app/ngrx/dentist/dentist.reducers';
import { ConfirmModalComponent } from 'src/app/my-components/modals/confirm-modal/confirm-modal.component';
declare var $: any;

@Component({
  selector: 'app-defaultview',
  standalone: true,
  imports: [CommonModule, AddAppointmentModalComponent, ConfirmModalComponent],
  templateUrl: './defaultview.component.html',
  styleUrls: ['./defaultview.component.scss']
})
export class DefaultviewComponent implements AfterViewInit, OnInit {
  isAddAppointmentModalVisible: boolean = false;
  selectedAppointmentId: number | null = null;
  isCancelModalVisible = false;
  patient$!: Observable<Patient | null>;
  error$!: Observable<string | null>;
  patients$!: Observable<Patient[] | null>;
  appointments$!: Observable<Appointment | null>;
  schedule$: Observable<Schedule | null> = this.store.pipe(select(selectSelectedSchedule));
  dentist$: Observable<Dentist | null> = this.store.pipe(select(selectSelectedDentist));
  appointment$ = this.store.pipe(select(selectSelectedAppointment));
  timeslot$ = this.store.pipe(select(selectSelectedTimeSlot));
  appointmentsAll$: Observable<Appointment[] | null> = this.store.pipe(select(selectAppointments));
  detailedAppointments$: Observable<DetailedAppointment[] | null> = this.store.pipe(select(selectDetailedAppointments));

  constructor(private store: Store, private router: Router) {
    this.patient$ = this.store.pipe(select(selectSelectedPatient));
    this.patients$ = this.store.pipe(select(selectPatients));
    this.error$ = this.store.pipe(select(selectError));
    this.appointments$ = this.store.pipe(select(selectSelectedAppointmentPatient));

    
  }

    date$: Observable<string> = this.schedule$.pipe(
      map(schedule => schedule?.date || 'N/A')
    );
  
    dentistName$: Observable<string> = this.dentist$.pipe(
      map(dentist => dentist?.fullname || 'N/A')
    );


    timeslotStartTime$: Observable<string> = this.timeslot$.pipe(
      map(timeslot => timeslot?.start_time || 'N/A')
    );
    
    timeslotEndTime$: Observable<string> = this.timeslot$.pipe(
      map(timeslot => timeslot?.end_time || 'N/A')
    );

    latestAppointment$: Observable<DetailedAppointment | null> = this.detailedAppointments$.pipe(
      map(appointments =>
        appointments && appointments.length > 0
          ? [...appointments].sort((a, b) => b.appointment_id - a.appointment_id)[0] // Sort by appointmentId in descending order
          : null
      )
    );
    
    
    
    




  ngAfterViewInit(): void {
    // $('#example2').DataTable({
    //   responsive: true,
    //   autoWidth: false,
    //   paging: true,
    //   data: this.tableData,
    //   columns: [
    //     { data: 'date' },
    //     { data: 'time' },
    //     { data: 'doctor' },
    //     { data: 'status', render: (data: string) => {
    //       let badgeClass = 'badge-secondary';
    //       if (data === 'Confirmed') badgeClass = 'badge-success';
    //       else if (data === 'Pending') badgeClass = 'badge-warning';
    //       else if (data === 'Cancelled') badgeClass = 'badge-danger';
    //       return `<span class="badge ${badgeClass}">${data}</span>`;
    //     }}
    //   ],
    //   createdRow: (row: Node, data: any[] | Object, dataIndex: number) => {
    //     const statusCell = $('td', row).eq(3);
    //     const status = statusCell.text();
    //     let badgeClass = 'badge-secondary';
    //     if (status === 'Confirmed') badgeClass = 'badge-success';
    //     else if (status === 'Pending') badgeClass = 'badge-warning';
    //     else if (status === 'Cancelled') badgeClass = 'badge-danger';
    //     statusCell.html(`<span class="badge ${badgeClass}">${status}</span>`);
    //   }
    // });

    // $('#example3').DataTable({
    //   responsive: true,
    //   autoWidth: false,
    //   paging: true,
    //   data: this.prescriptionData,
    //   columns: [
    //     { data: 'doctorName' },
    //     { data: 'date' },
    //     { data: 'medicine' },
    //     { data: 'notes' }
    //   ]
    // });

    // $('#example4').DataTable({
    //   responsive: true,
    //   autoWidth: false,
    //   paging: true,
    //   data: this.treatmentData,
    //   columns: [
    //     { data: 'dateVisit' },
    //     { data: 'teethNos' },
    //     { data: 'treatment' },
    //     { data: 'description' },
    //     { data: 'fees' },
    //     { data: 'remarks' }
    //   ]
    // });
  }

  ngOnInit(): void {

    
    const userData = decodeAccessToken();
    if (userData?.id) {
      this.store.dispatch(PatientsActions.loadPatient({ id: userData.id })); // ✅ Fetch patient using ID from JWT
      this.store.dispatch(AppointmentActions.loadAllAppointmentsByPatientId({patient_id: userData.id}))
      this.store.dispatch(AppointmentActions.loadAppointmentByPatientId({id: userData.id }));
    } else {
      console.warn('No user ID found in token!');
    }


  }

  navigateToAppointment(): void {
    this.router.navigate(['/patientdashboard/appointment']);
  }

  cancelAppointment(): void {
    // this.appointmentData.status = 'cancelled';
  }

  openAddAppointmentModal(): void {
    this.isAddAppointmentModalVisible = true;
  }

  closeAddAppointmentModal(): void {
    this.isAddAppointmentModalVisible = false;
  }

  handleAddAppointment(){

  }



  openConfirmModal(): void {
    this.isCancelModalVisible = true;
  }

  /** ✅ Open the confirmation modal and store `appointmentId` */
  openCancelModal(appointmentId: number | null): void {
    if (appointmentId !== null) {
      this.selectedAppointmentId = appointmentId;
      this.isCancelModalVisible = true;
    }
  }

  /** ✅ Confirm cancellation and dispatch action */
  confirmCancelAppointment(): void {
    if (this.selectedAppointmentId !== null) {
      this.store.dispatch(AppointmentActions.cancelAppointment({ id: this.selectedAppointmentId }));
      this.isCancelModalVisible = false; // ✅ Close modal after action
      this.selectedAppointmentId = null; // ✅ Reset selection
    }
  }

  getServiceNames(appointment: DetailedAppointment): string {
    return appointment.services.map(service => service.service_name).join(', ');
  }
}


/* ===== File: src\app\dashboard\patientdashboard\health_declaration\health_declaration.component.html ===== */
<section class="content-header">
  <div class="container-fluid">
    <div class="row mb-2">
      <div class="col-sm-6"></div>
      <div class="col-sm-6">
        <ol class="breadcrumb float-sm-right"></ol>
      </div>
    </div>
  </div>
</section>

<!-- Health Declaration Form -->
<div class="col-md-12">
  <div class="card card-default">
    <div class="card-header">
      <h3 class="card-title">Health Declaration</h3>
    </div>
    <div class="card-body">
      <form [formGroup]="healthDeclarationForm" (ngSubmit)="onSubmit()">
        <!-- Question 1 -->
        <div class="form-group">
          <label>Do you have a fever or temperature over 38 °C?</label>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              id="fever-yes"
              formControlName="fever"
              value="yes"
            />
            <label class="form-check-label" for="fever-yes">Yes</label>
          </div>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              id="fever-no"
              formControlName="fever"
              value="no"
            />
            <label class="form-check-label" for="fever-no">No</label>
          </div>
          <div *ngIf="healthDeclarationForm.get('fever')?.invalid && healthDeclarationForm.get('fever')?.touched" class="text-danger">
            Please answer this question.
          </div>
        </div>

        <!-- Repeat for other questions -->
        <div class="form-group">
          <label>Have you experienced shortness of breath or had trouble breathing?</label>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              id="breathing-yes"
              formControlName="breathing"
              value="yes"
            />
            <label class="form-check-label" for="breathing-yes">Yes</label>
          </div>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              id="breathing-no"
              formControlName="breathing"
              value="no"
            />
            <label class="form-check-label" for="breathing-no">No</label>
          </div>
          <div *ngIf="healthDeclarationForm.get('breathing')?.invalid && healthDeclarationForm.get('breathing')?.touched" class="text-danger">
            Please answer this question.
          </div>
        </div>

        <!-- Add remaining questions similarly -->
        <!-- Question: Cough -->
        <div class="form-group">
          <label>Do you have a dry cough?</label>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              id="cough-yes"
              formControlName="cough"
              value="yes"
            />
            <label class="form-check-label" for="cough-yes">Yes</label>
          </div>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              id="cough-no"
              formControlName="cough"
              value="no"
            />
            <label class="form-check-label" for="cough-no">No</label>
          </div>
          <div *ngIf="healthDeclarationForm.get('cough')?.invalid && healthDeclarationForm.get('cough')?.touched" class="text-danger">
            Please answer this question.
          </div>
        </div>

                <!-- Question: Runny Nose -->
        <div class="form-group">
          <label>Do you have a runny nose?</label>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              id="nose-yes"
              formControlName="nose"
              value="yes"
            />
            <label class="form-check-label" for="nose-yes">Yes</label>
          </div>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              id="nose-no"
              formControlName="nose"
              value="no"
            />
            <label class="form-check-label" for="nose-no">No</label>
          </div>
          <div *ngIf="healthDeclarationForm.get('nose')?.invalid && healthDeclarationForm.get('nose')?.touched" class="text-danger">
            Please answer this question.
          </div>
        </div>

        <!-- Question: Sense of Smell -->
        <div class="form-group">
          <label>Have you recently lost or had a reduction in your sense of smell?</label>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              id="smell-yes"
              formControlName="smell"
              value="yes"
            />
            <label class="form-check-label" for="smell-yes">Yes</label>
          </div>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              id="smell-no"
              formControlName="smell"
              value="no"
            />
            <label class="form-check-label" for="smell-no">No</label>
          </div>
          <div *ngIf="healthDeclarationForm.get('smell')?.invalid && healthDeclarationForm.get('smell')?.touched" class="text-danger">
            Please answer this question.
          </div>
        </div>

        <!-- Question: Sore Throat -->
        <div class="form-group">
          <label>Do you have a sore throat?</label>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              id="throat-yes"
              formControlName="throat"
              value="yes"
            />
            <label class="form-check-label" for="throat-yes">Yes</label>
          </div>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              id="throat-no"
              formControlName="throat"
              value="no"
            />
            <label class="form-check-label" for="throat-no">No</label>
          </div>
          <div *ngIf="healthDeclarationForm.get('throat')?.invalid && healthDeclarationForm.get('throat')?.touched" class="text-danger">
            Please answer this question.
          </div>
        </div>


        <!-- Question: Diarrhea -->
        <div class="form-group">
          <label>Do you have diarrhea?</label>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              id="diarrhea-yes"
              formControlName="diarrhea"
              value="yes"
            />
            <label class="form-check-label" for="diarrhea-yes">Yes</label>
          </div>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              id="diarrhea-no"
              formControlName="diarrhea"
              value="no"
            />
            <label class="form-check-label" for="diarrhea-no">No</label>
          </div>
          <div *ngIf="healthDeclarationForm.get('diarrhea')?.invalid && healthDeclarationForm.get('diarrhea')?.touched" class="text-danger">
            Please answer this question.
          </div>
        </div>

        <!-- Question: Influenza-like Symptoms -->
        <div class="form-group">
          <label>Do you have influenza-like symptoms? (headache, aches and pains, rash on skin)</label>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              id="influenza-yes"
              formControlName="influenza"
              value="yes"
            />
            <label class="form-check-label" for="influenza-yes">Yes</label>
          </div>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              id="influenza-no"
              formControlName="influenza"
              value="no"
            />
            <label class="form-check-label" for="influenza-no">No</label>
          </div>
          <div *ngIf="healthDeclarationForm.get('influenza')?.invalid && healthDeclarationForm.get('influenza')?.touched" class="text-danger">
            Please answer this question.
          </div>
        </div>

        <!-- Question: History of COVID-19 -->
        <div class="form-group">
          <label>Do you have a history of COVID-19 infection?</label>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              id="history-covid-yes"
              formControlName="historyCovid"
              value="yes"
            />
            <label class="form-check-label" for="history-covid-yes">Yes</label>
          </div>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              id="history-covid-no"
              formControlName="historyCovid"
              value="no"
            />
            <label class="form-check-label" for="history-covid-no">No</label>
          </div>
          <div *ngIf="healthDeclarationForm.get('historyCovid')?.invalid && healthDeclarationForm.get('historyCovid')?.touched" class="text-danger">
            Please answer this question.
          </div>
        </div>

        <!-- Question: Family Member Tested Positive -->
        <div class="form-group">
          <label>Do you have a member of your family who tested positive for COVID-19?</label>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              id="family-positive-yes"
              formControlName="familyPositive"
              value="yes"
            />
            <label class="form-check-label" for="family-positive-yes">Yes</label>
          </div>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              id="family-positive-no"
              formControlName="familyPositive"
              value="no"
            />
            <label class="form-check-label" for="family-positive-no">No</label>
          </div>
          <div *ngIf="healthDeclarationForm.get('familyPositive')?.invalid && healthDeclarationForm.get('familyPositive')?.touched" class="text-danger">
            Please answer this question.
          </div>
        </div>

        <!-- Question: Contact with Positive Case -->
        <div class="form-group">
          <label>Have you been in contact with someone who has tested positive for COVID-19?</label>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              id="contact-positive-yes"
              formControlName="contactPositive"
              value="yes"
            />
            <label class="form-check-label" for="contact-positive-yes">Yes</label>
          </div>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              id="contact-positive-no"
              formControlName="contactPositive"
              value="no"
            />
            <label class="form-check-label" for="contact-positive-no">No</label>
          </div>
          <div *ngIf="healthDeclarationForm.get('contactPositive')?.invalid && healthDeclarationForm.get('contactPositive')?.touched" class="text-danger">
            Please answer this question.
          </div>
        </div>

        <!-- Question: Travelled to Local Transmission Area -->
        <div class="form-group">
          <label>Have you traveled or lived in an area with a report of local transmission of COVID-19?</label>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              id="local-transmission-yes"
              formControlName="localTransmission"
              value="yes"
            />
            <label class="form-check-label" for="local-transmission-yes">Yes</label>
          </div>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              id="local-transmission-no"
              formControlName="localTransmission"
              value="no"
            />
            <label class="form-check-label" for="local-transmission-no">No</label>
          </div>
          <div *ngIf="healthDeclarationForm.get('localTransmission')?.invalid && healthDeclarationForm.get('localTransmission')?.touched" class="text-danger">
            Please answer this question.
          </div>
        </div>

<!-- Question: Recent Travel Within the Philippines -->
<div class="form-group">
  <label>Have you traveled within the Philippines by air, bus, or train within the past 14 days?</label>
  <div class="form-check">
    <input
      class="form-check-input"
      type="radio"
      id="travel-ph-yes"
      formControlName="travelPh"
      value="yes"
    />
    <label class="form-check-label" for="travel-ph-yes">Yes</label>
  </div>
  <div class="form-check">
    <input
      class="form-check-input"
      type="radio"
      id="travel-ph-no"
      formControlName="travelPh"
      value="no"
    />
    <label class="form-check-label" for="travel-ph-no">No</label>
  </div>
  <div *ngIf="healthDeclarationForm.get('travelPh')?.invalid && healthDeclarationForm.get('travelPh')?.touched" class="text-danger">
    Please answer this question.
  </div>
</div>

<!-- Question: Recent Travel Outside the Philippines -->
<div class="form-group">
  <label>Have you traveled outside the Philippines by air or cruise ship in the past 14 days?</label>
  <div class="form-check">
    <input
      class="form-check-input"
      type="radio"
      id="travel-outside-ph-yes"
      formControlName="travelOutsidePh"
      value="yes"
    />
    <label class="form-check-label" for="travel-outside-ph-yes">Yes</label>
  </div>
  <div class="form-check">
    <input
      class="form-check-input"
      type="radio"
      id="travel-outside-ph-no"
      formControlName="travelOutsidePh"
      value="no"
    />
    <label class="form-check-label" for="travel-outside-ph-no">No</label>
  </div>
  <div *ngIf="healthDeclarationForm.get('travelOutsidePh')?.invalid && healthDeclarationForm.get('travelOutsidePh')?.touched" class="text-danger">
    Please answer this question.
  </div>
</div>


        <!-- Submit Button -->
        <div class="form-group">
          <button type="submit" class="btn btn-primary" [disabled]="healthDeclarationForm.invalid">Submit</button>
        </div>
      </form>
    </div>
  </div>
</div>



/* ===== File: src\app\dashboard\patientdashboard\health_declaration\health_declaration.component.scss ===== */
h3.card-title {
    font-size: 2rem !important;
    font-weight: 500 !important;
    color: dodgerblue !important;
}

h3.card-title2 {
    font-size: 1.8rem !important;
    font-weight: 500 !important;
    color: rgb(0, 0, 0) !important;
}

.question-title{
    margin-bottom: 10px;
}

/* ===== File: src\app\dashboard\patientdashboard\health_declaration\health_declaration.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AppointmentComponent } from './health_declaration.component';

describe('AppointmentComponent', () => {
  let component: AppointmentComponent;
  let fixture: ComponentFixture<AppointmentComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [AppointmentComponent]
    });
    fixture = TestBed.createComponent(AppointmentComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\dashboard\patientdashboard\health_declaration\health_declaration.component.ts ===== */
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NgSelectModule } from '@ng-select/ng-select';
import { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';


@Component({
  selector: 'app-appointment',
  standalone: true,
  imports: [CommonModule, NgSelectModule, ReactiveFormsModule, FormsModule], // ✅ Added FormsModule
  templateUrl: './health_declaration.component.html',
  styleUrls: ['./health_declaration.component.scss'],
})
export class HealthDeclarationComponent implements OnInit {
  healthDeclarationForm!: FormGroup;

  constructor(private fb: FormBuilder) {}

  ngOnInit(): void {
    this.initializeForm();
  }

  initializeForm(): void {
    this.healthDeclarationForm = this.fb.group({
      fever: ['', Validators.required],
      breathing: ['', Validators.required],
      cough: ['', Validators.required],
      nose: ['', Validators.required],
      smell: ['', Validators.required],
      throat: ['', Validators.required],
      diarrhea: ['', Validators.required],
      influenza: ['', Validators.required],
      historyCovid: ['', Validators.required],
      familyPositive: ['', Validators.required],
      contactPositive: ['', Validators.required],
      localTransmission: ['', Validators.required],
      travelPh: ['', Validators.required],
      travelOutsidePh: ['', Validators.required],
    });
  }

  onSubmit(): void {
    if (this.healthDeclarationForm.valid) {
      console.log('Health Declaration Submitted:', this.healthDeclarationForm.value);
    } else {
      console.log('Form is invalid. Please complete all required fields.');
    }
  }
}


/* ===== File: src\app\dashboard\patientdashboard\patientdashboard.component.html ===== */
<div class="wrapper">
  <!-- Navbar -->
  <nav class="main-header navbar navbar-expand navbar-white navbar-light">
    <!-- Left navbar links -->
    <ul class="navbar-nav">
      <li class="nav-item">
        <a class="nav-link" data-widget="pushmenu" href="#" role="button"><i class="fas fa-bars"></i></a>
      </li>
    </ul>

    <!-- Right navbar links -->
    <ul class="navbar-nav ml-auto">
      <!-- Notifications Dropdown Menu -->
      <li class="nav-item dropdown">
        <a class="nav-link" data-toggle="dropdown" href="#">
          <i class="far fa-bell"></i>
          <span class="badge badge-warning navbar-badge">15</span>
        </a>
        <div class="dropdown-menu dropdown-menu-lg dropdown-menu-right">
          <span class="dropdown-item dropdown-header">15 Notifications</span>
          <div class="dropdown-divider"></div>
          <a href="#" class="dropdown-item">
            <i class="fas fa-envelope mr-2"></i> 4 new messages
            <span class="float-right text-muted text-sm">3 mins</span>
          </a>
          <div class="dropdown-divider"></div>
          <a href="#" class="dropdown-item">
            <i class="fas fa-users mr-2"></i> 8 friend requests
            <span class="float-right text-muted text-sm">12 hours</span>
          </a>
          <div class="dropdown-divider"></div>
          <a href="#" class="dropdown-item">
            <i class="fas fa-file mr-2"></i> 3 new reports
            <span class="float-right text-muted text-sm">2 days</span>
          </a>
          <div class="dropdown-divider"></div>
          <a href="#" class="dropdown-item dropdown-footer">See All Notifications</a>
        </div>
      </li>

      <li class="nav-item dropdown">
        <a class="nav-link" data-toggle="dropdown" href="#">
          <i class="far fa-user-circle"></i>
          <span>{{ user.name }}</span>
        </a>
        <div class="dropdown-menu dropdown-menu-lg dropdown-menu-right">
          <div class="dropdown-divider"></div>
          <a href="#" class="dropdown-item" data-toggle="modal" data-target="#logoutModal">
            <i class="fas fa-sign-out-alt mr-2"></i> Logout
          </a>
        </div>
      </li>
    </ul>
  </nav>

  <!-- Main Sidebar Container -->
  <aside class="main-sidebar sidebar-dark-primary elevation-4">
    <!-- Brand Logo -->
    <a href="../../index3.html" class="brand-link">
      <img src="assets/img/user2-160x160.jpg" alt="AdminLTE Logo" class="brand-image img-circle elevation-3" style="opacity: .8">
      <span class="brand-text font-weight-light">Alexander Pierce</span>
    </a>

    <!-- Sidebar -->
    <div class="sidebar">
      <!-- Sidebar Menu -->
      <nav class="mt-2">
        <ul class="nav nav-pills nav-sidebar flex-column" data-widget="treeview" role="menu" data-accordion="false">
          <li class="nav-item">
            <a routerLink="/patientdashboard" routerLinkActive="active" [routerLinkActiveOptions]="{ exact: true }" class="nav-link">
              <i class="nav-icon far fa-image"></i>
              <p>Dashboard</p>
            </a>
          </li>
          <li class="nav-item">
            <a routerLink="/patientdashboard/healthdeclaration" routerLinkActive="active" class="nav-link">
              <i class="nav-icon fas fa-user"></i>
              <p>Health Declaration</p>
            </a>
          </li>
          <li class="nav-item">
            <a routerLink="/patientdashboard/treatment" routerLinkActive="active" class="nav-link">
              <i class="nav-icon fas fa-user"></i>
              <p>Treatment</p>
            </a>
          </li>
          <li class="nav-item">
            <a routerLink="/patientdashboard/prescription" routerLinkActive="active" class="nav-link">
              <i class="nav-icon fas fa-user"></i>
              <p>Prescription</p>
            </a>
          </li>

          <li class="nav-item">
            <a routerLink="/patientdashboard/userprofile" routerLinkActive="active" class="nav-link">
              <i class="nav-icon fas fa-user"></i>
              <p>User Profile</p>
            </a>
          </li>
        </ul>
      </nav>
      
    </div>
  </aside>

  <!-- Logout Modal -->
  <div class="modal fade top-center-modal" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="logoutModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="logoutModalLabel">Ready to Leave?</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">Are you sure you want to logout?</div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">No</button>
          <button type="button" class="btn btn-primary" (click)="logout()">Logout</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Content Wrapper. Contains page content -->
  <div class="content-wrapper">
    <router-outlet></router-outlet>
  </div>

  <app-footer></app-footer>

  <!-- Control Sidebar -->
  <aside class="control-sidebar control-sidebar-dark">
  </aside>
</div>

/* ===== File: src\app\dashboard\patientdashboard\patientdashboard.component.scss ===== */


/* ===== File: src\app\dashboard\patientdashboard\patientdashboard.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { PatientdashboardComponent } from './patientdashboard.component';

describe('PatientdashboardComponent', () => {
  let component: PatientdashboardComponent;
  let fixture: ComponentFixture<PatientdashboardComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [PatientdashboardComponent]
    });
    fixture = TestBed.createComponent(PatientdashboardComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\dashboard\patientdashboard\patientdashboard.component.ts ===== */
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router, RouterModule, RouterOutlet } from '@angular/router';
import { FooterComponent } from 'src/app/footer/footer.component';
import { Store } from '@ngrx/store';
import { AuthActions } from 'src/app/auth/ngrx/login.actions';

@Component({
  selector: 'app-patientdashboard',
  standalone: true,
  imports: [CommonModule, FooterComponent, RouterOutlet, RouterModule],
  templateUrl: './patientdashboard.component.html',
  styleUrls: ['./patientdashboard.component.scss']
})
export class PatientdashboardComponent {

  PatientInfoDummyData = {
    name: 'John Doe',
    email: 'john.doe@example.com',
    gender: 'Male',
    birthdate: '1990-01-01',
    phone: '+1234567890',
    address: '123 Main St, Anytown, USA'
  };

  user = {
    name: 'Taylor Swift',
    email: 'feliztoothdev@gmail.com',
  };

  constructor(private router: Router, private store: Store) {}

  logout() {
    // Remove modal backdrop manually
    const backdrop = document.querySelector('.modal-backdrop');
    if (backdrop) {
      backdrop.remove();
    }
  
    const refreshToken = localStorage.getItem('refreshToken');
  
    if (refreshToken) {
      // Dispatch logout action with refresh token
      this.store.dispatch(AuthActions.logout({ refreshToken }));
    } else {
      // If refreshToken is missing, still dispatch logout action
      this.store.dispatch(AuthActions.logout({ refreshToken: '' }));
    }
  
    this.router.navigate(['/login']);
  }


  

}


/* ===== File: src\app\dashboard\patientdashboard\patient_treatment\patient_treatment.component.html ===== */
<section class="content-header">
    <div class="container-fluid">
      <div class="row mb-2">
        <div class="col-sm-6">
          <h1>{{ pagetitle }}</h1>
        </div>
        <div class="col-sm-6">
          <ol class="breadcrumb float-sm-right">
            <li class="breadcrumb-item"><a href="#">Home</a></li>
            <li class="breadcrumb-item active">{{ pagetitle }}</li>
          </ol>
        </div>
      </div>
    </div>
  </section>
  
  <section>
    <div class="content">
      <div class="container-fluid">
        <div class="col-md-12">
          <app-table
            [title]="pagetitle + ' List'"
            [data]="filteredPatients"
            [columns]="columns"
            [itemsPerPage]="itemsPerPage"
            [(currentPage)]="currentPage"
            [(searchTerm)]="searchTerm"
            [pageSizeOptions]="[5, 10, 15, 20]"
            [showAddButton]="false"
            (searchTermChange)="filterPatients($event)"
            (currentPageChange)="currentPage = $event"
            (rowAction)="handleRowAction($event)"
            (sort)="sortPatients($event)"
            (actionClick)="handleActionClick($event)"
          ></app-table>
        </div>
      </div>
    </div>
  </section>
  

/* ===== File: src\app\dashboard\patientdashboard\patient_treatment\patient_treatment.component.scss ===== */


/* ===== File: src\app\dashboard\patientdashboard\patient_treatment\patient_treatment.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';



describe('TreatmentComponent', () => {
  let component: TreatmentComponent;
  let fixture: ComponentFixture<TreatmentComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [TreatmentComponent]
    });
    fixture = TestBed.createComponent(TreatmentComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\dashboard\patientdashboard\patient_treatment\patient_treatment.component.ts ===== */
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { CommonModule } from '@angular/common';
import { TableComponent } from 'src/app/my-components/tables/table/table.component';
import { PatientDataService } from 'src/app/services/patients/patient-data-service';
import { PatientData } from 'src/app/interfaces/patients.interface';


@Component({
  selector: 'app-patients-treatment',
  standalone: true,
  imports: [CommonModule, TableComponent],
  templateUrl: './patient_treatment.component.html',
  styleUrls: ['./patient_treatment.component.scss']
})
export class PatientTreatmentComponent implements OnInit {
  pagetitle = 'Treatment';
  sortColumn: string = 'name'; // Default sort column
  sortDirection: string = 'asc'; // Default sort direction

  originalPatients: PatientData[] = [];
  filteredPatients: PatientData[] = [];
  errorMessage: string = '';

  columns = [
    { key: 'photo', label: 'Photo', render: (data: any) => `<img src="${data}" class="img-thumbnail" width="50" alt="Photo">`, sortable: false },
    { key: 'name', label: 'PatientData', sortable: true },
    { key: 'birthday', label: 'Birthday', sortable: true },
    { key: 'gender', label: 'Gender', sortable: true },
    { key: 'contact', label: 'Contact', sortable: false },
    { key: 'email', label: 'Email', sortable: true },
    { key: 'action', label: 'Action', sortable: false }
  ];

  actions = [
    { label: 'View', icon: 'fas fa-eye', callback: 'view' }
  ];

  itemsPerPage = 10;
  searchTerm = '';
  currentPage = 1;

  constructor(private router: Router, private patientDataService: PatientDataService) {}

  ngOnInit(): void {
    this.loadPatients();
  }

  loadPatients(): void {
    this.patientDataService.getPatients().subscribe({
      next: (data: PatientData[]) => {
        this.originalPatients = data;
        this.filteredPatients = [...this.originalPatients];
        this.sortPatients(this.sortColumn); // Apply default sorting
      },
      error: (err) => {
        this.errorMessage = 'Failed to load patients.';
        console.error(err);
      }
    });
  }

  filterPatients(search: string): void {
    this.searchTerm = search.trim();
    if (!this.searchTerm) {
      this.filteredPatients = [...this.originalPatients];
    } else {
      this.filteredPatients = this.originalPatients.filter((patient) =>
        Object.values(patient)
          .join(' ')
          .toLowerCase()
          .includes(this.searchTerm.toLowerCase())
      );
    }
  }

  sortPatients(column: string): void {
    this.sortColumn = column;
    this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';

    this.filteredPatients.sort((a: any, b: any) => {
      const valA = a[column]?.toString().toLowerCase() || '';
      const valB = b[column]?.toString().toLowerCase() || '';
      return this.sortDirection === 'asc' ? valA.localeCompare(valB) : valB.localeCompare(valA);
    });
  }

  handleRowAction(rowData: any): void {
    this.navigateToPatientDetails(rowData.id);
  }

  navigateToPatientDetails(patientId: number): void {
    this.router.navigate([`/dentistdashboard/patients/patient-details`, patientId]);
  }

  handleActionClick(event: { action: string; row: any }): void {
    if (event.action === 'view') {
      this.navigateToPatientDetails(event.row.patientId);
    }
  }

  openEditPatientModal(patientId: number): void {
    console.log('Editing patient with ID:', patientId);
    // Open edit modal logic here
  }
  
  confirmDeletePatient(patientId: number): void {
    console.log('Deleting patient with ID:', patientId);
    // Confirm and delete logic here
  }
}


/* ===== File: src\app\dashboard\patientdashboard\userprofile\userprofile.component.html ===== */
<section class="content-header">
  <div class="container-fluid">
    <div class="row mb-2">
      <div class="col-sm-6">
        <h1>Profile</h1>
      </div>
      <div class="col-sm-6">
        <ol class="breadcrumb float-sm-right">
          <li class="breadcrumb-item"><a href="#">Home</a></li>
          <li class="breadcrumb-item active">User Profile</li>
        </ol>
      </div>
    </div>
  </div>
</section>

<section class="alerts">
  <div class="container-fluid">
    <div class="col-md-9">
      <div class="card">
        <div class="card-header p-2">
          <ul class="nav nav-pills">
            <li class="nav-item"><a class="nav-link active" href="#editprofile" data-toggle="tab">Edit Profile</a></li>
            <li class="nav-item"><a class="nav-link" href="#changepassword" data-toggle="tab">Change Password</a></li>
          </ul>
        </div>
        <div class="card-body">
          <div class="tab-content">
            <div class="tab-pane fade show active" id="editprofile">
              <div class="col-md-12">
                <div class="row">
                  <div class="col-md-6">
                    <div class="form-group">
                      <label for="firstName">First Name <span class="text-danger">*</span></label>
                      <input type="text" class="form-control" id="firstName" placeholder="Enter first name" required>
                    </div>
                  </div>
                  <div class="col-md-6">
                    <div class="form-group">
                      <label for="lastName">Last Name <span class="text-danger">*</span></label>
                      <input type="text" class="form-control" id="lastName" placeholder="Enter last name" required>
                    </div>
                  </div>
                </div>
                <div class="row">
                  <div class="col-md-6">
                    <div class="form-group">
                      <label for="address">Address <span class="text-danger">*</span></label>
                      <input type="text" class="form-control" id="address" placeholder="Enter address" required>
                    </div>
                  </div>
                  <div class="col-md-3">
                    <div class="form-group">
                      <label for="reservationdate">Date <span class="text-danger">*</span></label>
                      <div class="input-group date" id="reservationdate" data-target-input="nearest">
                        <input type="text" id="reservationdate" class="form-control datetimepicker-input" data-target="#reservationdate" required/>
                        <div class="input-group-append" data-target="#reservationdate" data-toggle="datetimepicker">
                          <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="col-md-3">
                    <div class="form-group">
                      <label>Sex <span class="text-danger">*</span></label>
                      <select class="custom-select" required>
                        <option value="">Select</option>
                        <option>Male</option>
                        <option>Female</option>
                      </select>
                    </div>
                  </div>
                </div>
                <div class="row">
                  <div class="col-md-6">
                    <div class="form-group">
                      <label for="email">Email <span class="text-danger">*</span></label>
                      <input type="email" class="form-control" id="email" placeholder="Enter email" required>
                    </div>
                  </div>
                  <div class="col-md-3">
                    <div class="form-group">
                      <label for="contactNumber">Contact Number <span class="text-danger">*</span></label>
                      <input type="text" class="form-control" id="contactNumber" placeholder="Enter contact number" required>
                    </div>
                  </div>
                  <div class="col-md-3">
                    <div class="form-group">
                      <label for="profilePicture">Profile Picture <span class="text-danger">*</span></label>
                      <div class="input-group">
                        <div class="custom-file">
                          <input type="file" class="custom-file-input" id="profilePicture" required>
                          <label class="custom-file-label" for="profilePicture">Choose file</label>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="row">
                  <div class="col-md-12 text-right">
                    <button type="button" class="btn btn-primary">Update Profile</button>
                  </div>
                </div>
              </div>
            </div>
            <div class="tab-pane fade" id="changepassword">
              <!-- Change Password Content -->
            <div class="col-md-12">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="currentPassword">Current Password <span class="text-danger">*</span></label>
                            <input type="password" class="form-control" id="currentPassword" placeholder="Enter current password" required>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="newPassword">New Password <span class="text-danger">*</span></label>
                            <input type="password" class="form-control" id="newPassword" placeholder="Enter new password" required>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="confirmPassword">Confirm Password <span class="text-danger">*</span></label>
                            <input type="password" class="form-control" id="confirmPassword" placeholder="Confirm new password" required>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12 text-right">
                        <button type="button" class="btn btn-primary">Change Password</button>
                    </div>
                </div>
            </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>


/* ===== File: src\app\dashboard\patientdashboard\userprofile\userprofile.component.scss ===== */


/* ===== File: src\app\dashboard\patientdashboard\userprofile\userprofile.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { UserprofileComponent } from './userprofile.component';

describe('UserprofileComponent', () => {
  let component: UserprofileComponent;
  let fixture: ComponentFixture<UserprofileComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [UserprofileComponent]
    });
    fixture = TestBed.createComponent(UserprofileComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\dashboard\patientdashboard\userprofile\userprofile.component.ts ===== */
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-userprofile',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './userprofile.component.html',
  styleUrls: ['./userprofile.component.scss']
})
export class UserprofileComponent {

}


/* ===== File: src\app\footer\footer.component.html ===== */
<footer class="main-footer">
    <div class="float-right d-none d-sm-block">
      <b>Version</b> 3.1.0
    </div>
    <strong>Copyright &copy; 2014-2021 <a href="https://adminlte.io">AdminLTE.io</a>.</strong> All rights reserved.
</footer>

/* ===== File: src\app\footer\footer.component.scss ===== */


/* ===== File: src\app\footer\footer.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { FooterComponent } from './footer.component';

describe('FooterComponent', () => {
  let component: FooterComponent;
  let fixture: ComponentFixture<FooterComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [FooterComponent]
    });
    fixture = TestBed.createComponent(FooterComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\footer\footer.component.ts ===== */
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-footer',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './footer.component.html',
  styleUrls: ['./footer.component.scss']
})
export class FooterComponent {

}


/* ===== File: src\app\functions\token_expiry.ts ===== */
import { Store } from '@ngrx/store';
import { AuthActions } from '../auth/ngrx/login.actions';
import { Router } from '@angular/router';

export function checkTokenExpiry(store: Store, router: Router) {
  const accessToken = sessionStorage.getItem('accessToken');
  const refreshToken = localStorage.getItem('refreshToken');
  const expiresAt = Number(sessionStorage.getItem('accessTokenExpiry')); // Get expiry time

  if (!accessToken || !refreshToken || !expiresAt) {
    console.warn('No tokens found, logging out...');
    logoutUser(store, router);
    return;
  }

  const now = Date.now();
  const timeUntilExpiry = expiresAt - now;
  const warningTime = timeUntilExpiry - (5 * 60 * 1000); // 5 minutes before expiry

  if (timeUntilExpiry <= 0) {
    console.warn('Token already expired, logging out now...');
    logoutUser(store, router);
    return;
  }

  // ✅ Log a warning 5 minutes before token expiry
  if (warningTime > 0) {
    setTimeout(() => {
      console.warn('⚠️ Token will expire in 5 minutes! Refresh or save your work.');
    }, warningTime);
  }

  // ✅ Auto logout when the token expires
  setTimeout(() => {
    console.warn('⏳ Token expired! Logging out user now.');
    logoutUser(store, router);
  }, timeUntilExpiry);
}

export function logoutUser(store: Store, router: Router) {
  sessionStorage.removeItem('accessToken');
  sessionStorage.removeItem('accessTokenExpiry');
  localStorage.removeItem('refreshToken');
  store.dispatch(AuthActions.logout({ refreshToken: '' }));
  router.navigate(['/login']);
}


/* ===== File: src\app\interfaces\addappointment.interface.ts ===== */
// ✅ Generic API Response Interface
export interface ApiResponse<T> {
    message: string;  // API response message
    data: T | null;   // The actual response data (generic type T)
    error?: string | null;  // Optional error field
  }
  
  // ✅ Appointment Interface (Now Includes `service_list_id`, but Optional)
  export interface Appointment {
    id?: number; // Optional for create operations
    patient_id: number;
    dentist_id: number;
    schedule_id: number;
    timeslot_id: number;
    status: 'pending' | 'confirmed' | 'canceled';
    appointment_type: 'online' | 'walk_in';
    health_declaration_id?: number | null; // Optional if the system fetches it automatically
    service_list_id?: number[]; // ✅ Now Optional (Array of Service IDs)
  }
  
  // ✅ Appointment Services Interface (Links Appointments to Services)
  export interface AppointmentService {
    appointment_id: number;
    service_list_id: number;
  }
  

  export interface DetailedAppointment {
    appointment_id: number;
    status: string;
    appointment_type: string;
    schedule_date: string;
    timeslot_start_time: string;
    timeslot_end_time: string;
    dentist_name: string;
    patient_name: string;
    services: AppointmentService[];
  }
  
  export interface AppointmentService {
    service_id: number;
    service_name: string;
  }
  

/* ===== File: src\app\interfaces\auth.interfaces.ts ===== */
export interface LoginRequest {
    email: string;
    password: string;
  }
  
  export interface LoginResponse {
    message: string;
    data: Token;
  }

  export interface LoginResponseError{
    message: string;
  }
  
  export interface Token {
    accessToken: string;
    refreshToken?: string | null; // Optional since it's only needed for refreshing
  }




/* ===== File: src\app\interfaces\dentist.interface.ts ===== */
export interface Dentist {
    user_id: number;
    email: string;
    fullname: string;
    status: string;
    photo: string;
    birthday: string;
    address: string;
    gender: string;
    contact_number: string;
    degree: string;
    specialty: string;
  }
  
  export interface DentistResponse {
    message: string;
    data: Dentist | null;
    error: string | null;
  }
  
  export interface DentistsListResponse {
    message: string;
    data: Dentist[];
    error: string | null;
  }
  

/* ===== File: src\app\interfaces\patients.interface.ts ===== */
export interface DentistData {
  id: number; // Unique identifier for the patient
  photo: string; // URL of the patient's photo
  name: string; // Full name of the patient
  birthday: string; // Date of birth (YYYY-MM-DD)
  gender: string; // Gender (Male/Female)
  contact: string; // Contact number
  email: string; // Email address
  address: string; // Optional address field
}

export interface PatientData {
  id: number; // Unique identifier for the patient
  patientId: number; // Corresponding patient's ID
  firstName: string; // First name of the patient
  lastName: string; // Last name of the patient
  dateOfBirth: string; // Date of birth (YYYY-MM-DD)
  gender: string; // Gender (Male/Female)
  email: string; // Email address
  mobileNumber: string; // Mobile number
  address: string; // Optional address field
  profilePicture: string; // URL of the patient's profile picture
}


export interface AppointmentDetail {
  id: number; // Unique identifier for detailed appointment
  patientId: number; // Corresponding patient's ID
  date: string; // Appointment date (YYYY-MM-DD)
  time: string; // Appointment time
  doctor: string; // Doctor's name
  status: string; // Status of the appointment
}

export interface PrescriptionData {
  id: number; // Unique identifier for the prescription
  patientId: number; // Corresponding patient's ID
  date: string; // Prescription date (YYYY-MM-DD)
  medicine: string; // Name of the prescribed medicine
  notes: string; // Dosage or usage instructions
}

export interface TreatmentData {
  id: number; // Unique identifier for the treatment
  patientId: number; // Corresponding patient's ID
  dateVisit: string; // Visit date (YYYY-MM-DD)
  teethNos: string; // Teeth numbers affected (e.g., '12, 14')
  treatment: string; // Treatment name (e.g., 'Filling', 'Extraction')
  description: string; // Details of the treatment
  fees: string; // Cost of the treatment
  remarks: string; // Additional remarks (e.g., 'Follow-up in 6 months')
}

export interface DentalHistoryData {
  id: number; // Unique identifier for dental history
  patientId: number; // Corresponding patient's ID
  previousDentist: string; // Name of the previous dentist
  lastDentalVisit: string; // Last dental visit date (YYYY-MM-DD)
  action: string; // Action associated (e.g., 'View')
}

export interface MedicalHistoryData {
  id: number; // Unique identifier for medical history
  patientId?: number; // Corresponding patient's ID
  conditions?: string; // Condition being treated (optional)
  symptoms?: string; // Symptoms experienced (optional)
  lastVisitDate?: string; // Last medical visit date (YYYY-MM-DD) (optional)
  ongoingTreatment?: boolean; // Whether the patient is undergoing treatment
  medicationDetails?: string; // Medication details (optional)
  allergies: string; // Known allergies
  illnesses: string; // Current or past illnesses
  action: string; // Action associated (e.g., 'View')
}

export interface Schedule {
  id: number; // Unique identifier for the schedule
  date: string; // Date of the schedule (YYYY-MM-DD)
  dentistId: number; // Dentist's ID
  startTime: string; // Start time of the schedule (e.g., '09:00 AM')
  endTime: string; // End time of the schedule (e.g., '05:00 PM')
  duration: string; // Duration of the schedule (e.g., '8 hours')
}





/* ===== File: src\app\interfaces\patient_details.interface.ts ===== */
export interface Patient {
    user_id: number;
    fullname: string;
    address: string;
    birthday: string; // YYYY-MM-DD format
    sex: string;
    email: string;
    contact_number: string;
    photo: string;
  }
  
  export interface PatientResponse {
    message: string;
    data: Patient | null;
  }
  
  export interface PatientsListResponse {
    message: string;
    data: Patient[];
  }
  
  export interface UpdatePatientRequest {
    fullname?: string;
    address?: string;
    birthday?: string;
    sex?: string;
    contact_number?: string;
    photo?: string;
  }
  

/* ===== File: src\app\interfaces\prescription.interface.ts ===== */
export interface Prescription {
    id: number;
    patient_id: number;
    dentist_id: number;
    date: string;
    medicine: string;
    notes?: string;
    created_at?: string;
    updated_at?: string;
  }
  
  export interface PrescriptionsResponse {
    message: string;
    data: Prescription[];
  }
  
  export interface PrescriptionResponse {
    message: string;
    data: Prescription;
  }

/* ===== File: src\app\interfaces\schedule.interface.ts ===== */
export interface Schedule {
    id: number;
    dentist_id: number;
    date: string;
    start_time: string;
    end_time: string;
    created_at?: string;
    updated_at?: string;
  }


  export interface SchedulesResponse{
    message: string;
    data: Schedule[];
  }

  export interface ScheduleResponse{
    message: string;
    data: Schedule;
  }

  export interface TimeSlot {
    id: number;
    schedule_id: number;
    start_time: string;
    end_time: string;
  }
  
  export interface TimeSlotsResponse {
    message: string;
    data: TimeSlot[];
  }

  export interface TimeslotIdResponse{
    message: string;
    data: TimeSlot;
  }


/* ===== File: src\app\interfaces\servicelist.interface.ts ===== */
export interface Service {
    id: number;
    service_name: string;
    title: string;
    content: string;
    photo: string;
  }
  
  export interface ServicesListResponse {
    message: string;
    data: Service[];
  }
  
  export interface ServiceResponse {
    message: string;
    data: Service;
  }
  

/* ===== File: src\app\interfaces\user_profile.interface.ts ===== */
// ✅ Define User Profile Interface
export interface UserProfileResponse {
    id: number;
    email: string;
    fullname: string;
    role: string;
  }

/* ===== File: src\app\my-components\alert\alert.component.html ===== */
<div *ngIf="message" class="alert-container">
  <div class="alert alert-{{ type }} alert-dismissible">
    <button type="button" class="close" (click)="closeAlert()" aria-hidden="true">
      &times;
    </button>
    <h5>
      <i class="icon fas" [ngClass]="{
        'fa-check': type === 'success',
        'fa-ban': type === 'danger',
        'fa-exclamation-triangle': type === 'warning',
        'fa-info-circle': type === 'info'
      }"></i>
      {{ type | titlecase }}!
    </h5>
    {{ message }}
  </div>
</div>


/* ===== File: src\app\my-components\alert\alert.component.scss ===== */
.card-title {
    text-align: center !important;
    float: unset !important;
    font-weight: bold !important;
    font-size: 1.4rem !important;

}

.input-group-text {
    background-color: transparent !important;
  }

.form-control{
    border-right: none !important;

}

p{
    text-align: center;
    font-size: 0.9rem !important;
    margin-top: 0.6rem !important;
}

.custom-link{
    font-size: 0.8rem !important;
    margin-bottom: 0.3rem !important;
}

.alert-container {
    position: fixed;
    top: 10px;
    right: 10px;
    z-index: 1050; /* Ensures alert is above everything */
    min-width: 250px;
    max-width: 400px;
  }
  
  

/* ===== File: src\app\my-components\alert\alert.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AlertComponent } from './alert.component';

describe('AlertComponent', () => {
  let component: AlertComponent;
  let fixture: ComponentFixture<AlertComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [AlertComponent]
    });
    fixture = TestBed.createComponent(AlertComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\my-components\alert\alert.component.ts ===== */
import { CommonModule } from '@angular/common';
import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';

@Component({
  selector: 'app-alert',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './alert.component.html',
  styleUrls: ['./alert.component.scss'],
})
export class AlertComponent implements OnInit {
  @Input() message: string | null = null; // ✅ Input for message content
  @Input() type: 'success' | 'danger' | 'warning' | 'info' = 'success'; // ✅ Include 'info'
  @Input() autoDismiss: boolean = true; // ✅ Auto-dismiss after a few seconds

  @Output() dismiss = new EventEmitter<void>(); // ✅ Output event for dismissal

  ngOnInit(): void {
    if (this.autoDismiss) {
      setTimeout(() => {
        this.dismiss.emit(); // ✅ Notify parent to clear alert
      }, 3000);
    }
  }

  closeAlert(): void {
    this.dismiss.emit(); // ✅ Notify parent when manually closed
  }
}


/* ===== File: src\app\my-components\cards\info-card\info-card.component.html ===== */
<div class="card card-primary card-outline">
  <div class="card-body box-profile">
    <div class="text-center">
      <img class="profile-user-img img-fluid img-circle" [src]="imageSrc" alt="User profile picture">
    </div>
    <h3 class="profile-username text-center">{{ name }}</h3>
    <p class="text-muted text-center">{{ subtitle }}</p>
    <ul class="list-group list-group-unbordered mb-3">
      <li class="list-group-item" *ngFor="let detail of details">
        <b>{{ detail.label }}</b> <span class="float-right">{{ detail.value }}</span>
      </li>
    </ul>
  </div>
</div>


/* ===== File: src\app\my-components\cards\info-card\info-card.component.scss ===== */


/* ===== File: src\app\my-components\cards\info-card\info-card.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { InfoCardComponent } from './info-card.component';

describe('InfoCardComponent', () => {
  let component: InfoCardComponent;
  let fixture: ComponentFixture<InfoCardComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [InfoCardComponent]
    });
    fixture = TestBed.createComponent(InfoCardComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\my-components\cards\info-card\info-card.component.ts ===== */
import { Component, Input } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-info-card',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './info-card.component.html',
  styleUrls: ['./info-card.component.scss']
})
export class InfoCardComponent {
  @Input() title!: string; // Dynamic title for the card
  @Input() imageSrc!: string; // Profile image source
  @Input() name!: string; // Display name
  @Input() subtitle!: string; // Secondary info (e.g., email)
  @Input() details!: { label: string; value: string }[]; // List of key-value pairs for card details

}


/* ===== File: src\app\my-components\modals\add-appointment-modal\add-appointment-modal.component.html ===== */
<div *ngIf="isVisible">
    <div class="modal-backdrop fade show"></div>
    <div
      class="modal fade show"
      [class.d-block]="isVisible"
      tabindex="-1"
      role="dialog"
      aria-labelledby="addScheduleModalLabel"
      aria-hidden="true"
      data-backdrop="static"
      data-keyboard="false"
    >
      <div class="modal-dialog modal-md" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="addScheduleModalLabel">{{ title }}</h5>
            <button type="button" class="close" aria-label="Close" (click)="close()">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <form [formGroup]="appointmentForm">
              <div class="callout callout-danger">
                <h5>Please be advised that this is not yet a confirmed appointment.</h5>
              </div>
  
              <!-- Preferred Dentist -->
<div class="form-group">
  <label for="dentist-select">Preferred Dentist</label>
  <ng-select
    [items]="dentists$ | async"
    bindLabel="fullname"
    bindValue="user_id"
    formControlName="dentist_id"
    placeholder="Select a Dentist"
    [searchable]="true"
  ></ng-select>
  <div
    *ngIf="appointmentForm.get('dentist_id')?.invalid && appointmentForm.get('dentist_id')?.touched"
    class="text-danger"
  >
    Dentist selection is required.
  </div>
</div>

<!-- Available Dates (Filtered by Dentist) -->
<div class="form-group">
  <label for="schedule-select">Available Dates</label>
  <ng-select
    [items]="schedules$ | async"
    bindLabel="date"
    bindValue="id"
    formControlName="schedule_id"
    placeholder="Select a Date"
    [searchable]="true"
    [loading]="(isLoading$ | async) ?? false"
  ></ng-select>
  <div
    *ngIf="appointmentForm.get('schedule_id')?.invalid && appointmentForm.get('schedule_id')?.touched"
    class="text-danger"
  >
    Date selection is required.
  </div>
</div>
<!-- Available Time Slots (Filtered by Selected Date) -->
<div class="form-group">
  <label for="time-slot-select">Available Time Slots</label>
  <ng-select
    [items]="timeSlots$ | async"
    bindLabel="start_time"
    bindValue="id"
    formControlName="time"
    placeholder="Select a Time Slot"
    [searchable]="true"
  ></ng-select>
  <div
    *ngIf="appointmentForm.get('time')?.invalid && appointmentForm.get('time')?.touched"
    class="text-danger"
  >
    Time selection is required.
  </div>
</div>

  
              <!-- Services Selection -->
              <div class="form-group">
                <label for="services-select">Services:</label>
                <ng-select
                  [items]="services$ | async"
                  bindLabel="service_name"
                  bindValue="id"
                  formControlName="services"
                  [multiple]="true"
                  placeholder="Select services"
                ></ng-select>
                <div
                  *ngIf="
                    appointmentForm.get('services')?.invalid &&
                    appointmentForm.get('services')?.touched
                  "
                  class="text-danger"
                >
                  At least one service must be selected.
                </div>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" (click)="close()">Close</button>
            <button
              type="button"
              class="btn btn-primary"
              [disabled]="!appointmentForm.valid"
              (click)="submitAppointment()"
            >
              Submit
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- ✅ Success Alert -->
<app-alert [message]="message$ | async" type="success"></app-alert>

<!-- ❌ Error Alert -->
<app-alert [message]="error$ | async" type="danger"></app-alert>

  

/* ===== File: src\app\my-components\modals\add-appointment-modal\add-appointment-modal.component.scss ===== */
@import "~@ng-select/ng-select/themes/default.theme.css";

/* ===== File: src\app\my-components\modals\add-appointment-modal\add-appointment-modal.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AddAppointmentModalComponent } from './add-appointment-modal.component';

describe('AddAppointmentModalComponent', () => {
  let component: AddAppointmentModalComponent;
  let fixture: ComponentFixture<AddAppointmentModalComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [AddAppointmentModalComponent]
    });
    fixture = TestBed.createComponent(AddAppointmentModalComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\my-components\modals\add-appointment-modal\add-appointment-modal.component.ts ===== */
import {
  Component,
  EventEmitter,
  Input,
  Output,
} from '@angular/core';
import { CommonModule, formatDate } from '@angular/common';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { select, Store } from '@ngrx/store';
import { NgSelectModule } from '@ng-select/ng-select';
import { Observable } from 'rxjs';
import { tap, switchMap, distinctUntilChanged, map } from 'rxjs/operators';
import { Dentist } from 'src/app/interfaces/dentist.interface';
import { selectDentists } from 'src/app/ngrx/dentist/dentist.reducers';
import { DentistActions } from 'src/app/ngrx/dentist/dentist.actions';
import { selectSchedules, selectIsLoading, selectTimeSlots } from 'src/app/ngrx/schedules/schedules.reducers';
import { Schedule, TimeSlot } from 'src/app/interfaces/schedule.interface';
import { ScheduleActions } from 'src/app/ngrx/schedules/schedule.actions';
import { Appointment } from 'src/app/interfaces/addappointment.interface';
import { AppointmentActions } from 'src/app/ngrx/appointment/addappointment.actions';
import { selectSelectedPatient } from 'src/app/ngrx/patients/patients.reducers';
import { AlertComponent } from '../../alert/alert.component';
import { selectError, selectMessage } from 'src/app/ngrx/appointment/addappointment.reducers';
import { Service } from 'src/app/interfaces/servicelist.interface';
import { selectServices } from 'src/app/ngrx/servicelist/servicelist.reducers';
import { ServicesActions } from 'src/app/ngrx/servicelist/servicelsit.actions';

@Component({
  selector: 'app-add-appointment-modal',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, NgSelectModule, AlertComponent],
  templateUrl: './add-appointment-modal.component.html',
  styleUrls: ['./add-appointment-modal.component.scss'],
})
export class AddAppointmentModalComponent {
  @Input() isVisible: boolean = false;
  @Input() title: string = 'Add Schedule';
  @Output() closeModal = new EventEmitter<void>();
  @Output() submitModal = new EventEmitter<any>();

  appointmentForm!: FormGroup;
  dentists$!: Observable<Dentist[]>;
  schedules$!: Observable<Schedule[]>; // ✅ Filtered schedules based on selected dentist
  isLoading$!: Observable<boolean>;
  timeSlots$!: Observable<TimeSlot[]>;
  message$!: Observable<string | null>;
  error$!: Observable<string | null>;
  services$!: Observable<Service[]>; // ✅ Observable for services


  constructor(private fb: FormBuilder, private store: Store) {}

  ngOnInit(): void {
    this.initForm();
    this.loadDentists();
    this.setupDentistSelection();
    this.setupScheduleSelection();
    this.loadServices(); // ✅ Load services from the store
    this.appointmentForm.reset(); // ✅ Resets the form fields when closing
    this.message$ = this.store.pipe(select(selectMessage));
    this.error$ = this.store.pipe(select(selectError));
  }

  /** ✅ Initialize Form */
  private initForm(): void {
    this.appointmentForm = this.fb.group({
      patient_id: [{ value: '', disabled: true }, Validators.required],
      dentist_id: ['', Validators.required],
      schedule_id: ['', Validators.required], 
      time: ['', Validators.required],
      services: [[], Validators.required], 
    });

      // ✅ Automatically populate `patient_id` from store
  this.store.pipe(select(selectSelectedPatient)).subscribe((patient) => {
    if (patient) {
      this.appointmentForm.patchValue({ patient_id: patient.user_id });
    }
  });
  }

  /** ✅ Load Dentists from Store */
  private loadDentists(): void {
    this.dentists$ = this.store.pipe(select(selectDentists));
    this.store.dispatch(DentistActions.loadDentists());
  }

    /** ✅ Load Services */
    private loadServices(): void {
      this.services$ = this.store.pipe(select(selectServices));
      this.store.dispatch(ServicesActions.loadServices()); // ✅ Fetch services on init
    }

  /** ✅ Detect Dentist Selection & Fetch Available Dates */
  private setupDentistSelection(): void {
    this.schedules$ = this.appointmentForm.get('dentist_id')!.valueChanges.pipe(
      distinctUntilChanged(), // ✅ Prevents duplicate API calls
      tap(() => {
        this.appointmentForm.patchValue({ schedule_id: '', time: '' }); // ✅ Reset date and time when changing dentist
      }),
      tap((dentistId) => {
        if (dentistId) {
          this.store.dispatch(ScheduleActions.loadSchedulesByDentist({ dentistId }));
        }
      }),
      switchMap(() => this.store.pipe(select(selectSchedules))),
      map((schedules) =>
        schedules.map((schedule) => ({
          ...schedule,
          date: formatDate(schedule.date, 'yyyy-MM-dd', 'en-US'), // ✅ Format date
        }))
      )
    );
  
    this.isLoading$ = this.store.pipe(
      select(selectIsLoading),
      map((isLoading) => isLoading ?? false) // ✅ Convert null to false
    );
  }

  /** ✅ Detect Date Selection & Fetch Available Time Slots */
  private setupScheduleSelection(): void {
    this.timeSlots$ = this.appointmentForm.get('schedule_id')!.valueChanges.pipe(
      distinctUntilChanged(), // ✅ Prevents duplicate API calls
      tap(() => this.appointmentForm.patchValue({ time: '' })), // ✅ Reset time when changing date
      tap((scheduleId) => {
        if (scheduleId) {
          this.store.dispatch(ScheduleActions.loadTimeSlots({ scheduleId }));
        }
      }),
      switchMap(() => this.store.pipe(select(selectTimeSlots)))
    );
  }

  /** ✅ Close Modal */
  close(): void {
    this.isVisible = false;
    this.closeModal.emit();
    this.appointmentForm.reset(); // ✅ Resets the form fields when closing
  }

/** ✅ Submit Appointment */
submitAppointment(): void {
  if (this.appointmentForm.valid) {
    // ✅ Get the patient ID from the store
    this.store.pipe(select(selectSelectedPatient)).subscribe((patient) => {
      if (patient) {
        const formValue = this.appointmentForm.getRawValue(); // ✅ Includes disabled fields like `patient_id`

        // ✅ Prepare data for dispatch
        const appointment: Partial<Appointment> = {
          patient_id: patient.user_id, // ✅ Add `patient_id`
          dentist_id: formValue.dentist_id,
          schedule_id: formValue.schedule_id,
          timeslot_id: formValue.time, // Assuming 'time' is the timeslot_id
          status: 'pending', // Default status when creating an appointment
          appointment_type: 'online', // Adjust if necessary
        };

        const service_list_id: number[] = formValue.services;

        // ✅ Dispatch Action with `patient_id`
        this.store.dispatch(
          AppointmentActions.createAppointment({ appointment, service_list_id })
        );

        this.submitModal.emit(formValue);
        this.close();
      } else {
        console.warn('No patient data found in store!');
      }
    });
  }
}


}


/* ===== File: src\app\my-components\modals\add-edit-dental-history\add-edit-dental-history.component.html ===== */
<!-- Add Dental History Modal -->
<div *ngIf="isVisible">
  <div class="modal-backdrop fade show"></div> <!-- Backdrop -->
  <div
    class="modal fade show"
    [class.d-block]="isVisible"
    tabindex="-1"
    role="dialog"
    aria-labelledby="addDentalHistoryModalLabel"
    aria-hidden="true"
    data-backdrop="static"
    data-keyboard="false"
  >
    <div class="modal-dialog modal-md" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addDentalHistoryModalLabel">{{ title }}</h5>
          <button type="button" class="close" aria-label="Close" (click)="close()">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <form [formGroup]="dentalHistoryForm" (ngSubmit)="submitDentalHistory()">
            <div class="form-group">
              <label for="previousDentist">Previous Dentist <span class="text-danger">*</span></label>
              <input
                type="text"
                class="form-control"
                id="previousDentist"
                formControlName="previousDentist"
                [attr.aria-required]="true"
                [attr.aria-invalid]="dentalHistoryForm.get('previousDentist')?.invalid"
              />
              <div *ngIf="dentalHistoryForm.get('previousDentist')?.hasError('required') && dentalHistoryForm.get('previousDentist')?.touched" class="text-danger">
                Previous Dentist is required.
              </div>
            </div>
            <div class="form-group">
              <label for="lastDentalVisit">Last Dental Visit <span class="text-danger">*</span></label>
              <input
                type="date"
                class="form-control"
                id="lastDentalVisit"
                formControlName="lastDentalVisit"
                [attr.aria-required]="true"
                [attr.aria-invalid]="dentalHistoryForm.get('lastDentalVisit')?.invalid"
              />
              <div *ngIf="dentalHistoryForm.get('lastDentalVisit')?.hasError('required') && dentalHistoryForm.get('lastDentalVisit')?.touched" class="text-danger">
                Last Dental Visit is required.
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" (click)="close()">Close</button>
              <button type="submit" class="btn btn-primary" [disabled]="dentalHistoryForm.invalid">Submit</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

/* ===== File: src\app\my-components\modals\add-edit-dental-history\add-edit-dental-history.component.scss ===== */


/* ===== File: src\app\my-components\modals\add-edit-dental-history\add-edit-dental-history.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AddEditDentalHistoryComponent } from './add-edit-dental-history.component';

describe('AddEditDentalHistoryComponent', () => {
  let component: AddEditDentalHistoryComponent;
  let fixture: ComponentFixture<AddEditDentalHistoryComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [AddEditDentalHistoryComponent]
    });
    fixture = TestBed.createComponent(AddEditDentalHistoryComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\my-components\modals\add-edit-dental-history\add-edit-dental-history.component.ts ===== */
import { CommonModule } from '@angular/common';
import { Component, EventEmitter, Input, Output, OnChanges, SimpleChanges } from '@angular/core';
import { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';
import { DentalHistoryData } from 'src/app/interfaces/patients.interface';


@Component({
  selector: 'app-add-edit-dental-history',
  standalone: true,
  imports: [CommonModule, FormsModule, ReactiveFormsModule],
  templateUrl: './add-edit-dental-history.component.html',
  styleUrls: ['./add-edit-dental-history.component.scss']
})
export class AddEditDentalHistoryComponent implements OnChanges {
  @Input() isVisible: boolean = false;
  @Input() title: string = 'Add Dental History';
  @Input() dentalHistoryData: DentalHistoryData | null = null; // Input for selected data
  @Output() closeModal = new EventEmitter<void>();
  @Output() submitModal = new EventEmitter<DentalHistoryData>();

  dentalHistoryForm!: FormGroup;

  constructor(private fb: FormBuilder) {}

  ngOnInit(): void {
    this.dentalHistoryForm = this.fb.group({
      id: [null], // Retain the ID field for editing
      previousDentist: ['', Validators.required],
      lastDentalVisit: ['', Validators.required],
    });
  }

  ngOnChanges(changes: SimpleChanges): void {
    if (changes['dentalHistoryData'] && this.dentalHistoryData) {
      // Populate form with selected row data
      this.dentalHistoryForm.patchValue(this.dentalHistoryData);
    }
  }

  close(): void {
    this.closeModal.emit();
  }

  submitDentalHistory(): void {
    if (this.dentalHistoryForm.valid) {
      const dentalHistory: DentalHistoryData = this.dentalHistoryForm.value;
      this.submitModal.emit(dentalHistory); // Emit data to parent
      this.close();
    } else {
      alert('Please fill out all required fields.');
    }
  }
}

/* ===== File: src\app\my-components\modals\add-edit-medical-history\add-edit-medical-history.component.html ===== */
<div *ngIf="isVisible">
    <div class="modal-backdrop fade show"></div> <!-- Backdrop -->
    <div
      class="modal fade show"
      [class.d-block]="isVisible"
      tabindex="-1"
      role="dialog"
      aria-labelledby="addMedicalHistoryModalLabel"
      aria-hidden="true"
      data-backdrop="static"
      data-keyboard="false"
    >
      <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="addMedicalHistoryModalLabel">{{ title }}</h5>
            <button type="button" class="close" aria-label="Close" (click)="close()">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <form [formGroup]="medicalHistoryForm">
              <!-- Question 1: Condition -->
              <div class="form-group">
                <label for="condition">What condition is being treated?</label>
                <input
                  type="text"
                  class="form-control"
                  id="condition"
                  formControlName="condition"
                  placeholder="Enter condition"
                />
              </div>
  
              <!-- Question 2: Symptoms -->
              <div class="form-group">
                <label for="symptoms">Describe the symptoms:</label>
                <input
                  type="text"
                  class="form-control"
                  id="symptoms"
                  formControlName="symptoms"
                  placeholder="Enter symptoms"
                />
              </div>
  
              <!-- Question 3: Last Visit Date -->
              <div class="form-group">
                <label for="lastVisitDate">When was your last visit to the doctor?</label>
                <input
                  type="date"
                  class="form-control"
                  id="lastVisitDate"
                  formControlName="lastVisitDate"
                />
              </div>
  
              <!-- Question 4: Ongoing Treatment -->
              <div class="form-group">
                <label>Are you undergoing ongoing treatment?</label>
                <div class="form-check">
                  <input
                    type="radio"
                    id="ongoingTreatmentYes"
                    class="form-check-input"
                    formControlName="ongoingTreatment"
                    [value]="true"
                  />
                  <label for="ongoingTreatmentYes" class="form-check-label">Yes</label>
                </div>
                <div class="form-check">
                  <input
                    type="radio"
                    id="ongoingTreatmentNo"
                    class="form-check-input"
                    formControlName="ongoingTreatment"
                    [value]="false"
                  />
                  <label for="ongoingTreatmentNo" class="form-check-label">No</label>
                </div>
              </div>
  
              <!-- Question 5: Medication Details -->
              <div class="form-group">
                <label for="medicationDetails">Are you taking any prescription or non-prescription medication? If so, specify:</label>
                <input
                  type="text"
                  class="form-control"
                  id="medicationDetails"
                  formControlName="medicationDetails"
                  placeholder="Enter medication details"
                />
              </div>
  
              <!-- Question 6: Known Allergies -->
              <div class="form-group">
                <label for="allergies">Known Allergies:</label>
                <input
                  type="text"
                  class="form-control"
                  id="allergies"
                  formControlName="allergies"
                  placeholder="Enter allergies"
                />
              </div>
  
              <!-- Question 7: Illnesses -->
              <div class="form-group">
                <label for="illnesses">Do you have or have you had any of the following illnesses?</label>
                <div class="row">
                  <div class="col-md-6">
                    <div class="form-check">
                      <input
                        class="form-check-input"
                        type="checkbox"
                        id="diabetes"
                        formControlName="illnesses"
                        value="Diabetes"
                      />
                      <label for="diabetes" class="form-check-label">Diabetes</label>
                    </div>
                    <div class="form-check">
                      <input
                        class="form-check-input"
                        type="checkbox"
                        id="heartDisease"
                        formControlName="illnesses"
                        value="Heart Disease"
                      />
                      <label for="heartDisease" class="form-check-label">Heart Disease</label>
                    </div>
                    <div class="form-check">
                      <input
                        class="form-check-input"
                        type="checkbox"
                        id="kidneyDisease"
                        formControlName="illnesses"
                        value="Kidney Disease"
                      />
                      <label for="kidneyDisease" class="form-check-label">Kidney Disease</label>
                    </div>
                  </div>
                  <div class="col-md-6">
                    <div class="form-check">
                      <input
                        class="form-check-input"
                        type="checkbox"
                        id="stroke"
                        formControlName="illnesses"
                        value="Stroke"
                      />
                      <label for="stroke" class="form-check-label">Stroke</label>
                    </div>
                    <div class="form-check">
                      <input
                        class="form-check-input"
                        type="checkbox"
                        id="none"
                        formControlName="illnesses"
                        value="None"
                      />
                      <label for="none" class="form-check-label">None</label>
                    </div>
                  </div>
                </div>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" (click)="close()">Close</button>
            <button type="button" class="btn btn-primary" (click)="submitMedicalHistory()">Submit</button>
          </div>
        </div>
      </div>
    </div>
  </div>

/* ===== File: src\app\my-components\modals\add-edit-medical-history\add-edit-medical-history.component.scss ===== */


/* ===== File: src\app\my-components\modals\add-edit-medical-history\add-edit-medical-history.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AddEditMedicalHistoryComponent } from './add-edit-medical-history.component';

describe('AddEditMedicalHistoryComponent', () => {
  let component: AddEditMedicalHistoryComponent;
  let fixture: ComponentFixture<AddEditMedicalHistoryComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [AddEditMedicalHistoryComponent]
    });
    fixture = TestBed.createComponent(AddEditMedicalHistoryComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\my-components\modals\add-edit-medical-history\add-edit-medical-history.component.ts ===== */
import { Component, EventEmitter, Input, Output, SimpleChanges } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MedicalHistoryData } from 'src/app/interfaces/patients.interface';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';

@Component({
  selector: 'app-add-edit-medical-history',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './add-edit-medical-history.component.html',
  styleUrls: ['./add-edit-medical-history.component.scss']
})
export class AddEditMedicalHistoryComponent {
  @Input() isVisible: boolean = false;
  @Input() title: string = 'Add Medical History';
  @Input() medicalHistoryData: MedicalHistoryData | null = null;
  @Output() closeModal = new EventEmitter<void>();
  @Output() submitModal = new EventEmitter<MedicalHistoryData>();

  medicalHistoryForm!: FormGroup;

  constructor(private fb: FormBuilder) {}

  ngOnInit(): void {
    this.medicalHistoryForm = this.fb.group({
      id: [null],
      condition: [''],
      symptoms: [''],
      lastVisitDate: [''],
      ongoingTreatment: [null],
      medicationDetails: [''],
      allergies: ['', Validators.required],
      illnesses: [''],
      action: ['View'],
    });
  }

  ngOnChanges(changes: SimpleChanges): void {
    if (changes['medicalHistoryData'] && this.medicalHistoryData) {
      this.medicalHistoryForm.patchValue(this.medicalHistoryData);
    }
  }

  close(): void {
    this.closeModal.emit();
  }

  submitMedicalHistory(): void {
    if (this.medicalHistoryForm.valid) {
      const medicalHistory: MedicalHistoryData = this.medicalHistoryForm.value;
      this.submitModal.emit(medicalHistory);
      this.close();
    } else {
      alert('Please fill out all required fields.');
    }
  }
}


/* ===== File: src\app\my-components\modals\confirm-modal\confirm-modal.component.html ===== */
<div *ngIf="isVisible" class="modal fade show d-block top-center-modal" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">{{ title }}</h5>
        <button type="button" class="close" (click)="close()" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        {{ message }}
        
        <!-- ✅ Countdown only shows if it's provided -->
        <span *ngIf="countdown !== null">
          <strong>{{ countdown }}s</strong> remaining before automatic logout.
        </span>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" (click)="close()">{{ cancelText }}</button>
        <button type="button" class="btn btn-primary" (click)="confirm()">{{ confirmText }}</button>
      </div>
    </div>
  </div>
</div>


/* ===== File: src\app\my-components\modals\confirm-modal\confirm-modal.component.scss ===== */
.modal {
    background: rgba(0, 0, 0, 0.5);
  }
  
  .top-center-modal .modal-dialog {
    top: 30%;
    margin: auto;
  }
  

/* ===== File: src\app\my-components\modals\confirm-modal\confirm-modal.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ConfirmModalComponent } from './confirm-modal.component';

describe('ConfirmModalComponent', () => {
  let component: ConfirmModalComponent;
  let fixture: ComponentFixture<ConfirmModalComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [ConfirmModalComponent]
    });
    fixture = TestBed.createComponent(ConfirmModalComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\my-components\modals\confirm-modal\confirm-modal.component.ts ===== */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-confirm-modal',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './confirm-modal.component.html',
  styleUrls: ['./confirm-modal.component.scss']
})
export class ConfirmModalComponent {
  @Input() isVisible: boolean = false; // Controls modal visibility
  @Input() title: string = 'Confirm Action'; // Modal title
  @Input() message: string = 'Are you sure?'; // Modal message
  @Input() confirmText: string = 'Confirm'; // Confirm button text
  @Input() cancelText: string = 'Cancel'; // Cancel button text
  @Input() countdown: number = 60; // ✅ Show countdown

  @Output() closeModal = new EventEmitter<void>(); // Emits when closing modal
  @Output() confirmAction = new EventEmitter<void>(); // Emits when confirming action

  /** ✅ Close Modal */
  close(): void {
    this.isVisible = false;
    this.closeModal.emit();
  }

  /** ✅ Confirm Action */
  confirm(): void {
    this.isVisible = false;
    this.confirmAction.emit(); // Executes the action (e.g., logout)
  }
}


/* ===== File: src\app\my-components\modals\general-modal\general-modal.component.html ===== */
<div *ngIf="isVisible">
  <div class="modal-backdrop fade show"></div> <!-- Backdrop -->
  <div
    class="modal fade show"
    [class.d-block]="isVisible"
    tabindex="-1"
    role="dialog"
    aria-labelledby="addScheduleModalLabel"
    aria-hidden="true"
    data-backdrop="static"
    data-keyboard="false"
  >
    <div class="modal-dialog modal-md" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addScheduleModalLabel">{{ title }}</h5>
          <button type="button" class="close" aria-label="Close" (click)="close()">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <form [formGroup]="scheduleForm">
            <div class="form-group">
              <label for="scheduleDate">Date <span class="text-danger">*</span></label>
              <input
                type="date"
                class="form-control"
                id="scheduleDate"
                formControlName="date"
              />
              <div *ngIf="scheduleForm.get('date')?.invalid && scheduleForm.get('date')?.touched" class="text-danger">
                Date is required.
              </div>
            </div>
            <div class="form-row">
              <div class="form-group col-md-6">
                <label for="appointmentStartTime">Start Time <span class="text-danger">*</span></label>
                <input
                  type="time"
                  class="form-control"
                  id="appointmentStartTime"
                  formControlName="startTime"
                />
                <div *ngIf="scheduleForm.get('startTime')?.invalid && scheduleForm.get('startTime')?.touched" class="text-danger">
                  Start time is required.
                </div>
              </div>
              <div class="form-group col-md-6">
                <label for="appointmentEndTime">End Time <span class="text-danger">*</span></label>
                <input
                  type="time"
                  class="form-control"
                  id="appointmentEndTime"
                  formControlName="endTime"
                />
                <div *ngIf="scheduleForm.get('endTime')?.invalid && scheduleForm.get('endTime')?.touched" class="text-danger">
                  End time is required.
                </div>
              </div>
            </div>
            <div class="form-group">
              <label for="appointmentDuration">Duration <span class="text-danger">*</span></label>
              <select
                class="form-control"
                id="appointmentDuration"
                formControlName="duration"
              >
                <option value="" disabled>Select Duration</option>
                <option value="15">15 minutes</option>
                <option value="30">30 minutes</option>
                <option value="45">45 minutes</option>
                <option value="60">1 hour</option>
              </select>
              <div *ngIf="scheduleForm.get('duration')?.invalid && scheduleForm.get('duration')?.touched" class="text-danger">
                Duration is required.
              </div>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" (click)="close()">Close</button>
          <button
            type="button"
            class="btn btn-primary"
            [disabled]="!scheduleForm.valid"
            (click)="submitSchedule()"
          >
            Submit
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

/* ===== File: src\app\my-components\modals\general-modal\general-modal.component.scss ===== */
.modal-backdrop {
    position: fixed !important;
    top: 0 !important;
    left: 0 !important;
    width: 100% !important;
    height: 100% !important;
    background: rgba(0, 0, 0, 0.5) !important;
    z-index: 1040 !important;
  }
  
  .modal-dialog {
    background: white !important;
    border-radius: 8px !important;
    width: 100% !important;
    max-width: 600px !important;
  }
  
  .modal-header .close {
    outline: none !important;
  }
  
  .modal-body {
    padding: 1rem !important;
  }
  
  .modal-footer {
    display: flex !important;
    justify-content: flex-end !important;
  }

/* ===== File: src\app\my-components\modals\general-modal\general-modal.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { GeneralModalComponent } from './general-modal.component';

describe('GeneralModalComponent', () => {
  let component: GeneralModalComponent;
  let fixture: ComponentFixture<GeneralModalComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [GeneralModalComponent]
    });
    fixture = TestBed.createComponent(GeneralModalComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\my-components\modals\general-modal\general-modal.component.ts ===== */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { Schedule } from 'src/app/interfaces/patients.interface';

@Component({
  selector: 'app-general-modal',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './general-modal.component.html',
  styleUrls: ['./general-modal.component.scss']
})
export class GeneralModalComponent {
  @Input() isVisible: boolean = false;
  @Input() title: string = 'Add Schedule';
  @Output() closeModal = new EventEmitter<void>();
  @Output() submitModal = new EventEmitter<Schedule>();

  scheduleForm!: FormGroup; // Reactive form group

  constructor(private fb: FormBuilder) {}

  ngOnInit(): void {
    // Initialize the form
    this.scheduleForm = this.fb.group({
      date: ['', Validators.required],
      startTime: ['', Validators.required],
      endTime: ['', Validators.required],
      duration: ['', Validators.required],
    });
  }

  // Close modal
  close(): void {
    this.closeModal.emit();
  }

  // Submit schedule
  submitSchedule(): void {
    if (this.scheduleForm.valid) {
      const schedule: Schedule = this.scheduleForm.value;
      this.submitModal.emit(schedule);
      this.close(); // Close modal after submission
    } else {
      alert('Please fill out all required fields.');
    }
  }
}


/* ===== File: src\app\my-components\modals\logout-modal\logout-modal.component.html ===== */
<div *ngIf="isVisible">
  <div class="modal-backdrop fade show"></div> <!-- Backdrop -->
  <div
    class="modal fade show"
    [class.d-block]="isVisible"  
    tabindex="-1"
    role="dialog"
    aria-labelledby="logoutModalLabel"
    aria-hidden="true"
    data-backdrop="static"       
    data-keyboard="false"        
  >
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="logoutModalLabel">{{ title }}</h5>
          <button type="button" class="close" aria-label="Close" (click)="close()">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <ng-content></ng-content>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" (click)="close()">Close</button>
          <button type="button" class="btn btn-primary" (click)="confirm()">Confirm</button>
        </div>
      </div>
    </div>
  </div>
</div>


/* ===== File: src\app\my-components\modals\logout-modal\logout-modal.component.scss ===== */


/* ===== File: src\app\my-components\modals\logout-modal\logout-modal.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { LogoutModalComponent } from './logout-modal.component';

describe('LogoutModalComponent', () => {
  let component: LogoutModalComponent;
  let fixture: ComponentFixture<LogoutModalComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [LogoutModalComponent]
    });
    fixture = TestBed.createComponent(LogoutModalComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\my-components\modals\logout-modal\logout-modal.component.ts ===== */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-logout-modal',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './logout-modal.component.html',
  styleUrls: ['./logout-modal.component.scss']
})
export class LogoutModalComponent {
  @Input() isVisible: boolean = false; // Control modal visibility
  @Input() title: string = 'Modal Title'; // Title of the modal
  @Output() closeModal = new EventEmitter<void>(); // Emit when modal closes
  @Output() confirmAction = new EventEmitter<void>(); // Emit on confirm button

  close(): void {
    this.closeModal.emit(); // Notify parent to close the modal
  }

  confirm(): void {
    this.confirmAction.emit(); // Notify parent to confirm action
  }
}


/* ===== File: src\app\my-components\tables\display-table\display-table.component.html ===== */

      <div class="row mb-3">
        <!-- Entries Per Page -->
        <div class="col-md-6">
          <label for="entriesPerPage">Show</label>
          <select
            id="entriesPerPage"
            class="form-control d-inline-block w-auto ml-2"
            [(ngModel)]="itemsPerPage"
            (ngModelChange)="updatePageSize.emit(itemsPerPage)"
          >
            <option *ngFor="let option of pageSizeOptions" [value]="option">
              {{ option }}
            </option>
          </select>
          <span>entries</span>
        </div>
        <!-- Search Input -->
        <div class="col-md-6 text-right">
          <label for="searchBox">Search:</label>
          <input
            id="searchBox"
            type="text"
            class="form-control d-inline-block w-auto ml-2"
            [(ngModel)]="searchTerm"
            (ngModelChange)="search.emit(searchTerm)"
            placeholder="Search..."
          />
        </div>
      </div>
  
      <!-- Table -->
      <table class="table table-bordered table-hover">
        <thead>
          <tr>
            <!-- Render Table Headers -->
            <th
              *ngFor="let column of columns"
              (click)="column.sortable && sort.emit(column.key)"
              [class.sortable]="column.sortable"
            >
              {{ column.label }}
              <i
                *ngIf="column.sortable"
                class="fas"
                [ngClass]="{
                  'fa-sort-up': sortColumn === column.key && sortDirection === 'asc',
                  'fa-sort-down': sortColumn === column.key && sortDirection === 'desc',
                  'fa-sort': sortColumn !== column.key
                }"
              ></i>
            </th>
          </tr>
        </thead>
        <tbody>
          <!-- Render Table Rows -->
          <tr *ngFor="let row of data | paginate: { itemsPerPage: itemsPerPage, currentPage: currentPage }">
            <td *ngFor="let column of columns">
              <!-- Render Action Column -->
              <ng-container *ngIf="column.key === 'action'; else normalCell">
                <button
                  class="btn btn-info btn-sm"
                  (click)="actionClick.emit({ action: 'view', row: row })"
                >
                  <i class="fas fa-eye"></i> View
                </button>
              </ng-container>
              <!-- Render Normal Data Cell -->
              <ng-template #normalCell>
                {{ row[column.key] }}
              </ng-template>
            </td>
          </tr>
        </tbody>
      </table>
      
  
      <!-- Pagination Summary -->
      <div class="row mt-3">
        <div class="col-md-6">
          <span>
            Showing {{ (currentPage - 1) * itemsPerPage + 1 }} to
            {{ currentPage * itemsPerPage < data.length ? currentPage * itemsPerPage : data.length }}
            of {{ data.length }} entries
          </span>
        </div>
        <!-- Pagination Controls -->
        <div class="col-md-6 d-flex justify-content-end">
          <pagination-controls (pageChange)="currentPageChange.emit($event)"></pagination-controls>
        </div>
      </div>


  

/* ===== File: src\app\my-components\tables\display-table\display-table.component.scss ===== */


/* ===== File: src\app\my-components\tables\display-table\display-table.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { DisplayTableComponent } from './display-table.component';

describe('DisplayTableComponent', () => {
  let component: DisplayTableComponent;
  let fixture: ComponentFixture<DisplayTableComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [DisplayTableComponent]
    });
    fixture = TestBed.createComponent(DisplayTableComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\my-components\tables\display-table\display-table.component.ts ===== */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { NgxPaginationModule } from 'ngx-pagination';

@Component({
  selector: 'app-display-table',
  standalone: true,
  imports: [CommonModule, FormsModule, NgxPaginationModule],
  templateUrl: './display-table.component.html',
  styleUrls: ['./display-table.component.scss']
})
export class DisplayTableComponent {
 @Input() title: string = 'Table';
  @Input() data: any[] = []; // Table data
  @Input() columns: { key: string; label: string; sortable?: boolean }[] = []; // Column definitions
  @Input() itemsPerPage: number = 10;
  @Input() pageSizeOptions: number[] = [5, 10, 15, 20];
  @Input() sortColumn: string = '';
  @Input() sortDirection: string = 'asc';
  @Input() currentPage: number = 1;
  @Input() searchTerm: string = '';
  @Input() showAddButton: boolean = false;
  @Input() addButtonText: string = 'Add Item';
  @Input() actions: { label: string; icon?: string; callback: string }[] = [];

  @Output() sort = new EventEmitter<string>();
  @Output() search = new EventEmitter<string>();
  @Output() add = new EventEmitter<void>();
  @Output() updatePageSize = new EventEmitter<number>();
  @Output() currentPageChange = new EventEmitter<number>();
  @Output() itemsPerPageChange = new EventEmitter<number>();
  @Output() searchTermChange = new EventEmitter<string>();
  @Output() actionClick = new EventEmitter<{ action: string; row: any }>();

  
  ngOnChanges(): void {
    this.itemsPerPageChange.emit(this.itemsPerPage);
    this.searchTermChange.emit(this.searchTerm);
  }
}


/* ===== File: src\app\my-components\tables\table\table.component.html ===== */
<div class="card card-primary card-outline">
    <div class="card-header">
      <h3 class="card-title">{{ title }}</h3>
      <button
        *ngIf="showAddButton"
        type="button"
        class="btn btn-primary float-right"
        (click)="add.emit()"
      >
        <i class="fas fa-plus"></i> {{ addButtonText }}
      </button>
    </div>
    <div class="card-body">
      <div class="row mb-3">
        <!-- Entries Per Page -->
        <div class="col-md-6">
          <label for="entriesPerPage">Show</label>
          <select
            id="entriesPerPage"
            class="form-control d-inline-block w-auto ml-2"
            [(ngModel)]="itemsPerPage"
            (ngModelChange)="updatePageSize.emit(itemsPerPage)"
          >
            <option *ngFor="let option of pageSizeOptions" [value]="option">
              {{ option }}
            </option>
          </select>
          <span>entries</span>
        </div>
        <!-- Search Input -->
        <div class="col-md-6 text-right">
          <label for="searchBox">Search:</label>
          <input
            id="searchBox"
            type="text"
            class="form-control d-inline-block w-auto ml-2"
            [(ngModel)]="searchTerm"
            (ngModelChange)="search.emit(searchTerm)"
            placeholder="Search..."
          />
        </div>
      </div>
  
      <!-- Table -->
      <table class="table table-bordered table-hover">
        <thead>
          <tr>
            <!-- Render Table Headers -->
            <th
              *ngFor="let column of columns"
              (click)="column.sortable && sort.emit(column.key)"
              [class.sortable]="column.sortable"
            >
              {{ column.label }}
              <i
                *ngIf="column.sortable"
                class="fas"
                [ngClass]="{
                  'fa-sort-up': sortColumn === column.key && sortDirection === 'asc',
                  'fa-sort-down': sortColumn === column.key && sortDirection === 'desc',
                  'fa-sort': sortColumn !== column.key
                }"
              ></i>
            </th>
          </tr>
        </thead>
        <tbody>
          <!-- Render Table Rows -->
          <tr *ngFor="let row of data | paginate: { itemsPerPage: itemsPerPage, currentPage: currentPage }">
            <td *ngFor="let column of columns">
              <!-- Render Action Column -->
              <ng-container *ngIf="column.key === 'action'; else normalCell">
                <button
                  class="btn btn-info btn-sm"
                  (click)="actionClick.emit({ action: 'view', row: row })"
                >
                  <i class="fas fa-eye"></i> View
                </button>
              </ng-container>
              <!-- Render Normal Data Cell -->
              <ng-template #normalCell>
                {{ row[column.key] }}
              </ng-template>
            </td>
          </tr>
        </tbody>
      </table>
      
  
      <!-- Pagination Summary -->
      <div class="row mt-3">
        <div class="col-md-6">
          <span>
            Showing {{ (currentPage - 1) * itemsPerPage + 1 }} to
            {{ currentPage * itemsPerPage < data.length ? currentPage * itemsPerPage : data.length }}
            of {{ data.length }} entries
          </span>
        </div>
        <!-- Pagination Controls -->
        <div class="col-md-6 d-flex justify-content-end">
          <pagination-controls (pageChange)="currentPageChange.emit($event)"></pagination-controls>
        </div>
      </div>
    </div>
  </div>
  

/* ===== File: src\app\my-components\tables\table\table.component.scss ===== */


/* ===== File: src\app\my-components\tables\table\table.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { TableComponent } from './table.component';

describe('TableComponent', () => {
  let component: TableComponent;
  let fixture: ComponentFixture<TableComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [TableComponent]
    });
    fixture = TestBed.createComponent(TableComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\my-components\tables\table\table.component.ts ===== */
import { CommonModule } from '@angular/common';
import { Component, Input, Output, EventEmitter, OnChanges } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { NgxPaginationModule } from 'ngx-pagination';

@Component({
  selector: 'app-table',
  imports: [CommonModule, FormsModule, NgxPaginationModule],
  standalone: true,
  templateUrl: './table.component.html',
  styleUrls: ['./table.component.scss'],
})
export class TableComponent implements OnChanges {
  @Input() title: string = 'Table';
  @Input() data: any[] = []; // Table data
  @Input() columns: { key: string; label: string; sortable?: boolean }[] = []; // Column definitions
  @Input() itemsPerPage: number = 10;
  @Input() pageSizeOptions: number[] = [5, 10, 15, 20];
  @Input() sortColumn: string = '';
  @Input() sortDirection: string = 'asc';
  @Input() currentPage: number = 1;
  @Input() searchTerm: string = '';
  @Input() showAddButton: boolean = false;
  @Input() addButtonText: string = 'Add Item';
  @Input() actions: { label: string; icon?: string; callback: string }[] = [];

  @Output() sort = new EventEmitter<string>();
  @Output() search = new EventEmitter<string>();
  @Output() add = new EventEmitter<void>();
  @Output() updatePageSize = new EventEmitter<number>();
  @Output() currentPageChange = new EventEmitter<number>();
  @Output() itemsPerPageChange = new EventEmitter<number>();
  @Output() searchTermChange = new EventEmitter<string>();
  @Output() actionClick = new EventEmitter<{ action: string; row: any }>();

  
  ngOnChanges(): void {
    this.itemsPerPageChange.emit(this.itemsPerPage);
    this.searchTermChange.emit(this.searchTerm);
  }
}


/* ===== File: src\app\my-components\tables\table-with-edit-delete\table-with-edit-delete.component.html ===== */

      <div class="row mb-3">
        <!-- Entries Per Page -->
        <div class="col-md-6">
          <label for="entriesPerPage">Show</label>
          <select
            id="entriesPerPage"
            class="form-control d-inline-block w-auto ml-2"
            [(ngModel)]="itemsPerPage"
            (ngModelChange)="updatePageSize.emit(itemsPerPage)"
          >
            <option *ngFor="let option of pageSizeOptions" [value]="option">
              {{ option }}
            </option>
          </select>
          <span>entries</span>
        </div>
        <!-- Search Input -->
        <div class="col-md-6 text-right">
          <label for="searchBox">Search:</label>
          <input
            id="searchBox"
            type="text"
            class="form-control d-inline-block w-auto ml-2"
            [(ngModel)]="searchTerm"
            (ngModelChange)="search.emit(searchTerm)"
            placeholder="Search..."
          />
        </div>
      </div>
  
      <!-- Table -->
      <table class="table table-bordered table-hover">
        <thead>
          <tr>
            <!-- Render Table Headers -->
            <th
              *ngFor="let column of columns"
              (click)="column.sortable && sort.emit(column.key)"
              [class.sortable]="column.sortable"
            >
              {{ column.label }}
              <i
                *ngIf="column.sortable"
                class="fas"
                [ngClass]="{
                  'fa-sort-up': sortColumn === column.key && sortDirection === 'asc',
                  'fa-sort-down': sortColumn === column.key && sortDirection === 'desc',
                  'fa-sort': sortColumn !== column.key
                }"
              ></i>
            </th>
          </tr>
        </thead>
        <tbody>
          <!-- Render Table Rows -->
          <tr *ngFor="let row of data | paginate: { itemsPerPage: itemsPerPage, currentPage: currentPage }">
            <td *ngFor="let column of columns">
            <!-- Render Action Column -->
            <ng-container *ngIf="column.key === 'action'; else normalCell">
                <button
                    class="btn btn-warning btn-sm ml-2"
                    (click)="actionClick.emit({ action: 'edit', row: row })"
                >
                    <i class="fas fa-edit"></i> Edit
                </button>
                <button
                    class="btn btn-danger btn-sm ml-2"
                    (click)="actionClick.emit({ action: 'delete', row: row })"
                >
                    <i class="fas fa-trash"></i> Delete
                </button>
            </ng-container>       
              <ng-template #normalCell>
                {{ row[column.key] }}
              </ng-template>
            </td>
          </tr>
        </tbody>
      </table>
      
  
      <!-- Pagination Summary -->
      <div class="row mt-3">
        <div class="col-md-6">
          <span>
            Showing {{ (currentPage - 1) * itemsPerPage + 1 }} to
            {{ currentPage * itemsPerPage < data.length ? currentPage * itemsPerPage : data.length }}
            of {{ data.length }} entries
          </span>
        </div>
        <!-- Pagination Controls -->
        <div class="col-md-6 d-flex justify-content-end">
          <pagination-controls (pageChange)="currentPageChange.emit($event)"></pagination-controls>
        </div>
      </div>

  

/* ===== File: src\app\my-components\tables\table-with-edit-delete\table-with-edit-delete.component.scss ===== */


/* ===== File: src\app\my-components\tables\table-with-edit-delete\table-with-edit-delete.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { TableWithEditDeleteComponent } from './table-with-edit-delete.component';

describe('TableWithEditDeleteComponent', () => {
  let component: TableWithEditDeleteComponent;
  let fixture: ComponentFixture<TableWithEditDeleteComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [TableWithEditDeleteComponent]
    });
    fixture = TestBed.createComponent(TableWithEditDeleteComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\my-components\tables\table-with-edit-delete\table-with-edit-delete.component.ts ===== */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NgxPaginationModule } from 'ngx-pagination';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-table-with-edit-delete',
  standalone: true,
  imports: [CommonModule, NgxPaginationModule, FormsModule],
  templateUrl: './table-with-edit-delete.component.html',
  styleUrls: ['./table-with-edit-delete.component.scss']
})
export class TableWithEditDeleteComponent {
  @Input() title: string = 'Table';
    @Input() data: any[] = []; // Table data
    @Input() columns: { key: string; label: string; sortable?: boolean }[] = []; // Column definitions
    @Input() itemsPerPage: number = 10;
    @Input() pageSizeOptions: number[] = [5, 10, 15, 20];
    @Input() sortColumn: string = '';
    @Input() sortDirection: string = 'asc';
    @Input() currentPage: number = 1;
    @Input() searchTerm: string = '';
    @Input() showAddButton: boolean = false;
    @Input() addButtonText: string = 'Add Item';
    @Input() actions: { label: string; icon?: string; callback: string }[] = [];
  
    @Output() sort = new EventEmitter<string>();
    @Output() search = new EventEmitter<string>();
    @Output() add = new EventEmitter<void>();
    @Output() updatePageSize = new EventEmitter<number>();
    @Output() currentPageChange = new EventEmitter<number>();
    @Output() itemsPerPageChange = new EventEmitter<number>();
    @Output() searchTermChange = new EventEmitter<string>();
    @Output() actionClick = new EventEmitter<{ action: string; row: any }>();
  
    
    ngOnChanges(): void {
      this.itemsPerPageChange.emit(this.itemsPerPage);
      this.searchTermChange.emit(this.searchTerm);
    }
}


/* ===== File: src\app\ngrx\appointment\addappointment.actions.ts ===== */
import { createActionGroup, emptyProps, props } from '@ngrx/store';
import { ApiResponse, Appointment, DetailedAppointment } from 'src/app/interfaces/addappointment.interface';


export const AppointmentActions = createActionGroup({
  source: 'Appointments',
  events: {
    
    // ✅ Load all appointments
    'Load Appointments': emptyProps(),
    'Load Appointments Success': props<{ appointments: Appointment[] }>(),
    'Load Appointments Failure': props<{ error: string }>(),

    // ✅ Load appointment by ID
    'Load Appointment By Id': props<{ id: number }>(),
    'Load Appointment By Id Success': props<{ appointment: Appointment }>(),
    'Load Appointment By Id Failure': props<{ error: string }>(),

    // ✅ Load appointment by Patient ID
    'Load Appointment By Patient Id': props<{ id: number }>(),
    'Load Appointment By Patient Id Success': props<{ appointment: Appointment }>(),
    'Load Appointment By Patient Id Failure': props<{ error: string }>(),


    // ✅ Create appointment
    'Create Appointment': props<{ appointment: Partial<Appointment>; service_list_id: number[] }>(),
    'Create Appointment Success': props<{ response: ApiResponse<{ appointmentId: number }> }>(),
    'Create Appointment Failure': props<{ response: ApiResponse<null> }>(),

    // ✅ Update appointment
    'Update Appointment': props<{ id: number; appointment: Partial<Appointment> }>(),
    'Update Appointment Success': props<{ appointment: Appointment }>(),
    'Update Appointment Failure': props<{ error: string }>(),

    // ✅ Delete appointment
    'Delete Appointment': props<{ id: number }>(),
    'Delete Appointment Success': props<{ id: number }>(),
    'Delete Appointment Failure': props<{ error: string }>(),

        // ✅ Add actions to clear messages after 3s
        'Clear Message': emptyProps(),
        'Clear Error': emptyProps(),

            // ✅ Cancel appointment
    'Cancel Appointment': props<{ id: number }>(),
    'Cancel Appointment Success': props<{ response: ApiResponse<{ appointmentId: number }> }>(),
    'Cancel Appointment Failure': props<{ response: ApiResponse<null> }>(),

        // ✅ Load all detailed appointments for a patient
        'Load All Appointments By Patient Id': props<{ patient_id: number }>(),
        'Load All Appointments By Patient Id Success': props<{ detailedAppointments: DetailedAppointment[] }>(),
        'Load All Appointments By Patient Id Failure': props<{ error: string }>(),
    
  },
});


/* ===== File: src\app\ngrx\appointment\addappointment.effects.ts ===== */
import { Injectable } from '@angular/core';
import { createEffect, Actions, ofType } from '@ngrx/effects';

import { catchError, delay, map, mergeMap, of, switchMap } from 'rxjs';
import { AppointmentService } from 'src/app/services/appointment/addappointment.service';
import { AppointmentActions } from './addappointment.actions';
import { ApiResponse } from 'src/app/interfaces/addappointment.interface';
import { AlertActions } from '../reusablealerts/reusablealerts.actions';
import { ScheduleActions } from '../schedules/schedule.actions';
import { DentistActions } from '../dentist/dentist.actions';
import { decodeAccessToken } from 'src/app/services/auth/auth.utils';

@Injectable()
export class AppointmentEffects {
  constructor(private actions$: Actions, private appointmentService: AppointmentService) {}

  
  // ✅ Load all appointments
  loadAppointments$ = createEffect(() =>
    this.actions$.pipe(
      ofType(AppointmentActions.loadAppointments),
      mergeMap(() =>
        this.appointmentService.getAppointments().pipe(
          map((response) => AppointmentActions.loadAppointmentsSuccess({ appointments: response.data || [] })),
          catchError((error) => of(AppointmentActions.loadAppointmentsFailure({ error: error.message })))
        )
      )
    )
  );


  

  // ✅ Load appointment by ID
  loadAppointmentById$ = createEffect(() =>
    this.actions$.pipe(
      ofType(AppointmentActions.loadAppointmentById),
      mergeMap(({ id }) =>
        this.appointmentService.getAppointmentById(id).pipe(
          map(response => {
            if (!response.data) {
              throw new Error('No appointment data found');
            }
            return AppointmentActions.loadAppointmentByIdSuccess({ appointment: response.data });
          }),
          catchError(error => {
            console.error('Error fetching appointment by ID:', error);
            return of(AppointmentActions.loadAppointmentByIdFailure({ error: error.message || 'Unknown error' }));
          })
        )
      )
    )
  );

  // ✅ Load appointment by Patient ID
  loadAppointmentByPatientId$ = createEffect(() =>
    this.actions$.pipe(
      ofType(AppointmentActions.loadAppointmentByPatientId),
      mergeMap(({ id }) =>
        this.appointmentService.getAppointmentByPatientId(id).pipe(
          mergeMap(response => {
            if (!response.data) {
              throw new Error('No appointment found for this patient');
            }
            return [
              AppointmentActions.loadAppointmentByPatientIdSuccess({ appointment: response.data }), ];
          }),
          catchError(error => of(AppointmentActions.loadAppointmentByPatientIdFailure({ error: error.message || 'Unknown error' })))
        )
      )
    )
  );
  


  // ✅ Create appointment

  createAppointment$ = createEffect(() =>
    this.actions$.pipe(
      ofType(AppointmentActions.createAppointment),
      mergeMap(({ appointment, service_list_id }) =>
        this.appointmentService.createAppointment(appointment, service_list_id).pipe(
          mergeMap((response: ApiResponse<{ appointmentId: number }>) => {
            const userData = decodeAccessToken(); // ✅ Get user ID from JWT
  
            return [
              AppointmentActions.createAppointmentSuccess({ response }),
              AlertActions.setSuccess({ message: response.message }), // ✅ Show success alert
              ...(userData?.id 
                ? [AppointmentActions.loadAppointmentByPatientId({ id: userData.id })] 
                : []) // ✅ Refresh user's appointments list
            ];
          }),
          catchError((error) =>
            of(
              AppointmentActions.createAppointmentFailure({ 
                response: { message: 'Failed to create appointment', error: error.message, data: null }
              }),
              AlertActions.setError({ message: 'Failed to create appointment' }) // ❌ Show error alert
            )
          )
        )
      )
    )
  );

  createAppointmentSuccess$ = createEffect(() =>
  this.actions$.pipe(
    ofType(AppointmentActions.createAppointmentSuccess),
    map(({ response }) => {
      const userData = decodeAccessToken();
      if (userData?.id) {
        return AppointmentActions.loadAllAppointmentsByPatientId({ patient_id: userData.id });
      }
      return { type: 'NO_ACTION' };
    })
  )
);
  

  // ✅ Update appointment
  updateAppointment$ = createEffect(() =>
    this.actions$.pipe(
      ofType(AppointmentActions.updateAppointment),
      mergeMap(({ id, appointment }) =>
        this.appointmentService.updateAppointment(id, appointment).pipe(
          map((response) => AppointmentActions.updateAppointmentSuccess({ appointment: response.data! })),
          catchError((error) => of(AppointmentActions.updateAppointmentFailure({ error: error.message })))
        )
      )
    )
  );

  // ✅ Delete appointment
  deleteAppointment$ = createEffect(() =>
    this.actions$.pipe(
      ofType(AppointmentActions.deleteAppointment),
      mergeMap(({ id }) =>
        this.appointmentService.deleteAppointment(id).pipe(
          map(() => AppointmentActions.deleteAppointmentSuccess({ id })),
          catchError((error) => of(AppointmentActions.deleteAppointmentFailure({ error: error.message })))
        )
      )
    )
  );

    // ✅ Auto-clear success message after 3 seconds
    clearMessages$ = createEffect(() =>
      this.actions$.pipe(
        ofType(
          AppointmentActions.createAppointmentSuccess,
          AppointmentActions.updateAppointmentSuccess,
          AppointmentActions.cancelAppointmentSuccess
        ),
        delay(3000), // ✅ Wait 3 seconds
        map(() => AppointmentActions.clearMessage()) // ✅ Clear messages
      )
    );
    
      // ❌ Auto-clear error message after 3 seconds
      clearError$ = createEffect(() =>
        this.actions$.pipe(
          ofType(
            AppointmentActions.createAppointmentFailure,
            AppointmentActions.updateAppointmentFailure,
            AppointmentActions.cancelAppointmentFailure
          
          ),
          delay(3000), // ⏳ Wait for 3 seconds
          map(() => AppointmentActions.clearError())
        )
      );

    
      loadRelatedData$ = createEffect(() =>
        this.actions$.pipe(
          ofType(AppointmentActions.loadAppointmentByPatientIdSuccess), // Listen for appointment success
          mergeMap(({ appointment }) => {
            return [
              ScheduleActions.loadScheduleById({ schedule_id: appointment.schedule_id }), // Fetch schedule
              DentistActions.loadDentist({ id: appointment.dentist_id }), // Fetch dentist
              ScheduleActions.loadTimeSlotByTimeslotId({ timeslot_id: appointment.timeslot_id }) // Fetch timeslots

            ];
          })
        )
      );

      // ✅ Effect: Cancel Appointment
      cancelAppointment$ = createEffect(() =>
        this.actions$.pipe(
          ofType(AppointmentActions.cancelAppointment),
          switchMap(({ id }) =>
            this.appointmentService.cancelAppointment(id).pipe(
              map((response) =>
                AppointmentActions.cancelAppointmentSuccess({ response })
              ),
              catchError((error) =>
                of(AppointmentActions.cancelAppointmentFailure({
                  response: { message: 'Failed to cancel appointment.', error: error.message, data: null }
                }))
              )
            )
          )
        )
      );
      
      /** ✅ Automatically Refresh Appointment for Logged-in User */
      cancelAppointmentSuccess$ = createEffect(() =>
        this.actions$.pipe(
          ofType(AppointmentActions.cancelAppointmentSuccess),
          map(({ response }) => {
            const userData = decodeAccessToken(); // Get user ID
            if (userData?.id) {
              return AppointmentActions.loadAllAppointmentsByPatientId({ patient_id: userData.id });
            }
            return { type: 'NO_ACTION' }; // Avoid errors if no user is found
          })
        )
      );


        // ✅ Effect: Load All Appointments By Patient ID
  loadAllAppointmentsByPatientId$ = createEffect(() =>
    this.actions$.pipe(
      ofType(AppointmentActions.loadAllAppointmentsByPatientId),
      mergeMap(({ patient_id }) =>
        this.appointmentService.getAllAppointmentsByPatientId(patient_id).pipe(
          map((response) =>
            AppointmentActions.loadAllAppointmentsByPatientIdSuccess({ detailedAppointments: response.data || [] })
          ),
          catchError((error) =>
            of(AppointmentActions.loadAllAppointmentsByPatientIdFailure({ error: error.message }))
          )
        )
      )
    )
  );
      
}


/* ===== File: src\app\ngrx\appointment\addappointment.reducers.ts ===== */
import { createFeature, createReducer, on } from '@ngrx/store';
import { Appointment, DetailedAppointment } from 'src/app/interfaces/addappointment.interface';
import { AppointmentActions } from './addappointment.actions';


// ✅ Define Appointment State
export interface AppointmentState {
  isLoading: boolean;
  appointments: Appointment[];
  selectedAppointment: Appointment | null;
  selectedAppointmentPatient: Appointment | null;
  allAppointments: Appointment[]; // ✅ Stores multiple appointments
  detailedAppointments: DetailedAppointment[];
  error: string | null;
  message: string | null;
}

export const initialAppointmentState: AppointmentState = {
  isLoading: false,
  appointments: [],
  selectedAppointment: null,
  selectedAppointmentPatient:  null,
  allAppointments: [], // ✅ Holds multiple appointments
  detailedAppointments: [],
  error: null,
  message: null
};

// ✅ Define Feature Reducer
export const appointmentFeature = createFeature({
  name: 'appointment',
  reducer: createReducer(
    initialAppointmentState,

    // ✅ Load all appointments
    on(AppointmentActions.loadAppointments, (state) => ({
      ...state,
      isLoading: true,
      error: null,
    })),
    on(AppointmentActions.loadAppointmentsSuccess, (state, { appointments }) => ({
      ...state,
      isLoading: false,
      appointments,
      error: null,
    })),
    on(AppointmentActions.loadAppointmentsFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      error,
    })),

    // ✅ Load appointment by ID
    on(AppointmentActions.loadAppointmentById, (state) => ({
      ...state,
      isLoading: true,
      selectedAppointment: null,
      error: null,
    })),
    on(AppointmentActions.loadAppointmentByIdSuccess, (state, { appointment }) => ({
      ...state,
      isLoading: false,
      selectedAppointment: appointment,
      error: null,
    })),
    on(AppointmentActions.loadAppointmentByIdFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      selectedAppointment: null,
      error,
    })),

    // ✅ Create appointment
    // ✅ Create appointment
    on(AppointmentActions.createAppointment, (state) => ({
        ...state,
        isLoading: true,
        message: null,
        error: null,
      })),
  
      // ✅ Store API response
      on(AppointmentActions.createAppointmentSuccess, (state, { response }) => ({
        ...state,
        isLoading: false,
        appointmentId: response.data?.appointmentId ?? null,
        message: response.message,
        error: null,
      })),
  
      // ✅ Store error response
      on(AppointmentActions.createAppointmentFailure, (state, { response }) => ({
        ...state,
        isLoading: false,
        appointmentId: null,
        message: response.message,
        error: response.error ?? null,
      })),

    // ✅ Update appointment
    on(AppointmentActions.updateAppointment, (state) => ({
      ...state,
      isLoading: true,
      error: null,
    })),
    on(AppointmentActions.updateAppointmentSuccess, (state, { appointment }) => ({
      ...state,
      isLoading: false,
      selectedAppointment: appointment,
      error: null,
    })),
    on(AppointmentActions.updateAppointmentFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      error,
    })),

    // ✅ Delete appointment
    on(AppointmentActions.deleteAppointment, (state) => ({
      ...state,
      isLoading: true,
      error: null,
    })),
    on(AppointmentActions.deleteAppointmentSuccess, (state, { id }) => ({
      ...state,
      isLoading: false,
      appointments: state.appointments.filter((appointment) => appointment.id !== id),
      selectedAppointment: state.selectedAppointment?.id === id ? null : state.selectedAppointment,
      error: null,
    })),
    on(AppointmentActions.deleteAppointmentFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      error,
    })),

      // ✅ Load Appointment by Patient ID
  on(AppointmentActions.loadAppointmentByPatientId, (state) => ({
    ...state,
    isLoading: true,
    error: null,
  })),
  on(AppointmentActions.loadAppointmentByPatientIdSuccess, (state, { appointment }) => ({
    ...state,
    isLoading: false,
    selectedAppointmentPatient: appointment,
    error: null,
  })),
  on(AppointmentActions.loadAppointmentByPatientIdFailure, (state, { error }) => ({
    ...state,
    isLoading: false,
    selectedAppointmentPatient: null,
    error,
  })),

  // ✅ Cancel Appointment - Sets loading state
on(AppointmentActions.cancelAppointment, (state) => ({
  ...state,
  isLoading: true,
  error: null,
})),

// ✅ Cancel Appointment Success - Updates the state with 'canceled' status
on(AppointmentActions.cancelAppointmentSuccess, (state, { response }) => ({
  ...state,
  isLoading: false,
  message: response.message,
  error: null,
  appointments: state.appointments.map((appt) =>
    appt.id === response.data?.appointmentId
      ? { ...appt, status: "canceled" as "canceled" } // ✅ Explicitly set type
      : appt
  ),
  selectedAppointment: state.selectedAppointment?.id === response.data?.appointmentId
    ? {
        ...(state.selectedAppointment as Appointment), // ✅ Ensures correct type
        status: "canceled" as "canceled",
      }
    : state.selectedAppointment,
})),


// ✅ Cancel Appointment Failure - Stores error message
on(AppointmentActions.cancelAppointmentFailure, (state, { response }) => ({
  ...state,
  isLoading: false,
  error: response.message,
})),

  
    
        // ✅ Clears only the success message
        on(AppointmentActions.clearMessage, (state) => ({
            ...state,
            message: null,
          })),
      
          // ❌ Clears only the error message
          on(AppointmentActions.clearError, (state) => ({
            ...state,
            error: null,
          })),

              // ✅ Load All Appointments By Patient ID
    on(AppointmentActions.loadAllAppointmentsByPatientId, (state) => ({
      ...state,
      isLoading: true,
      error: null,
    })),
    on(AppointmentActions.loadAllAppointmentsByPatientIdSuccess, (state, { detailedAppointments }) => ({
      ...state,
      isLoading: false,
      detailedAppointments,
      error: null,
    })),
    on(AppointmentActions.loadAllAppointmentsByPatientIdFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      error,
    }))

  ),
});

// ✅ Export Selectors & Reducer
export const {
  name: appointmentFeatureKey,
  reducer: appointmentReducer,
  selectIsLoading,
  selectAppointments,
  selectSelectedAppointment,
  selectError,
  selectMessage,
  selectSelectedAppointmentPatient,
  selectAllAppointments,
  selectDetailedAppointments
} = appointmentFeature;


/* ===== File: src\app\ngrx\appointment\addappointment.selectors.ts ===== */
import { createSelector } from '@ngrx/store';
import { appointmentFeature } from './addappointment.reducers';

// ✅ Select all appointments from the store
export const selectAppointments = createSelector(
  appointmentFeature.selectAppointments,
  (appointments) => appointments
);

// ✅ Find appointment by `patient_id`
export const selectAppointmentByPatientId = (patientId: number) =>
  createSelector(selectAppointments, (appointments) =>
    appointments.find(appointment => appointment.patient_id === patientId) || null
  );

// ✅ Extract `appointment_id` using `patient_id`
export const selectAppointmentIdByPatientId = (patientId: number) =>
  createSelector(selectAppointmentByPatientId(patientId), (appointment) =>
    appointment?.id ?? null // Ensures no `undefined` value
  );


/* ===== File: src\app\ngrx\dentist\dentist.actions.ts ===== */
import { createActionGroup, emptyProps, props } from '@ngrx/store';
import { Dentist, DentistResponse, DentistsListResponse } from 'src/app/interfaces/dentist.interface';

export const DentistActions = createActionGroup({
  source: 'Dentists',
  events: {
    // ✅ Load all dentists
    'Load Dentists': emptyProps(),
    'Load Dentists Success': props<{ dentistsResponse: DentistsListResponse }>(),
    'Load Dentists Failure': props<{ error: string }>(),

    // ✅ Load a specific dentist
    'Load Dentist': props<{ id: number }>(),
    'Load Dentist Success': props<{ dentistResponse: DentistResponse }>(),
    'Load Dentist Failure': props<{ error: string }>(),

    // ✅ Create a new dentist
    'Create Dentist': props<{ dentistData: Partial<Dentist> }>(),
    'Create Dentist Success': props<{ createdDentist: Dentist }>(),
    'Create Dentist Failure': props<{ error: string }>(),

    // ✅ Update a dentist
    'Update Dentist': props<{ id: number; updateData: Partial<Dentist> }>(),
    'Update Dentist Success': props<{ updatedDentist: Dentist }>(),
    'Update Dentist Failure': props<{ error: string }>(),

    // ✅ Delete a dentist
    'Delete Dentist': props<{ id: number }>(),
    'Delete Dentist Success': props<{ id: number }>(),
    'Delete Dentist Failure': props<{ error: string }>(),

    // ✅ Clear Errors
    'Clear Error': emptyProps(),
  },
});


/* ===== File: src\app\ngrx\dentist\dentist.effects.ts ===== */
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { DentistActions } from './dentist.actions';
import { catchError, map, mergeMap, of } from 'rxjs';
import { DentistService } from 'src/app/services/dentist/dentist.service';


@Injectable()
export class DentistEffects {
  constructor(private actions$: Actions, private dentistService: DentistService) {}

  // ✅ Load all dentists
  loadDentists$ = createEffect(() =>
    this.actions$.pipe(
      ofType(DentistActions.loadDentists),
      mergeMap(() =>
        this.dentistService.getDentists().pipe(
          map((response) => DentistActions.loadDentistsSuccess({ dentistsResponse: response })),
          catchError((error) => of(DentistActions.loadDentistsFailure({ error: error.message })))
        )
      )
    )
  );

  // ✅ Load a specific dentist
  loadDentist$ = createEffect(() =>
    this.actions$.pipe(
      ofType(DentistActions.loadDentist),
      mergeMap(({ id }) =>
        this.dentistService.getDentistById(id).pipe(
          map((dentistResponse) => DentistActions.loadDentistSuccess({ dentistResponse })),
          catchError((error) =>
            of(DentistActions.loadDentistFailure({ error: error.error?.message || 'Failed to load dentist.' }))
          )
        )
      )
    )
  );

  // ✅ Create a new dentist (Admin only)
  createDentist$ = createEffect(() =>
    this.actions$.pipe(
      ofType(DentistActions.createDentist),
      mergeMap(({ dentistData }) =>
        this.dentistService.createDentist(dentistData).pipe(
          map((response) => {
            if (!response.data) {
              return DentistActions.createDentistFailure({ error: response.message || 'Failed to create dentist.' });
            }
            return DentistActions.createDentistSuccess({ createdDentist: response.data });
          }),
          catchError((error) =>
            of(DentistActions.createDentistFailure({ error: error.error?.message || 'Failed to create dentist.' }))
          )
        )
      )
    )
  );

  // ✅ Update dentist details
  updateDentist$ = createEffect(() =>
    this.actions$.pipe(
      ofType(DentistActions.updateDentist),
      mergeMap(({ id, updateData }) =>
        this.dentistService.updateDentist(id, updateData).pipe(
          map((response) => {
            if (!response.data) {
              return DentistActions.updateDentistFailure({ error: response.message || 'Failed to update dentist.' });
            }
            return DentistActions.updateDentistSuccess({ updatedDentist: response.data });
          }),
          catchError((error) =>
            of(DentistActions.updateDentistFailure({ error: error.error?.message || 'Failed to update dentist.' }))
          )
        )
      )
    )
  );

  // ✅ Delete dentist (Admin only)
  deleteDentist$ = createEffect(() =>
    this.actions$.pipe(
      ofType(DentistActions.deleteDentist),
      mergeMap(({ id }) =>
        this.dentistService.deleteDentist(id).pipe(
          map(() => DentistActions.deleteDentistSuccess({ id })),
          catchError((error) =>
            of(DentistActions.deleteDentistFailure({ error: error.error?.message || 'Failed to delete dentist.' }))
          )
        )
      )
    )
  );
}


/* ===== File: src\app\ngrx\dentist\dentist.reducers.ts ===== */
import { createFeature, createReducer, on } from '@ngrx/store';
import { DentistActions } from './dentist.actions';
import { Dentist } from 'src/app/interfaces/dentist.interface';

export interface DentistState {
  isLoading: boolean;
  dentists: Dentist[];
  selectedDentist: Dentist | null;
  error: string | null;
}

export const initialDentistState: DentistState = {
  isLoading: false,
  dentists: [],
  selectedDentist: null,
  error: null,
};

export const dentistFeature = createFeature({
  name: 'dentists',
  reducer: createReducer(
    initialDentistState,

    // ✅ Load all dentists
    on(DentistActions.loadDentists, (state) => ({
      ...state,
      isLoading: true,
      error: null,
    })),
    on(DentistActions.loadDentistsSuccess, (state, { dentistsResponse }) => ({
      ...state,
      isLoading: false,
      dentists: dentistsResponse.data,
      error: null,
    })),
    on(DentistActions.loadDentistsFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      error,
    })),

    // ✅ Load a specific dentist
    on(DentistActions.loadDentist, (state) => ({
      ...state,
      isLoading: true,
      selectedDentist: null,
      error: null,
    })),
    on(DentistActions.loadDentistSuccess, (state, { dentistResponse }) => ({
      ...state,
      isLoading: false,
      selectedDentist: dentistResponse.data,
      error: null,
    })),
    on(DentistActions.loadDentistFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      selectedDentist: null,
      error,
    })),

    // ✅ Create a dentist
    on(DentistActions.createDentistSuccess, (state, { createdDentist }) => ({
      ...state,
      dentists: [...state.dentists, createdDentist],
      error: null,
    })),

    // ✅ Update a dentist
    on(DentistActions.updateDentistSuccess, (state, { updatedDentist }) => ({
      ...state,
      dentists: state.dentists.map(dentist =>
        dentist.user_id === updatedDentist.user_id ? updatedDentist : dentist
      ),
      selectedDentist: updatedDentist,
      error: null,
    })),

    // ✅ Delete a dentist
    on(DentistActions.deleteDentistSuccess, (state, { id }) => ({
      ...state,
      dentists: state.dentists.filter(dentist => dentist.user_id !== id),
      selectedDentist: null,
      error: null,
    })),

    on(DentistActions.clearError, (state) => ({
      ...state,
      error: null,
    }))
  ),
});

export const {
  name: dentistFeatureKey,
  reducer: dentistReducer,
  selectIsLoading,
  selectDentists,
  selectSelectedDentist,
  selectError,
} = dentistFeature;


/* ===== File: src\app\ngrx\patients\patients.actions.ts ===== */
import { createActionGroup, emptyProps, props } from '@ngrx/store';
import { Patient, PatientResponse, PatientsListResponse } from 'src/app/interfaces/patient_details.interface';


export const PatientsActions = createActionGroup({
  source: 'Patients',
  events: {
    'Load Patients': emptyProps(),
    'Load Patients Success': props<{ patientsResponse: PatientsListResponse }>(),
    'Load Patients Failure': props<{ error: string }>(),

    'Load Patient': props<{ id: number }>(),
    'Load Patient Success': props<{ patient: PatientResponse }>(), 
    'Load Patient Failure': props<{ error: string }>(),

    'Update Patient': props<{ id: number; updateData: Partial<Patient> }>(), // ✅ Allows partial updates
    'Update Patient Success': props<{ updatedPatient: Patient }>(),
    'Update Patient Failure': props<{ error: string }>(),

    'Clear Error': emptyProps(),
  }
});


/* ===== File: src\app\ngrx\patients\patients.effects.ts ===== */
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { PatientsActions } from './patients.actions';
import { catchError, map, mergeMap, of } from 'rxjs';
import { PatientsService } from 'src/app/services/patients/patient_details.service';

@Injectable()
export class PatientsEffects {
  constructor(private actions$: Actions, private patientsService: PatientsService) {}

  // ✅ Load all patients
  loadPatients$ = createEffect(() =>
    this.actions$.pipe(
      ofType(PatientsActions.loadPatients),
      mergeMap(() =>
        this.patientsService.getPatients().pipe(
          map((response) => PatientsActions.loadPatientsSuccess({ patientsResponse: response })),
          catchError((error) => of(PatientsActions.loadPatientsFailure({ error: error.message })))
        )
      )
    )
  );

  // ✅ Load a specific patient
  loadPatient$ = createEffect(() =>
    this.actions$.pipe(
      ofType(PatientsActions.loadPatient),
      mergeMap(({ id }) =>
        this.patientsService.getPatientByUserId(id).pipe(
          map((patient) => { // ✅ Renamed response to patient
            if (!patient.data) {
              return PatientsActions.loadPatientFailure({ error: patient.message || 'Patient not found.' });
            }
            return PatientsActions.loadPatientSuccess({ patient }); // ✅ Correct property name
          }),
          catchError((error) =>
            of(
              PatientsActions.loadPatientFailure({
                error: error.error?.message || 'Failed to load patient.',
              })
            )
          )
        )
      )
    )
  );
  

// ✅ Update patient effect
//   updatePatient$ = createEffect(() =>
//     this.actions$.pipe(
//       ofType(PatientsActions.updatePatient),
//       mergeMap(({ id, updateData }) =>
//         this.patientsService.updatePatient(id, updateData).pipe(
//           map((updatedPatient) => PatientsActions.updatePatientSuccess({ updatedPatient })),
//           catchError((error) => of(PatientsActions.updatePatientFailure({ error: error.message })))
//         )
//       )
//     )
//   );
}


/* ===== File: src\app\ngrx\patients\patients.reducers.ts ===== */
import { createFeature, createReducer, on } from '@ngrx/store';
import { PatientsActions } from './patients.actions';
import { Patient } from 'src/app/interfaces/patient_details.interface';


export interface PatientsState {
  isLoading: boolean;
  patients: Patient[];
  selectedPatient: Patient | null;
  error: string | null;
}

export const initialPatientsState: PatientsState = {
  isLoading: false,
  patients: [],
  selectedPatient: null,
  error: null,
};

export const patientsFeature = createFeature({
  name: 'patients',
  reducer: createReducer(
    initialPatientsState,

    // ✅ Load all patients
    on(PatientsActions.loadPatients, (state) => ({
      ...state,
      isLoading: true,
      error: null,
    })),
    on(PatientsActions.loadPatientsSuccess, (state, { patientsResponse }) => ({
      ...state,
      isLoading: false,
      patients: patientsResponse.data, // ✅ Always store `data`
      error: null,
    })),
    on(PatientsActions.loadPatientsFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      error,
    })),

    // ✅ Load a specific patient
    on(PatientsActions.loadPatient, (state) => ({
      ...state,
      isLoading: true,
      selectedPatient: null, // ✅ Reset before loading
      error: null,
    })),
    on(PatientsActions.loadPatientSuccess, (state, { patient }) => ({
      ...state,
      isLoading: false,
      selectedPatient: patient.data, // 
      error: null,
    })),
    on(PatientsActions.loadPatientFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      selectedPatient: null, // ✅ Ensure no patient remains selected on failure
      error,
    })),

    on(PatientsActions.updatePatient, (state) => ({
      ...state,
      isLoading: true,
      error: null,
    })),
    on(PatientsActions.updatePatientSuccess, (state, { updatedPatient }) => ({
      ...state,
      isLoading: false,
      patients: state.patients.map(patient =>
        patient.user_id === updatedPatient.user_id ? updatedPatient : patient
      ),
      selectedPatient: updatedPatient,
      error: null,
    })),
    on(PatientsActions.updatePatientFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      error,
    })),

    on(PatientsActions.clearError, (state) => ({
      ...state,
      error: null,
    }))
  ),
});

export const {
  name: patientsFeatureKey,
  reducer: patientsReducer,
  selectIsLoading,
  selectPatients,
  selectSelectedPatient,
  selectError,
} = patientsFeature;


/* ===== File: src\app\ngrx\prescription\prescription.actions.ts ===== */
import { createActionGroup, emptyProps, props } from "@ngrx/store";
import { Prescription, PrescriptionResponse, PrescriptionsResponse } from "src/app/interfaces/prescription.interface";

export const PrescriptionsActions = createActionGroup({
    source: 'Prescriptions',
    events: {
      'Load Prescriptions': emptyProps(),
      'Load Prescriptions Success': props<{ prescriptionsResponse: PrescriptionsResponse }>(),
      'Load Prescriptions Failure': props<{ error: string }>(),
      'Load Prescription By Id': props<{ id: number }>(),
      'Load Prescription By Id Success': props<{ prescriptionResponse: PrescriptionResponse }>(),
      'Load Prescription By Id Failure': props<{ error: string }>(),
      'Load Prescriptions By Patient Id': props<{ patientId: number }>(),
      'Load Prescriptions By Patient Id Success': props<{ prescriptionsResponse: PrescriptionsResponse }>(),
      'Load Prescriptions By Patient Id Failure': props<{ error: string }>(),
      'Create Prescription': props<{ prescription: Omit<Prescription, 'id' | 'created_at' | 'updated_at'> }>(),
      'Create Prescription Success': props<{ prescriptionResponse: PrescriptionResponse }>(),
      'Create Prescription Failure': props<{ error: string }>(),
      'Update Prescription': props<{ id: number; prescription: Partial<Omit<Prescription, 'created_at' | 'updated_at'>> }>(),
      'Update Prescription Success': props<{ prescriptionResponse: PrescriptionResponse }>(),
      'Update Prescription Failure': props<{ error: string }>(),
      'Delete Prescription': props<{ id: number }>(),
      'Delete Prescription Success': props<{ id: number; message: string }>(),
      'Delete Prescription Failure': props<{ error: string }>(),
    },
  });


/* ===== File: src\app\ngrx\prescription\prescription.effects.ts ===== */
import { Injectable } from "@angular/core";
import { Actions, createEffect, ofType } from "@ngrx/effects";
import { PrescriptionsService } from "src/app/services/prescription/prescription.service";
import { catchError, map, mergeMap, of, switchMap } from "rxjs";
import { PrescriptionsActions } from "./prescription.actions";

@Injectable()
export class PrescriptionsEffects {
  constructor(private actions$: Actions, private service: PrescriptionsService) {}

  // Load all prescriptions
  loadPrescriptions$ = createEffect(() =>
    this.actions$.pipe(
      ofType(PrescriptionsActions.loadPrescriptions),
      switchMap(() =>
        this.service.getPrescriptions().pipe(
          map(prescriptionsResponse =>
            PrescriptionsActions.loadPrescriptionsSuccess({ prescriptionsResponse })
          ),
          catchError(error =>
            of(PrescriptionsActions.loadPrescriptionsFailure({ error: error.message }))
          )
        )
      )
    )
  );

  // Load prescriptions by patient ID (New Effect)
  loadPrescriptionsByPatientId$ = createEffect(() =>
    this.actions$.pipe(
      ofType(PrescriptionsActions.loadPrescriptionsByPatientId),
      switchMap(({ patientId }) =>
        this.service.getPrescriptionsByPatientId(patientId).pipe(
          map(prescriptionsResponse =>
            PrescriptionsActions.loadPrescriptionsByPatientIdSuccess({ prescriptionsResponse })
          ),
          catchError(error =>
            of(PrescriptionsActions.loadPrescriptionsByPatientIdFailure({ error: error.message }))
          )
        )
      )
    )
  );

  // Load a specific prescription by ID
  loadPrescriptionById$ = createEffect(() =>
    this.actions$.pipe(
      ofType(PrescriptionsActions.loadPrescriptionById),
      switchMap(({ id }) =>
        this.service.getPrescriptionById(id).pipe(
          map(prescriptionResponse =>
            PrescriptionsActions.loadPrescriptionByIdSuccess({ prescriptionResponse })
          ),
          catchError(error =>
            of(PrescriptionsActions.loadPrescriptionByIdFailure({ error: error.message }))
          )
        )
      )
    )
  );

  // Create a new prescription
  createPrescription$ = createEffect(() =>
    this.actions$.pipe(
      ofType(PrescriptionsActions.createPrescription),
      mergeMap(({ prescription }) =>
        this.service.createPrescription(prescription).pipe(
          map(prescriptionResponse =>
            PrescriptionsActions.createPrescriptionSuccess({ prescriptionResponse })
          ),
          catchError(error =>
            of(PrescriptionsActions.createPrescriptionFailure({ error: error.message }))
          )
        )
      )
    )
  );

  // Update an existing prescription
  updatePrescription$ = createEffect(() =>
    this.actions$.pipe(
      ofType(PrescriptionsActions.updatePrescription),
      mergeMap(({ id, prescription }) =>
        this.service.updatePrescription(id, prescription).pipe(
          map(prescriptionResponse =>
            PrescriptionsActions.updatePrescriptionSuccess({ prescriptionResponse })
          ),
          catchError(error =>
            of(PrescriptionsActions.updatePrescriptionFailure({ error: error.message }))
          )
        )
      )
    )
  );

  // Delete a prescription
  deletePrescription$ = createEffect(() =>
    this.actions$.pipe(
      ofType(PrescriptionsActions.deletePrescription),
      mergeMap(({ id }) =>
        this.service.deletePrescription(id).pipe(
          map(({ message }) =>
            PrescriptionsActions.deletePrescriptionSuccess({ id, message })
          ),
          catchError(error =>
            of(PrescriptionsActions.deletePrescriptionFailure({ error: error.message }))
          )
        )
      )
    )
  );
}


/* ===== File: src\app\ngrx\prescription\prescription.reducers.ts ===== */
import { createFeature, createReducer, on } from '@ngrx/store';
import { Prescription } from 'src/app/interfaces/prescription.interface';
import { PrescriptionsActions } from './prescription.actions';

export interface PrescriptionsState {
  isLoading: boolean;
  prescriptions: Prescription[];
  selectedPrescription: Prescription | null;
  prescriptionsByPatient: Prescription[];
  error: string | null;
  deleteMessage: string | null;
}

export const initialPrescriptionsState: PrescriptionsState = {
  isLoading: false,
  prescriptions: [],
  selectedPrescription: null,
  prescriptionsByPatient: [],
  error: null,
  deleteMessage: null,
};

export const prescriptionsFeature = createFeature({
  name: 'prescriptions',
  reducer: createReducer(
    initialPrescriptionsState,

    // Load all prescriptions
    on(PrescriptionsActions.loadPrescriptions, (state) => ({
      ...state,
      isLoading: true,
      error: null,
    })),
    on(PrescriptionsActions.loadPrescriptionsSuccess, (state, { prescriptionsResponse }) => ({
      ...state,
      isLoading: false,
      prescriptions: prescriptionsResponse.data,
      error: null,
    })),
    on(PrescriptionsActions.loadPrescriptionsFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      error,
    })),

    // Load prescription by ID
    on(PrescriptionsActions.loadPrescriptionById, (state) => ({
      ...state,
      isLoading: true,
      selectedPrescription: null,
      error: null,
    })),
    on(PrescriptionsActions.loadPrescriptionByIdSuccess, (state, { prescriptionResponse }) => ({
      ...state,
      isLoading: false,
      selectedPrescription: prescriptionResponse.data,
      error: null,
    })),
    on(PrescriptionsActions.loadPrescriptionByIdFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      selectedPrescription: null,
      error,
    })),

    // Load prescriptions by Patient ID
    on(PrescriptionsActions.loadPrescriptionsByPatientId, (state) => ({
      ...state,
      isLoading: true,
      error: null,
    })),
    on(PrescriptionsActions.loadPrescriptionsByPatientIdSuccess, (state, { prescriptionsResponse }) => ({
      ...state,
      isLoading: false,
      prescriptionsByPatient: prescriptionsResponse.data,
      error: null,
    })),
    on(PrescriptionsActions.loadPrescriptionsByPatientIdFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      error,
    })),

    // Create a prescription
    on(PrescriptionsActions.createPrescription, (state) => ({
      ...state,
      isLoading: true,
      error: null,
    })),
    on(PrescriptionsActions.createPrescriptionSuccess, (state, { prescriptionResponse }) => ({
      ...state,
      isLoading: false,
      prescriptions: [...state.prescriptions, prescriptionResponse.data],
      error: null,
    })),
    on(PrescriptionsActions.createPrescriptionFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      error,
    })),

    // Update a prescription
    on(PrescriptionsActions.updatePrescription, (state) => ({
      ...state,
      isLoading: true,
      error: null,
    })),
    on(PrescriptionsActions.updatePrescriptionSuccess, (state, { prescriptionResponse }) => ({
      ...state,
      isLoading: false,
      prescriptions: state.prescriptions.map(p =>
        p.id === prescriptionResponse.data.id ? prescriptionResponse.data : p
      ),
      error: null,
    })),
    on(PrescriptionsActions.updatePrescriptionFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      error,
    })),

    // Delete a prescription
    on(PrescriptionsActions.deletePrescription, (state) => ({
      ...state,
      isLoading: true,
      error: null,
    })),
    on(PrescriptionsActions.deletePrescriptionSuccess, (state, { id, message }) => ({
      ...state,
      isLoading: false,
      prescriptions: state.prescriptions.filter(p => p.id !== id),
      selectedPrescription: state.selectedPrescription?.id === id ? null : state.selectedPrescription,
      deleteMessage: message,
      error: null,
    })),
    on(PrescriptionsActions.deletePrescriptionFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      error,
    })),
  ),
});

export const {
  name: prescriptionsFeatureKey,
  reducer: prescriptionsReducer,
  selectIsLoading,
  selectPrescriptions,
  selectSelectedPrescription,
  selectPrescriptionsByPatient,
  selectError,
  selectDeleteMessage
} = prescriptionsFeature;


/* ===== File: src\app\ngrx\reusablealerts\reusablealerts.actions.ts ===== */
import { createActionGroup, emptyProps, props } from '@ngrx/store';

export const AlertActions = createActionGroup({
  source: 'Alerts',
  events: {
'Set Success': props<{ message: string }>(),  // ✅ Set success message
    'Set Error': props<{ message: string }>(),    // ❌ Set error message
    'Set Warning': props<{ message: string }>(),  // ⚠️ Set warning message (NEW)
    'Set Info': props<{ message: string }>(),     // ℹ️ Set info message (NEW)
    'Clear Success': emptyProps(),                // ✅ Clear success message
    'Clear Error': emptyProps(),                  // ❌ Clear error message
    'Clear Warning': emptyProps(),                // ⚠️ Clear warning message (NEW)
    'Clear Info': emptyProps()                    // ℹ️ Clear info message (NEW)
    
  }
});


/* ===== File: src\app\ngrx\reusablealerts\reusablealerts.effects.ts ===== */
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { delay, map } from 'rxjs/operators';
import { AlertActions } from './reusablealerts.actions';

@Injectable()
export class AlertEffects {
  constructor(private actions$: Actions) {}

 // ✅ Auto-clear success message after 3 seconds
 clearSuccess$ = createEffect(() =>
  this.actions$.pipe(
    ofType(AlertActions.setSuccess),
    delay(3000),
    map(() => AlertActions.clearSuccess())
  )
);

// ❌ Auto-clear error message after 3 seconds
clearError$ = createEffect(() =>
  this.actions$.pipe(
    ofType(AlertActions.setError),
    delay(3000),
    map(() => AlertActions.clearError())
  )
);

// ⚠️ Auto-clear warning message after 3 seconds
clearWarning$ = createEffect(() =>
  this.actions$.pipe(
    ofType(AlertActions.setWarning),
    delay(3000),
    map(() => AlertActions.clearWarning())
  )
);

// ℹ️ Auto-clear info message after 3 seconds
clearInfo$ = createEffect(() =>
  this.actions$.pipe(
    ofType(AlertActions.setInfo),
    delay(3000),
    map(() => AlertActions.clearInfo())
  )
);
}


/* ===== File: src\app\ngrx\reusablealerts\reusablealerts.reducers.ts ===== */
import { createFeature, createReducer, on } from '@ngrx/store';
import { AlertActions } from './reusablealerts.actions';


export interface AlertState {
  successMessage: string | null;
  errorMessage: string | null;
  warningMessage: string | null; // ⚠️ NEW
  infoMessage: string | null;    // ℹ️ NEW
}


export const initialAlertState: AlertState = {
  successMessage: null,
  errorMessage: null,
  warningMessage: null, // ⚠️ NEW
  infoMessage: null     // ℹ️ NEW
};


export const alertFeature = createFeature({
  name: 'alert',
  reducer: createReducer(
    initialAlertState,

    // ✅ Set success message
    on(AlertActions.setSuccess, (state, { message }) => ({
      ...state,
      successMessage: message
    })),

    // ❌ Set error message
    on(AlertActions.setError, (state, { message }) => ({
      ...state,
      errorMessage: message
    })),

    // ⚠️ Set warning message
    on(AlertActions.setWarning, (state, { message }) => ({
      ...state,
      warningMessage: message
    })),

    // ℹ️ Set info message
    on(AlertActions.setInfo, (state, { message }) => ({
      ...state,
      infoMessage: message
    })),

    // ✅ Clear success message
    on(AlertActions.clearSuccess, (state) => ({
      ...state,
      successMessage: null
    })),

    // ❌ Clear error message
    on(AlertActions.clearError, (state) => ({
      ...state,
      errorMessage: null
    })),

    // ⚠️ Clear warning message
    on(AlertActions.clearWarning, (state) => ({
      ...state,
      warningMessage: null
    })),

    // ℹ️ Clear info message
    on(AlertActions.clearInfo, (state) => ({
      ...state,
      infoMessage: null
    }))
  ),
});

export const {
  name: alertFeatureKey,
  reducer: alertReducer,
  selectSuccessMessage,
  selectErrorMessage,
  selectInfoMessage,
  selectWarningMessage
} = alertFeature;


/* ===== File: src\app\ngrx\schedules\schedule.actions.ts ===== */
import { createActionGroup, emptyProps, props } from '@ngrx/store';
import { Schedule, ScheduleResponse, SchedulesResponse, TimeslotIdResponse, TimeSlotsResponse } from 'src/app/interfaces/schedule.interface';


export const ScheduleActions = createActionGroup({
  source: 'Schedules',
  events: {
    'Load Schedules': emptyProps(),
    'Load Schedules Success': props<{ schedulesResponse: SchedulesResponse}>(),
    'Load Schedules Failure': props<{ error: string }>(),

    'Load Schedule by Id': props<{schedule_id: number}>(),
    'Load Schedule by Id Success': props<{ scheduleResponse: ScheduleResponse}>(),
    'Load Schedule by Id Failure': props<{ error: string }>(),

    'Load Schedules by Dentist': props<{ dentistId: number }>(),
    'Load Schedules by Dentist Success': props<{ schedulesResponse: SchedulesResponse }>(),
    'Load Schedules by Dentist Failure': props<{ error: string }>(),


    'Create Schedule': props<{ createSchedule: Partial<Schedule> }>(),
    'Create Schedule Success': props<{ createdSchedule: ScheduleResponse }>(),
    'Create Schedule Failure': props<{ error: string }>(),

    'Delete Schedule': props<{ id: number }>(),
    'Delete Schedule Success': props<{ message: string}>(),
    'Delete Schedule Failure': props<{ error: string }>(),

    'Load Time Slots': props<{ scheduleId: number }>(),
    'Load Time Slots Success': props<{ timeSlotsResponse: TimeSlotsResponse }>(),
    'Load Time Slots Failure': props<{ error: string }>(),

    'Load All Time Slots By Id': props<{ scheduleId: number }>(),
    'Load All Time Slots By Id Success': props<{ timeSlotsResponse: TimeSlotsResponse }>(),
    'Load All Time Slots By Id Failure': props<{ error: string }>(),

    'Load All Time Slots': emptyProps(),
    'Load All Time Slots Success': props<{ timeSlotsResponse: TimeSlotsResponse }>(),
    'Load All Time Slots Failure': props<{ error: string }>(),

    'Load Time Slot by Timeslot Id': props<{ timeslot_id: number }>(),
    'Load Time by Timeslot Id Success': props<{ timeSlotsResponse: TimeslotIdResponse }>(),
    'Load Time by Timeslot Id Failure': props<{ error: string }>(),
  }
});

/* ===== File: src\app\ngrx\schedules\schedules.effects.ts ===== */
import { Injectable } from '@angular/core';
import { createEffect, Actions, ofType } from '@ngrx/effects';
import { ScheduleActions } from './schedule.actions';
import { catchError, map, mergeMap, of } from 'rxjs';
import { SchedulesService } from 'src/app/services/schedules/schedule.service';

@Injectable()
export class ScheduleEffects {
  constructor(private actions$: Actions, private scheduleService: SchedulesService) {}

  loadSchedules$ = createEffect(() =>
    this.actions$.pipe(
      ofType(ScheduleActions.loadSchedules),
      mergeMap(() =>
        this.scheduleService.getSchedules().pipe(
          map((schedulesResponse) =>
            ScheduleActions.loadSchedulesSuccess({ schedulesResponse })
          ),
          catchError((error) =>
            of(ScheduleActions.loadSchedulesFailure({ error: error.message }))
          )
        )
      )
    )
  );

  loadScheduleById$ = createEffect(() =>
    this.actions$.pipe(
      ofType(ScheduleActions.loadScheduleById),
      mergeMap(({ schedule_id }) =>
        this.scheduleService.getScheduleById(schedule_id).pipe(
          map((scheduleResponse) =>
            ScheduleActions.loadScheduleByIdSuccess({ scheduleResponse })
          ),
          catchError((error) =>
            of(ScheduleActions.loadScheduleByIdFailure({ error: error.message }))
          )
        )
      )
    )
  );

    // ✅ Load schedules by Dentist ID
  loadSchedulesByDentist$ = createEffect(() =>
    this.actions$.pipe(
      ofType(ScheduleActions.loadSchedulesByDentist),
      mergeMap(({ dentistId }) =>
        this.scheduleService.getSchedulesByDentist(dentistId).pipe(
          map((schedulesResponse) =>
            ScheduleActions.loadSchedulesByDentistSuccess({ schedulesResponse })
          ),
          catchError((error) =>
            of(ScheduleActions.loadSchedulesByDentistFailure({ error: error.message }))
          )
        )
      )
    )
  );

  createSchedule$ = createEffect(() =>
    this.actions$.pipe(
      ofType(ScheduleActions.createSchedule),
      mergeMap(({ createSchedule }) =>
        this.scheduleService.createSchedule(createSchedule).pipe(
          map((createdSchedule) =>
            ScheduleActions.createScheduleSuccess({ createdSchedule })
          ),
          catchError((error) =>
            of(ScheduleActions.createScheduleFailure({ error: error.message }))
          )
        )
      )
    )
  );

  deleteSchedule$ = createEffect(() =>
    this.actions$.pipe(
      ofType(ScheduleActions.deleteSchedule),
      mergeMap(({ id }) =>
        this.scheduleService.deleteSchedule(id).pipe(
          map(({ message }) =>
            ScheduleActions.deleteScheduleSuccess({ message }) // ✅ Extract only `message`
          ),
          catchError((error) =>
            of(ScheduleActions.deleteScheduleFailure({ error: error.message }))
          )
        )
      )
    )
  );

  // ✅ Load available time slots when schedule is selected
  loadTimeSlots$ = createEffect(() =>
    this.actions$.pipe(
      ofType(ScheduleActions.loadTimeSlots),
      mergeMap(({ scheduleId }) =>
        this.scheduleService.getTimeSlots(scheduleId).pipe(
          map((timeSlotsResponse) =>
            ScheduleActions.loadTimeSlotsSuccess({ timeSlotsResponse })
          ),
          catchError((error) =>
            of(ScheduleActions.loadTimeSlotsFailure({ error: error.message }))
          )
        )
      )
    )
  );

  loadAllTimeSlots$ = createEffect(() =>
    this.actions$.pipe(
      ofType(ScheduleActions.loadAllTimeSlots),
      mergeMap(() =>
        this.scheduleService.getAllTimeSlots().pipe(
          map((timeSlotsResponse) =>
            ScheduleActions.loadAllTimeSlotsSuccess({ timeSlotsResponse })
          ),
          catchError((error) =>
            of(ScheduleActions.loadAllTimeSlotsFailure({ error: error.message }))
          )
        )
      )
    )
  );

  loadAllTimeSlotsById$ = createEffect(() =>
    this.actions$.pipe(
      ofType(ScheduleActions.loadAllTimeSlotsById),
      mergeMap(({ scheduleId }) =>
        this.scheduleService.getAllTimeSlotsById(scheduleId).pipe(
          map((timeSlotsResponse) =>
            ScheduleActions.loadAllTimeSlotsByIdSuccess({ timeSlotsResponse })
          ),
          catchError((error) =>
            of(ScheduleActions.loadAllTimeSlotsByIdFailure({ error: error.message }))
          )
        )
      )
    )
  );

    // ✅ Load timeslot by ID
    loadTimeslotById$ = createEffect(() =>
      this.actions$.pipe(
        ofType(ScheduleActions.loadTimeSlotByTimeslotId),
        mergeMap(({ timeslot_id }) =>
          this.scheduleService.getTimeslotById(timeslot_id).pipe(
            map((timeSlotsResponse) =>
              ScheduleActions.loadTimeByTimeslotIdSuccess({ timeSlotsResponse })
            ),
            catchError((error) =>
              of(ScheduleActions.loadTimeByTimeslotIdFailure({ error: error.message }))
            )
          )
        )
      )
    );

    
  
  
}


/* ===== File: src\app\ngrx\schedules\schedules.reducers.ts ===== */
import { createFeature, createReducer, on } from '@ngrx/store';
import { ScheduleActions } from './schedule.actions';
import { Schedule, TimeSlot } from 'src/app/interfaces/schedule.interface';

export interface ScheduleState {
  isLoading: boolean;
  schedules: Schedule[];
  selectedSchedule: Schedule | null;
  selectedTimeSlot: TimeSlot | null;
  error: string | null;
  deleteMessage: string | null;
  timeSlots: TimeSlot[];
  allTimeSlots: TimeSlot[]; // ✅ Added for all timeslots
  timeSlotsById: TimeSlot[];
}

export const initialScheduleState: ScheduleState = {
  isLoading: false,
  schedules: [],
  selectedSchedule: null,
  selectedTimeSlot: null,
  error: null,
  deleteMessage: null,
  timeSlots: [],
  allTimeSlots: [],// ✅ Added for all timeslots
  timeSlotsById: []

};

export const scheduleFeature = createFeature({
  name: 'schedule',
  reducer: createReducer(
    initialScheduleState,

    // ✅ Load all schedules
    on(ScheduleActions.loadSchedules, (state) => ({
      ...state,
      isLoading: true,
      error: null,
    })),
    on(ScheduleActions.loadSchedulesSuccess, (state, { schedulesResponse }) => ({
      ...state,
      isLoading: false,
      schedules: schedulesResponse.data,
      error: null,
    })),
    on(ScheduleActions.loadSchedulesFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      error,
    })),

    // ✅ Load schedules by Dentist ID
    on(ScheduleActions.loadSchedulesByDentist, (state) => ({
      ...state,
      isLoading: true,
      error: null,
    })),
    on(ScheduleActions.loadSchedulesByDentistSuccess, (state, { schedulesResponse }) => ({
      ...state,
      isLoading: false,
      schedules: schedulesResponse.data, // ✅ Only schedules for the selected dentist
      error: null,
    })),
    on(ScheduleActions.loadSchedulesByDentistFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      error,
    })),

    // ✅ Load a specific schedule by ID
    on(ScheduleActions.loadScheduleById, (state) => ({
      ...state,
      isLoading: true,
      selectedSchedule: null,
      error: null,
    })),
    on(ScheduleActions.loadScheduleByIdSuccess, (state, { scheduleResponse }) => ({
      ...state,
      isLoading: false,
      selectedSchedule: scheduleResponse.data,
      error: null,
    })),
    on(ScheduleActions.loadScheduleByIdFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      selectedSchedule: null,
      error,
    })),

    // ✅ Create a schedule
    on(ScheduleActions.createSchedule, (state) => ({
      ...state,
      isLoading: true,
      error: null,
    })),
    on(ScheduleActions.createScheduleSuccess, (state, { createdSchedule }) => ({
      ...state,
      isLoading: false,
      schedules: [...state.schedules, createdSchedule.data],
      error: null,
    })),
    on(ScheduleActions.createScheduleFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      error,
    })),

    // ✅ Delete a schedule
    on(ScheduleActions.deleteSchedule, (state) => ({
      ...state,
      isLoading: true,
      error: null,
    })),
    on(ScheduleActions.deleteScheduleSuccess, (state, { message }) => ({
      ...state,
      isLoading: false,
      schedules: state.schedules.filter(schedule => schedule.id !== state.selectedSchedule?.id),
      selectedSchedule: null,
      deleteMessage: message,
      error: null,
    })),
    on(ScheduleActions.deleteScheduleFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      error,
    })),
    // ✅ Load available time slots
    on(ScheduleActions.loadTimeSlots, (state) => ({
      ...state,
      isLoading: true,
      error: null,
    })),
    on(ScheduleActions.loadTimeSlotsSuccess, (state, { timeSlotsResponse }) => ({
      ...state,
      isLoading: false,
      timeSlots: timeSlotsResponse.data,
      error: null,
    })),
    on(ScheduleActions.loadTimeSlotsFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      error,
    })),
    // ✅ Load all time slots
on(ScheduleActions.loadAllTimeSlots, (state) => ({
  ...state,
  isLoading: true,
  error: null,
})),
on(ScheduleActions.loadAllTimeSlotsSuccess, (state, { timeSlotsResponse }) => ({
  ...state,
  isLoading: false,
  allTimeSlots: timeSlotsResponse.data, // Store all timeslots
  error: null,
})),
on(ScheduleActions.loadAllTimeSlotsFailure, (state, { error }) => ({
  ...state,
  isLoading: false,
  error,
})),

// ✅ Load all time slots by schedule ID
on(ScheduleActions.loadAllTimeSlotsById, (state) => ({
  ...state,
  isLoading: true,
  error: null,
})),
on(ScheduleActions.loadAllTimeSlotsByIdSuccess, (state, { timeSlotsResponse }) => ({
  ...state,
  isLoading: false,
  timeSlotsById: timeSlotsResponse.data, // ✅ Store timeslots for the given schedule ID
  error: null,
})),
on(ScheduleActions.loadAllTimeSlotsByIdFailure, (state, { error }) => ({
  ...state,
  isLoading: false,
  error,
})),

// ✅ Load timeslot by ID
on(ScheduleActions.loadTimeSlotByTimeslotId, (state) => ({
  ...state,
  isLoading: true,
  error: null,
})),

on(ScheduleActions.loadTimeByTimeslotIdSuccess, (state, { timeSlotsResponse }) => ({
  ...state,
  isLoading: false,
  selectedTimeSlot: timeSlotsResponse.data, // ✅ Store the retrieved timeslot
  error: null,
})),

on(ScheduleActions.loadTimeByTimeslotIdFailure, (state, { error }) => ({
  ...state,
  isLoading: false,
  error,
})),

    

  ),
});

export const {
  name: scheduleFeatureKey,
  reducer: scheduleReducer,
  selectIsLoading,
  selectSchedules,
  selectSelectedSchedule,
  selectError,
  selectDeleteMessage,
  selectTimeSlots,
  selectAllTimeSlots,
  selectTimeSlotsById,
  selectSelectedTimeSlot
} = scheduleFeature;


/* ===== File: src\app\ngrx\servicelist\servicelist.effects.ts ===== */
import { Injectable } from '@angular/core';
import { createEffect, Actions, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap, of } from 'rxjs';
import { ServicesService } from 'src/app/services/servicelist/servicelist.service';
import { ServicesActions } from './servicelsit.actions';


@Injectable()
export class ServicesEffects {
  constructor(private actions$: Actions, private servicesService: ServicesService) {}

  // ✅ Load all services
  loadServices$ = createEffect(() =>
    this.actions$.pipe(
      ofType(ServicesActions.loadServices),
      mergeMap(() =>
        this.servicesService.getServices().pipe(
          map((servicesResponse) =>
            ServicesActions.loadServicesSuccess({ servicesResponse })
          ),
          catchError((error) =>
            of(ServicesActions.loadServicesFailure({ error: error.message }))
          )
        )
      )
    )
  );

  // ✅ Load service by ID
  loadServiceById$ = createEffect(() =>
    this.actions$.pipe(
      ofType(ServicesActions.loadServiceById),
      mergeMap(({ id }) =>
        this.servicesService.getServiceById(id).pipe(
          map((serviceResponse) =>
            ServicesActions.loadServiceByIdSuccess({ serviceResponse })
          ),
          catchError((error) =>
            of(ServicesActions.loadServiceByIdFailure({ error: error.message }))
          )
        )
      )
    )
  );

  // ✅ Create a service
  createService$ = createEffect(() =>
    this.actions$.pipe(
      ofType(ServicesActions.createService),
      mergeMap(({ serviceData }) =>
        this.servicesService.createService(serviceData).pipe(
          map((serviceResponse) =>
            ServicesActions.createServiceSuccess({ serviceResponse })
          ),
          catchError((error) =>
            of(ServicesActions.createServiceFailure({ error: error.message }))
          )
        )
      )
    )
  );

  // ✅ Update a service
  updateService$ = createEffect(() =>
    this.actions$.pipe(
      ofType(ServicesActions.updateService),
      mergeMap(({ id, updateData }) =>
        this.servicesService.updateService(id, updateData).pipe(
          map((serviceResponse) =>
            ServicesActions.updateServiceSuccess({ serviceResponse })
          ),
          catchError((error) =>
            of(ServicesActions.updateServiceFailure({ error: error.message }))
          )
        )
      )
    )
  );

  // ✅ Delete a service
  deleteService$ = createEffect(() =>
    this.actions$.pipe(
      ofType(ServicesActions.deleteService),
      mergeMap(({ id }) =>
        this.servicesService.deleteService(id).pipe(
          map(() =>
            ServicesActions.deleteServiceSuccess({ message: 'Service deleted successfully.' })
          ),
          catchError((error) =>
            of(ServicesActions.deleteServiceFailure({ error: error.message }))
          )
        )
      )
    )
  );
}


/* ===== File: src\app\ngrx\servicelist\servicelist.reducers.ts ===== */
import { createFeature, createReducer, on } from '@ngrx/store';
import { Service } from 'src/app/interfaces/servicelist.interface';
import { ServicesActions } from './servicelsit.actions';


export interface ServicesState {
  isLoading: boolean;
  services: Service[];
  selectedService: Service | null;
  error: string | null;
  deleteMessage: string | null;
}

export const initialServicesState: ServicesState = {
  isLoading: false,
  services: [],
  selectedService: null,
  error: null,
  deleteMessage: null,
};

export const servicesFeature = createFeature({
  name: 'services',
  reducer: createReducer(
    initialServicesState,

    // ✅ Load all services
    on(ServicesActions.loadServices, (state) => ({
      ...state,
      isLoading: true,
      error: null,
    })),
    on(ServicesActions.loadServicesSuccess, (state, { servicesResponse }) => ({
      ...state,
      isLoading: false,
      services: servicesResponse.data,
      error: null,
    })),
    on(ServicesActions.loadServicesFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      error,
    })),

    // ✅ Load service by ID
    on(ServicesActions.loadServiceById, (state) => ({
      ...state,
      isLoading: true,
      selectedService: null,
      error: null,
    })),
    on(ServicesActions.loadServiceByIdSuccess, (state, { serviceResponse }) => ({
      ...state,
      isLoading: false,
      selectedService: serviceResponse.data,
      error: null,
    })),
    on(ServicesActions.loadServiceByIdFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      selectedService: null,
      error,
    })),

    // ✅ Create a service
    on(ServicesActions.createService, (state) => ({
      ...state,
      isLoading: true,
      error: null,
    })),
    on(ServicesActions.createServiceSuccess, (state, { serviceResponse }) => ({
      ...state,
      isLoading: false,
      services: [...state.services, serviceResponse.data],
      error: null,
    })),
    on(ServicesActions.createServiceFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      error,
    })),

    // ✅ Update a service
    on(ServicesActions.updateService, (state) => ({
      ...state,
      isLoading: true,
      error: null,
    })),
    on(ServicesActions.updateServiceSuccess, (state, { serviceResponse }) => ({
      ...state,
      isLoading: false,
      services: state.services.map(service =>
        service.id === serviceResponse.data.id ? serviceResponse.data : service
      ),
      error: null,
    })),
    on(ServicesActions.updateServiceFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      error,
    })),

    // ✅ Delete a service
    on(ServicesActions.deleteService, (state) => ({
      ...state,
      isLoading: true,
      error: null,
    })),
    on(ServicesActions.deleteServiceSuccess, (state, { message }) => ({
      ...state,
      isLoading: false,
      services: state.services.filter(service => service.id !== state.selectedService?.id),
      selectedService: null,
      deleteMessage: message,
      error: null,
    })),
    on(ServicesActions.deleteServiceFailure, (state, { error }) => ({
      ...state,
      isLoading: false,
      error,
    }))
  ),
});

export const {
  name: servicesFeatureKey,
  reducer: servicesReducer,
  selectIsLoading,
  selectServices,
  selectSelectedService,
  selectError,
  selectDeleteMessage,
} = servicesFeature;


/* ===== File: src\app\ngrx\servicelist\servicelsit.actions.ts ===== */
import { createActionGroup, emptyProps, props } from '@ngrx/store';
import { Service, ServiceResponse, ServicesListResponse } from 'src/app/interfaces/servicelist.interface';


export const ServicesActions = createActionGroup({
  source: 'Services',
  events: {
    // ✅ Load all services
    'Load Services': emptyProps(),
    'Load Services Success': props<{ servicesResponse: ServicesListResponse }>(),
    'Load Services Failure': props<{ error: string }>(),

    // ✅ Load service by ID
    'Load Service By Id': props<{ id: number }>(),
    'Load Service By Id Success': props<{ serviceResponse: ServiceResponse }>(),
    'Load Service By Id Failure': props<{ error: string }>(),

    // ✅ Create service
    'Create Service': props<{ serviceData: Partial<Service> }>(),
    'Create Service Success': props<{ serviceResponse: ServiceResponse }>(),
    'Create Service Failure': props<{ error: string }>(),

    // ✅ Update service
    'Update Service': props<{ id: number; updateData: Partial<Service> }>(),
    'Update Service Success': props<{ serviceResponse: ServiceResponse }>(),
    'Update Service Failure': props<{ error: string }>(),

    // ✅ Delete service
    'Delete Service': props<{ id: number }>(),
    'Delete Service Success': props<{ message: string }>(),
    'Delete Service Failure': props<{ error: string }>(),
  },
});


/* ===== File: src\app\ngrx\user_profile\user_profile.actions.ts ===== */
import { createActionGroup, emptyProps, props } from '@ngrx/store';

export const ProfileActions = createActionGroup({
  source: 'Profile',
  events: {
    'Load Profile': emptyProps(),
    'Load Profile Success': props<{ profile: { id: number; email: string; fullname: string; role: string } }>(),
    'Load Profile Failure': props<{ error: string }>()
  }
});


/* ===== File: src\app\ngrx\user_profile\user_profile.effects.ts ===== */
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, exhaustMap, map, of } from 'rxjs';
import { AuthService } from 'src/app/services/auth/auth.service';
import { ProfileActions } from './user_profile.actions';
import { ProfileService } from 'src/app/services/auth/user_profile.service';

@Injectable()
export class ProfileEffects {
  constructor(private actions$: Actions, private profileService: ProfileService) {}

  loadProfile$ = createEffect(() =>
    this.actions$.pipe(
      ofType(ProfileActions.loadProfile),
      exhaustMap(() =>
        this.profileService.getProfile().pipe(
          map(profile => ProfileActions.loadProfileSuccess({ profile })),
          catchError(error => of(ProfileActions.loadProfileFailure({ error: error.message || 'Failed to load profile' })))
        )
      )
    )
  );
}


/* ===== File: src\app\ngrx\user_profile\user_profile.reducers.ts ===== */
import { createFeature, createReducer, on } from '@ngrx/store';
import { UserProfileResponse } from 'src/app/interfaces/user_profile.interface';
import { ProfileActions } from './user_profile.actions';

export interface ProfileState {
  profile: UserProfileResponse | null;
  loading: boolean;
  error: string | null;
}

export const initialProfileState: ProfileState = {
  profile: null,
  loading: false,
  error: null
};

export const profileFeature = createFeature({
  name: 'profile',
  reducer: createReducer(
    initialProfileState,

    on(ProfileActions.loadProfile, (state) => ({
      ...state,
      loading: true,
      error: null
    })),

    on(ProfileActions.loadProfileSuccess, (state, { profile }) => ({
      ...state,
      profile,
      loading: false
    })),

    on(ProfileActions.loadProfileFailure, (state, { error }) => ({
      ...state,
      loading: false,
      error
    }))
  )
});

export const {
  name: profileFeatureKey,
  reducer: profileReducer,
  selectProfile,
  selectLoading,
  selectError
} = profileFeature;


/* ===== File: src\app\services\appointment\addappointment.service.ts ===== */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ApiResponse, Appointment, DetailedAppointment } from 'src/app/interfaces/addappointment.interface';
import { environment } from 'src/environments/environment.prod';


@Injectable({
  providedIn: 'root',
})
export class AppointmentService {
  private apiUrl = `${environment.apiUrl}/appointments`;
  private apiUrl_patient = `${environment.apiUrl}/appointments/by-patient`;
  private apiUrl_cancel = `${environment.apiUrl}/appointments/cancel`;

  constructor(private http: HttpClient) {}

  // ✅ Get all appointments
  getAppointments(): Observable<ApiResponse<Appointment[]>> {
    return this.http.get<ApiResponse<Appointment[]>>(this.apiUrl);
  }

  // ✅ Get appointment by ID
  getAppointmentById(id: number): Observable<ApiResponse<Appointment>> {
    return this.http.get<ApiResponse<Appointment>>(`${this.apiUrl}/${id}`);
  }

  // ✅ Get appointment by ID
  getAppointmentByPatientId(id: number): Observable<ApiResponse<Appointment>> {
    return this.http.get<ApiResponse<Appointment>>(`${this.apiUrl_patient}/${id}`);
  }

  // ✅ Get all detailed appointments by Patient ID (Including Services)
  getAllAppointmentsByPatientId(patientId: number): Observable<ApiResponse<DetailedAppointment[]>> {
    return this.http.get<ApiResponse<DetailedAppointment[]>>(
      `${this.apiUrl}/getAllAppointmentsWithServicesByPatientId/${patientId}`
    );
  }

  // ✅ Create a new appointment (Handles Optional `service_list_id`)
  createAppointment(
    appointment: Partial<Appointment>, 
    service_list_id: number[]
  ): Observable<ApiResponse<{ appointmentId: number }>> {
    return this.http.post<ApiResponse<{ appointmentId: number }>>(this.apiUrl, { 
      ...appointment, 
      service_list_id 
    });
  }

  // ✅ Update an appointment (Handles Optional `service_list_id`)
  updateAppointment(id: number, appointment: Partial<Appointment>): Observable<ApiResponse<Appointment>> {
    return this.http.put<ApiResponse<Appointment>>(`${this.apiUrl}/${id}`, appointment);
  }

  // ✅ Delete an appointment
  deleteAppointment(id: number): Observable<ApiResponse<{ id: number }>> {
    return this.http.delete<ApiResponse<{ id: number }>>(`${this.apiUrl}/${id}`);
  }

    // ✅ Cancel an appointment (PATCH - Updates Only `status`)
    cancelAppointment(id: number): Observable<ApiResponse<{ appointmentId: number }>> {
      return this.http.patch<ApiResponse<{ appointmentId: number }>>(`${this.apiUrl_cancel}/${id}`, {
        status: 'canceled',
      });
    }

    

    


    

}


/* ===== File: src\app\services\auth\auth.guard.ts ===== */
import { Injectable } from '@angular/core';
import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';
import { decodeAccessToken } from './auth.utils';


@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {
  constructor(private router: Router) {}

  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {
    const accessToken = sessionStorage.getItem('accessToken');
    
    if (!accessToken) {
      this.router.navigate(['/login']);
      return false;
    }

    const userRole = decodeAccessToken()?.role; // ✅ Get role from JWT
    console.log('AuthGuard - Validated Role:', userRole);

    if (state.url.startsWith('/dentistdashboard') && userRole !== 'dentist') {
      this.router.navigate(['/patientdashboard']);
      return false;
    }

    if (state.url.startsWith('/patientdashboard') && userRole !== 'patient') {
      this.router.navigate(['/dentistdashboard']);
      return false;
    }

    return true;
  }
}


/* ===== File: src\app\services\auth\auth.interceptor.ts ===== */
import { Injectable } from '@angular/core';
import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError, from, timer } from 'rxjs';
import { catchError, switchMap, tap } from 'rxjs/operators';
import { Store } from '@ngrx/store';
import { AuthService } from './auth.service';
import { AuthActions } from 'src/app/auth/ngrx/login.actions';
import { Router } from '@angular/router';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {
  private isRefreshing = false;
  private refreshTokenInProgress: Promise<string | null> = Promise.resolve(null);
  private countdownStarted = false;

  constructor(private authService: AuthService, private store: Store, private router: Router) {}

  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    let authReq = req;
    const accessToken = sessionStorage.getItem('accessToken');

    if (accessToken) {
      authReq = this.addToken(req, accessToken);
      this.monitorTokenExpiry(); // ✅ Start monitoring token expiry
    }

    return next.handle(authReq).pipe(
      catchError((error) => {
        if (error instanceof HttpErrorResponse && error.status === 401) {
          if (req.url.includes('/auth/login')) {
            return throwError(() => error);
          }
          return this.handle401Error(req, next);
        }
        return throwError(() => error);
      })
    );
  }

  private monitorTokenExpiry(): void {
    if (this.countdownStarted) return;
    this.countdownStarted = true;
  
    const expiresAt = Number(sessionStorage.getItem('accessTokenExpiry'));
    const now = Date.now();
    const timeUntilExpiry = expiresAt - now;
    const warningTime = 60 * 1000; // Show modal 1 minute before expiry
  
    if (timeUntilExpiry > warningTime) {
      timer(timeUntilExpiry - warningTime).subscribe(() => {
        this.store.dispatch(AuthActions.showTokenExpiryModal());
      });
    }
  }
  

  private startLogoutCountdown(seconds: number): void {
    let remaining = seconds;
    const interval = setInterval(() => {
      this.store.dispatch(AuthActions.updateLogoutCountdown({ remaining }));

      if (remaining <= 0) {
        clearInterval(interval);
        this.store.dispatch(AuthActions.logout({ refreshToken: localStorage.getItem('refreshToken')! }));
        sessionStorage.clear();
        localStorage.clear();
        this.router.navigate(['/auth/login']);
      }
      remaining--;
    }, 1000);
  }

  private handle401Error(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    if (!this.isRefreshing && this.isAccessTokenExpired()) {
      this.isRefreshing = true;
      this.refreshTokenInProgress = this.refreshAccessToken();
    }

    return from(this.refreshTokenInProgress).pipe(
      switchMap((newToken) => {
        this.isRefreshing = false;
        this.refreshTokenInProgress = Promise.resolve(null);

        if (newToken) {
          sessionStorage.setItem('accessToken', newToken);
          return next.handle(this.addToken(req, newToken));
        }

        return throwError(() => new Error('Token refresh failed'));
      }),
      catchError((error) => {
        this.isRefreshing = false;
        this.refreshTokenInProgress = Promise.resolve(null);
        return throwError(() => error);
      })
    );
  }

  private refreshAccessToken(): Promise<string | null> {
    const refreshToken = localStorage.getItem('refreshToken');
    if (!refreshToken) return Promise.resolve(null);

    return new Promise((resolve, reject) => {
      this.authService.refreshTokenApi(refreshToken).subscribe({
        next: (response) => {
          sessionStorage.setItem('accessToken', response.accessToken);
          sessionStorage.setItem('accessTokenExpiry', (Date.now() + 15 * 60 * 1000).toString());
          resolve(response.accessToken);
        },
        error: () => reject(null),
      });
    });
  }

  private addToken(request: HttpRequest<any>, token: string): HttpRequest<any> {
    return request.clone({
      setHeaders: {
        Authorization: `Bearer ${token}`
      }
    });
  }

  private isAccessTokenExpired(): boolean {
    const expiresAt = Number(sessionStorage.getItem('accessTokenExpiry'));
    return !expiresAt || expiresAt < Date.now();
  }

  
}


/* ===== File: src\app\services\auth\auth.service.ts ===== */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
import { LoginRequest, LoginResponse, Token } from 'src/app/interfaces/auth.interfaces';
import { environment } from 'src/environments/environment.prod';
import { AuthActions } from 'src/app/auth/ngrx/login.actions';
import { Store } from '@ngrx/store';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private apiUrl = environment.apiUrl;

  constructor(private http: HttpClient, private store: Store) {}

  // ✅ Login API
  login(loginRequest: LoginRequest): Observable<LoginResponse> {
    return this.http.post<LoginResponse>(`${this.apiUrl}/auth/login`, loginRequest)
  }

  // ✅ Logout API call
  logoutApi(refreshToken: string): Observable<{ message: string }> {
    return this.http.post<{ message: string }>(`${this.apiUrl}/auth/logout`, { refreshToken });
  }

  refreshTokenApi(refreshToken: string): Observable<{ accessToken: string }> {
    return this.http.post<{ accessToken: string }>(`${this.apiUrl}/auth/refresh-token`, { refreshToken });
  }


}


/* ===== File: src\app\services\auth\auth.utils.ts ===== */
import { jwtDecode } from 'jwt-decode';

export function decodeAccessToken(): { id: number; role: string } | null {
  const token = sessionStorage.getItem('accessToken');
  if (!token) return null;

  try {
    return jwtDecode<{ id: number; role: string }>(token); // ✅ Correct import
  } catch (error) {
    console.error('Invalid token:', error);
    return null;
  }
}


/* ===== File: src\app\services\auth\login.guard.ts ===== */
import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';

@Injectable({
  providedIn: 'root'
})
export class LoginGuard implements CanActivate {
  constructor(private router: Router) {}

  canActivate(): boolean {
    const accessToken = sessionStorage.getItem('accessToken');
    const refreshToken = localStorage.getItem('refreshToken');
    const userRole = sessionStorage.getItem('userRole'); // ✅ Check user role

    // ✅ If user is already logged in, prevent access to login page
    if (accessToken && refreshToken && userRole) {
      this.router.navigate(userRole === 'patient' ? ['/patientdashboard'] : ['/dentistdashboard']);
      return false;
    }

    return true; // ✅ Allow access to login if no tokens/role
  }
}


/* ===== File: src\app\services\auth\user_profile.service.ts ===== */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, tap, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { LoginRequest, LoginResponse, Token } from 'src/app/interfaces/auth.interfaces';
import { UserProfileResponse } from 'src/app/interfaces/user_profile.interface';
import { environment } from 'src/environments/environment.prod';

@Injectable({
  providedIn: 'root',
})
export class ProfileService {
    private apiUrl = environment.apiUrl; 

  constructor(private http: HttpClient) {}

    // ✅ Fetch User Profile
    getProfile(): Observable<UserProfileResponse> {
        return this.http.get<UserProfileResponse>(`${this.apiUrl}/profile`);
      }
}


/* ===== File: src\app\services\dentist\dentist.service.ts ===== */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

import { environment } from 'src/environments/environment.prod';
import { Dentist, DentistResponse, DentistsListResponse } from 'src/app/interfaces/dentist.interface';

@Injectable({
  providedIn: 'root',
})
export class DentistService {
  private apiUrl = `${environment.apiUrl}/dentist`; // ✅ Base API URL

  constructor(private http: HttpClient) {}

  // ✅ Get all dentists
  getDentists(): Observable<DentistsListResponse> {
    return this.http.get<DentistsListResponse>(this.apiUrl);
  }

  // ✅ Get a specific dentist by ID
  getDentistById(id: number): Observable<DentistResponse> {
    return this.http.get<DentistResponse>(`${this.apiUrl}/${id}`);
  }

  // ✅ Create a new dentist (Admin only)
  createDentist(dentistData: Partial<Dentist>): Observable<DentistResponse> {
    return this.http.post<DentistResponse>(this.apiUrl, dentistData);
  }

  // ✅ Update a dentist’s information
  updateDentist(id: number, updateData: Partial<Dentist>): Observable<DentistResponse> {
    return this.http.put<DentistResponse>(`${this.apiUrl}/${id}`, updateData);
  }

  // ✅ Delete a dentist (Admin only)
  deleteDentist(id: number): Observable<DentistResponse> {
    return this.http.delete<DentistResponse>(`${this.apiUrl}/${id}`);
  }
}


/* ===== File: src\app\services\dentist\schedules.service.ts ===== */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { Schedule } from 'src/app/interfaces/patients.interface';


@Injectable({
  providedIn: 'root', // Ensures the service is available application-wide
})
export class ScheduleService {
  private readonly apiUrl = 'http://localhost:8082/schedules'; // API endpoint

  constructor(private http: HttpClient) {}

  // Fetch all schedules
  getSchedules(): Observable<Schedule[]> {
    return this.http.get<Schedule[]>(this.apiUrl).pipe(
      catchError(this.handleError)
    );
  }

  // Add a new schedule
  addSchedule(schedule: Schedule): Observable<Schedule> {
    return this.http.post<Schedule>(this.apiUrl, schedule).pipe(
      catchError(this.handleError)
    );
  }

  // Update an existing schedule (PUT or PATCH based on your API setup)
  updateSchedule(id: number, schedule: Partial<Schedule>): Observable<Schedule> {
    return this.http.put<Schedule>(`${this.apiUrl}/${id}`, schedule).pipe(
      catchError(this.handleError)
    );
  }

  // Delete a schedule
  deleteSchedule(id: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`).pipe(
      catchError(this.handleError)
    );
  }

  // Handle errors
  private handleError(error: any): Observable<never> {
    console.error('An error occurred:', error);
    return throwError(() => new Error(error.message || 'Server Error'));
  }
}


/* ===== File: src\app\services\patients\patient-appointment-service.ts ===== */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AppointmentDetail } from 'src/app/interfaces/patients.interface';

@Injectable({
  providedIn: 'root'
})
export class PatientAppointmentService {
  private apiUrl = 'http://localhost:3000/appointmentDetails';

  constructor(private http: HttpClient) {}

  getAppointments(): Observable<AppointmentDetail[]> {
    return this.http.get<AppointmentDetail[]>(this.apiUrl);
  }

  getAppointmentById(id: number): Observable<AppointmentDetail> {
    return this.http.get<AppointmentDetail>(`${this.apiUrl}/${id}`);
  }

  addAppointment(appointment: AppointmentDetail): Observable<AppointmentDetail> {
    return this.http.post<AppointmentDetail>(this.apiUrl, appointment);
  }

  updateAppointment(id: number, appointment: AppointmentDetail): Observable<AppointmentDetail> {
    return this.http.put<AppointmentDetail>(`${this.apiUrl}/${id}`, appointment);
  }

  deleteAppointment(id: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`);
  }
}


/* ===== File: src\app\services\patients\patient-data-service.ts ===== */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PatientData } from 'src/app/interfaces/patients.interface';

@Injectable({
  providedIn: 'root'
})
export class PatientDataService {
  private apiUrl = 'http://localhost:8082/patients';

  constructor(private http: HttpClient) {}

  getPatients(): Observable<PatientData[]> {
    return this.http.get<PatientData[]>(this.apiUrl);
  }

  getPatientById(id: number): Observable<PatientData> {
    return this.http.get<PatientData>(`${this.apiUrl}/${id}`);
  }

  addPatient(patient: PatientData): Observable<PatientData> {
    return this.http.post<PatientData>(this.apiUrl, patient);
  }

  updatePatient(id: number, patient: PatientData): Observable<PatientData> {
    return this.http.put<PatientData>(`${this.apiUrl}/${id}`, patient);
  }

  deletePatient(id: number): Observable<{ message: string }> {
    return this.http.delete<{ message: string }>(`${this.apiUrl}/${id}`);
  }
}


/* ===== File: src\app\services\patients\patient-dental-history-service.ts ===== */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { map, Observable } from 'rxjs';
import { DentalHistoryData } from 'src/app/interfaces/patients.interface';

@Injectable({
  providedIn: 'root',
})
export class DentalHistoryService {
  private apiUrl = 'http://localhost:3000/dentalHistories'; // Replace with your actual API endpoint

  constructor(private http: HttpClient) {}

  // Fetch dental history for a specific patient
  getDentalHistoryByPatientId(patientId: number): Observable<DentalHistoryData[]> {
    return this.http.get<DentalHistoryData[]>(`${this.apiUrl}?patientId=${patientId}`);
  }

  // Add a new dental history record
  addDentalHistory(dentalHistory: DentalHistoryData): Observable<DentalHistoryData> {
    return this.http.post<DentalHistoryData>(this.apiUrl, dentalHistory).pipe(
      map((response) => ({
        ...response,
        id: Number(response.id), // Convert id to number
      }))
    );
  }

  // Update an existing dental history record
  updateDentalHistory(id: number, dentalHistory: DentalHistoryData): Observable<void> {
    return this.http.put<void>(`${this.apiUrl}/${id}`, dentalHistory);
  }

  // Delete a dental history record
  deleteDentalHistory(id: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`);
  }

  getAllDentalHistories(): Observable<DentalHistoryData[]> {
    return this.http.get<DentalHistoryData[]>(`${this.apiUrl}`);
  }
}


/* ===== File: src\app\services\patients\patient-details-service.ts ===== */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PatientData } from 'src/app/interfaces/patients.interface'; // Ensure correct path

@Injectable({
  providedIn: 'root'
})
export class PatientDetailsService {
  private apiUrl = 'http://localhost:3000/patientData'; // Endpoint for patient data

  constructor(private http: HttpClient) {}

  // Get all patient data
  getPatients(): Observable<PatientData[]> {
    return this.http.get<PatientData[]>(this.apiUrl);
  }

  // Add a new patient
  addPatient(patient: PatientData): Observable<PatientData> {
    return this.http.post<PatientData>(this.apiUrl, patient);
  }

  // Update an existing patient
  updatePatient(id: number, patient: PatientData): Observable<PatientData> {
    return this.http.put<PatientData>(`${this.apiUrl}/${id}`, patient);
  }

  // Delete a patient
  deletePatient(id: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`);
  }
}


/* ===== File: src\app\services\patients\patient-prescription-service.ts ===== */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PrescriptionData } from 'src/app/interfaces/patients.interface'; // Adjust the path if necessary

@Injectable({
  providedIn: 'root'
})
export class PrescriptionService {
  private apiUrl = 'http://localhost:3000/prescriptions'; // Your endpoint

  constructor(private http: HttpClient) {}

  // Get all prescriptions
  getPrescriptions(): Observable<PrescriptionData[]> {
    return this.http.get<PrescriptionData[]>(this.apiUrl);
  }

  // Add a new prescription
  addPrescription(prescription: PrescriptionData): Observable<PrescriptionData> {
    return this.http.post<PrescriptionData>(this.apiUrl, prescription);
  }

  // Update an existing prescription
  updatePrescription(id: number, prescription: PrescriptionData): Observable<PrescriptionData> {
    return this.http.put<PrescriptionData>(`${this.apiUrl}/${id}`, prescription);
  }

  // Delete a prescription
  deletePrescription(id: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`);
  }
}


/* ===== File: src\app\services\patients\patient-treatment.service.ts ===== */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { TreatmentData } from 'src/app/interfaces/patients.interface';

@Injectable({
  providedIn: 'root'
})
export class PatientTreatmentService {
  private apiUrl = 'http://localhost:3000/treatmentData';

  constructor(private http: HttpClient) {}

  getTreatments(): Observable<TreatmentData[]> {
    return this.http.get<TreatmentData[]>(this.apiUrl);
  }

  getTreatmentById(id: number): Observable<TreatmentData> {
    return this.http.get<TreatmentData>(`${this.apiUrl}/${id}`);
  }

  addTreatment(treatment: TreatmentData): Observable<TreatmentData> {
    return this.http.post<TreatmentData>(this.apiUrl, treatment);
  }

  updateTreatment(id: number, treatment: TreatmentData): Observable<TreatmentData> {
    return this.http.put<TreatmentData>(`${this.apiUrl}/${id}`, treatment);
  }

  deleteTreatment(id: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`);
  }
}


/* ===== File: src\app\services\patients\patient_details.service.ts ===== */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { catchError, Observable, tap, throwError } from 'rxjs';
import { environment } from 'src/environments/environment.prod';
import { Patient, PatientResponse, PatientsListResponse } from 'src/app/interfaces/patient_details.interface';

@Injectable({
  providedIn: 'root',
})
export class PatientsService {
  private apiUrl = `${environment.apiUrl}/patients`; // ✅ Ensure correct endpoint

  constructor(private http: HttpClient) {}

  // ✅ Get all patients
  getPatients(): Observable<PatientsListResponse> {
    return this.http.get<PatientsListResponse>(this.apiUrl);
  }

  // ✅ Get a specific patient by user ID
  getPatientByUserId(id: number): Observable<PatientResponse> {
    return this.http.get<PatientResponse>(`${this.apiUrl}/${id}`).pipe(
      tap(response => console.log('API Response:', response)), // ✅ Debug output
      catchError(error => throwError(() => new Error(error.error?.message || 'Error fetching patient')))
    );
  }

  // ✅ Update a patient's information
  updatePatient(id: number, updateData: Partial<Patient>): Observable<PatientResponse> {
    return this.http.put<PatientResponse>(`${this.apiUrl}/${id}`, updateData);
  }
}


/* ===== File: src\app\services\prescription\prescription.service.ts ===== */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from 'src/environments/environment.prod';
import { Prescription, PrescriptionResponse, PrescriptionsResponse } from 'src/app/interfaces/prescription.interface';

@Injectable({ providedIn: 'root' })
export class PrescriptionsService {
  private apiUrl = `${environment.apiUrl}/prescriptions`;

  constructor(private http: HttpClient) {}

  getPrescriptions(): Observable<PrescriptionsResponse> {
    return this.http.get<PrescriptionsResponse>(this.apiUrl);
  }

  getPrescriptionById(id: number): Observable<PrescriptionResponse> {
    return this.http.get<PrescriptionResponse>(`${this.apiUrl}/${id}`);
  }

  getPrescriptionsByPatientId(patientId: number): Observable<PrescriptionsResponse> {
    return this.http.get<PrescriptionsResponse>(`${this.apiUrl}/patient/${patientId}`);
  }

  createPrescription(prescription: Omit<Prescription, 'id' | 'created_at' | 'updated_at'>): Observable<PrescriptionResponse> {
    return this.http.post<PrescriptionResponse>(this.apiUrl, prescription);
  }

  updatePrescription(id: number, prescription: Partial<Omit<Prescription, 'created_at' | 'updated_at'>>): Observable<PrescriptionResponse> {
    return this.http.put<PrescriptionResponse>(`${this.apiUrl}/${id}`, prescription);
  }

  deletePrescription(id: number): Observable<{ message: string }> {
    return this.http.delete<{ message: string }>(`${this.apiUrl}/${id}`);
  }
}


/* ===== File: src\app\services\schedules\schedule.service.ts ===== */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { catchError, Observable, tap, throwError } from 'rxjs';
import { environment } from 'src/environments/environment.prod';
import { Patient, PatientResponse, PatientsListResponse } from 'src/app/interfaces/patient_details.interface';
import { Schedule, ScheduleResponse, SchedulesResponse, TimeslotIdResponse, TimeSlotsResponse } from 'src/app/interfaces/schedule.interface';


@Injectable({
  providedIn: 'root',
})
export class SchedulesService {
  private apiUrl = `${environment.apiUrl}/schedules`; // ✅ Ensure correct endpoint
  private timeSlotsUrl = `${environment.apiUrl}/timeslots/available`; // ✅ Ensure correct endpoint
  private timeAllSlotsUrl = `${environment.apiUrl}/timeslots/all`; // ✅ Ensure correct endpoint
  private timeSlotById = `${environment.apiUrl}/timeslots`; // ✅ Ensure correct endpoint


  constructor(private http: HttpClient) {}

  getSchedules(): Observable<SchedulesResponse> {
    return this.http.get<SchedulesResponse>(this.apiUrl);
  }

  getScheduleById(id: number): Observable<ScheduleResponse> {
    return this.http.get<ScheduleResponse>(`${this.apiUrl}/${id}`);
  }

  getSchedulesByDentist(dentistId: number): Observable<SchedulesResponse> {
    return this.http.get<SchedulesResponse>(`${this.apiUrl}/dentist/${dentistId}`);
  }

  createSchedule(schedule: Partial<Schedule>): Observable<ScheduleResponse> {
    return this.http.post<ScheduleResponse>(this.apiUrl, schedule);
  }

  deleteSchedule(id: number): Observable<{message: string}> {
    return this.http.delete<{message: string}>(`${this.apiUrl}/${id}`);
  }

  getTimeSlots(scheduleId: number): Observable<TimeSlotsResponse> {
    return this.http.get<TimeSlotsResponse>(`${this.timeSlotsUrl}/${scheduleId}`);
  }

  getAllTimeSlots(): Observable<TimeSlotsResponse> {
    return this.http.get<TimeSlotsResponse>(this.timeAllSlotsUrl);
  }

  getAllTimeSlotsById(scheduleId: number): Observable<TimeSlotsResponse> {
    return this.http.get<TimeSlotsResponse>(`${this.timeAllSlotsUrl}/${scheduleId}`);
  }

  getTimeslotById(timeslotId: number): Observable<TimeslotIdResponse> {
    return this.http.get<TimeslotIdResponse>(`${this.timeSlotById}/${timeslotId}`);
  }
}


/* ===== File: src\app\services\servicelist\servicelist.service.ts ===== */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from 'src/environments/environment.prod';
import { Service, ServiceResponse, ServicesListResponse } from 'src/app/interfaces/servicelist.interface';


@Injectable({
  providedIn: 'root',
})
export class ServicesService {
  private apiUrl = `${environment.apiUrl}/serviceslist`; // ✅ Base API URL

  constructor(private http: HttpClient) {}

  // ✅ Get all services
  getServices(): Observable<ServicesListResponse> {
    return this.http.get<ServicesListResponse>(this.apiUrl);
  }

  // ✅ Get a specific service by ID
  getServiceById(id: number): Observable<ServiceResponse> {
    return this.http.get<ServiceResponse>(`${this.apiUrl}/${id}`);
  }

  // ✅ Create a new service (Admin only)
  createService(serviceData: Partial<Service>): Observable<ServiceResponse> {
    return this.http.post<ServiceResponse>(this.apiUrl, serviceData);
  }

  // ✅ Update an existing service
  updateService(id: number, updateData: Partial<Service>): Observable<ServiceResponse> {
    return this.http.put<ServiceResponse>(`${this.apiUrl}/${id}`, updateData);
  }

  // ✅ Delete a service (Admin only)
  deleteService(id: number): Observable<ServiceResponse> {
    return this.http.delete<ServiceResponse>(`${this.apiUrl}/${id}`);
  }


}


/* ===== File: src\app\shareables\tables\patient-tables\patient-appointment-table\patient-appointment-table.component.html ===== */
<section>
  <ng-container *ngIf="filteredAppointments$ | async as appointments; else loading">
    <ng-container *ngIf="appointments.length > 0; else noData">
      <app-display-table
        [title]="pagetitle + ' List'"
        [data]="appointments || []"
        [columns]="columns"
        [itemsPerPage]="itemsPerPage"
        [(currentPage)]="currentPage"
        [searchTerm]="searchTerm"
        [pageSizeOptions]="[5, 10, 15, 20]"
        [showAddButton]="false"
        (searchTermChange)="filterAppointmentDetails($event)"
        (currentPageChange)="currentPage = $event"
        (sort)="sortAppointmentDetails($event)"
      >
        <!-- ✅ Custom Column for Status -->
        <ng-template #statusTemplate let-appointment="row">
          <span [ngClass]="getStatusClass(appointment.status)">
            {{ appointment.status }}
          </span>
        </ng-template>
      </app-display-table>
    </ng-container>

    <!-- ✅ Show this if there are no appointments -->
    <ng-template #noData>
      <p class="no-data-message">No appointment data available.</p>
    </ng-template>
  </ng-container>

  <!-- ✅ Loading State -->
  <ng-template #loading>
    <p>Loading appointment details...</p>
  </ng-template>
</section>


/* ===== File: src\app\shareables\tables\patient-tables\patient-appointment-table\patient-appointment-table.component.scss ===== */
.badge-success {
    background-color: #28a745;
    color: white;
  }
  
  .badge-warning {
    background-color: #ffc107;
    color: black;
  }
  
  .badge-danger {
    background-color: #dc3545;
    color: white;
  }
  
  .badge-secondary {
    background-color: #6c757d;
    color: white;
  }
  
  .badge {
    padding: 5px 10px;
    border-radius: 4px;
    font-weight: bold;
  }

/* ===== File: src\app\shareables\tables\patient-tables\patient-appointment-table\patient-appointment-table.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { PatientAppointmentTableComponent } from './patient-appointment-table.component';

describe('PatientAppointmentTableComponent', () => {
  let component: PatientAppointmentTableComponent;
  let fixture: ComponentFixture<PatientAppointmentTableComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [PatientAppointmentTableComponent]
    });
    fixture = TestBed.createComponent(PatientAppointmentTableComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\shareables\tables\patient-tables\patient-appointment-table\patient-appointment-table.component.ts ===== */
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ActivatedRoute, Router } from '@angular/router';
import { DisplayTableComponent } from 'src/app/my-components/tables/display-table/display-table.component';
import { BehaviorSubject, combineLatest, map, Observable } from 'rxjs';
import { select, Store } from '@ngrx/store';
import { selectDetailedAppointments } from 'src/app/ngrx/appointment/addappointment.reducers';
import { AppointmentActions } from 'src/app/ngrx/appointment/addappointment.actions';
import { DetailedAppointment } from 'src/app/interfaces/addappointment.interface';

@Component({
  selector: 'app-patient-appointment-table',
  standalone: true,
  imports: [CommonModule, DisplayTableComponent],
  templateUrl: './patient-appointment-table.component.html',
  styleUrls: ['./patient-appointment-table.component.scss'],
})
export class PatientAppointmentTableComponent implements OnInit {
  pagetitle = 'Patient Appointments';

  // ✅ Fetch appointments from NgRx Store
  appointmentDetails$: Observable<DetailedAppointment[]> = this.store.pipe(
    select(selectDetailedAppointments)
  );

  // ✅ BehaviorSubject for search term
  private searchTermSubject = new BehaviorSubject<string>('');
  searchTerm$ = this.searchTermSubject.asObservable();

  // ✅ BehaviorSubject for sorting
  private sortColumnSubject = new BehaviorSubject<string>('schedule_date');
  private sortDirectionSubject = new BehaviorSubject<'asc' | 'desc'>('asc');

  filteredAppointments$: Observable<DetailedAppointment[]>;

  errorMessage = '';
  isLoading = false;

  columns = [
    { key: 'schedule_date', label: 'Date', sortable: true },
    { key: 'timeslot_start_time', label: 'Start Time', sortable: true },
    { key: 'timeslot_end_time', label: 'End Time', sortable: true },
    { key: 'dentist_name', label: 'Dentist', sortable: true },
    { key: 'status', label: 'Status', sortable: true },
  ];

  currentPage = 1;
  itemsPerPage = 10;

  constructor(private route: ActivatedRoute, private router: Router, private store: Store) {
    // ✅ Combine Observables for filtering & sorting
    this.filteredAppointments$ = combineLatest([
      this.appointmentDetails$,
      this.searchTerm$,
      this.sortColumnSubject,
      this.sortDirectionSubject,
    ]).pipe(
      map(([appointments, searchTerm, sortColumn, sortDirection]) => {
        let filtered = appointments;
    
        // ✅ Filter appointments based on search
        if (searchTerm.trim()) {
          filtered = appointments.filter((appointment) =>
            Object.values(appointment)
              .join(' ')
              .toLowerCase()
              .includes(searchTerm.toLowerCase())
          );
        }
    
        // ✅ Format the date before displaying it in the table
        filtered = filtered.map((appointment) => ({
          ...appointment,
          schedule_date: this.formatDate(appointment.schedule_date), // Format date
        }));
    
        // ✅ Sort filtered results
        return [...filtered].sort((a, b) => {
          const aValue = a[sortColumn as keyof DetailedAppointment] as string;
          const bValue = b[sortColumn as keyof DetailedAppointment] as string;
    
          return sortDirection === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
        });
      })
    );
    
  }

  formatDate(dateString: string): string {
    if (!dateString) return ''; // Handle empty dates
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' });
  }

  getStatusClass(status: string): string {
    if (!status) return 'badge-secondary'; // Default when status is missing
    switch (status.toLowerCase()) {
      case 'confirmed':
        return 'badge-success'; // Green
      case 'pending':
        return 'badge-warning'; // Yellow
      case 'canceled':
        return 'badge-danger'; // Red
      default:
        return 'badge-secondary'; // Gray
    }
  }
  
  
  

  ngOnInit(): void {
    this.route.paramMap.subscribe((params) => {
      const patientId = Number(params.get('patientId'));
      if (patientId) {
        this.store.dispatch(AppointmentActions.loadAllAppointmentsByPatientId({ patient_id: patientId }));
      } else {
        this.errorMessage = 'Invalid patient ID.';
        console.error(this.errorMessage);
      }
    });
  }

  // ✅ Updates the search term for filtering
  filterAppointmentDetails(search: string): void {
    this.searchTermSubject.next(search.trim());
  }

  // ✅ Sorting function using BehaviorSubject
  sortAppointmentDetails(column: string): void {
    if (this.sortColumnSubject.getValue() === column) {
      this.sortDirectionSubject.next(this.sortDirectionSubject.getValue() === 'asc' ? 'desc' : 'asc');
    } else {
      this.sortColumnSubject.next(column);
      this.sortDirectionSubject.next('asc');
    }
  }


  // ✅ Navigate to appointment details
  goToAppointmentDetails(id: number): void {
    this.router.navigate([`/appointments/${id}`]);
  }

  get searchTerm(): string {
    return this.searchTermSubject.getValue(); // ✅ Retrieves the current search term
  }
  
}


/* ===== File: src\app\shareables\tables\patient-tables\patient-dentalhistory-table\patient-dentalhistory-table.component.html ===== */
<app-table-with-edit-delete
  [data]="filteredDentalHistoryData"
  [columns]="columns"
  [itemsPerPage]="itemsPerPage"
  [(currentPage)]="currentPage"
  [(searchTerm)]="searchTerm"
  [pageSizeOptions]="[5, 10, 15, 20]"
  [showAddButton]="true"
  (searchTermChange)="filterDentalHistoryData($event)"
  (currentPageChange)="currentPage = $event"
  (sort)="sortDentalHistoryData($event)"
  (actionClick)="handleActionClick($event)"
  (add)="openAddEditModal()"
></app-table-with-edit-delete>

<!-- Add/Edit Dental History Modal -->
<app-add-edit-dental-history
  [isVisible]="isAddEditModalVisible"
  [title]="modalTitle"
  [dentalHistoryData]="selectedDentalHistory"
  (closeModal)="closeAddDentalHistoryModal()"
  (submitModal)="handleDentalHistorySubmit($event)"
></app-add-edit-dental-history>

/* ===== File: src\app\shareables\tables\patient-tables\patient-dentalhistory-table\patient-dentalhistory-table.component.scss ===== */


/* ===== File: src\app\shareables\tables\patient-tables\patient-dentalhistory-table\patient-dentalhistory-table.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { PatientDentalhistoryTableComponent } from './patient-dentalhistory-table.component';

describe('PatientDentalhistoryTableComponent', () => {
  let component: PatientDentalhistoryTableComponent;
  let fixture: ComponentFixture<PatientDentalhistoryTableComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [PatientDentalhistoryTableComponent]
    });
    fixture = TestBed.createComponent(PatientDentalhistoryTableComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\shareables\tables\patient-tables\patient-dentalhistory-table\patient-dentalhistory-table.component.ts ===== */
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ActivatedRoute, Router } from '@angular/router';
import { DentalHistoryData } from 'src/app/interfaces/patients.interface';
import { TableWithEditDeleteComponent } from 'src/app/my-components/tables/table-with-edit-delete/table-with-edit-delete.component';
import { AddEditDentalHistoryComponent } from 'src/app/my-components/modals/add-edit-dental-history/add-edit-dental-history.component';
import { DentalHistoryService } from 'src/app/services/patients/patient-dental-history-service';

@Component({
  selector: 'app-patient-dentalhistory-table',
  standalone: true,
  imports: [CommonModule, TableWithEditDeleteComponent, AddEditDentalHistoryComponent],
  templateUrl: './patient-dentalhistory-table.component.html',
  styleUrls: ['./patient-dentalhistory-table.component.scss'],
})
export class PatientDentalhistoryTableComponent implements OnInit {
  pagetitle = 'Patient Dental History';
  dentalHistoryData: DentalHistoryData[] = [];
  filteredDentalHistoryData: DentalHistoryData[] = [];
  selectedDentalHistory: DentalHistoryData | null = null;
  errorMessage: string = '';
  isLoading: boolean = false;

  columns = [
    { key: 'previousDentist', label: 'Previous Dentist', sortable: true },
    { key: 'lastDentalVisit', label: 'Last Dental Visit', sortable: true },
    { key: 'action', label: 'Action', sortable: false },
  ];

  sortColumn: string = 'lastDentalVisit';
  sortDirection: string = 'asc';
  searchTerm = '';
  currentPage = 1;
  itemsPerPage = 10;
  isAddEditModalVisible: boolean = false;
  modalTitle: string = '';

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private dentalHistoryService: DentalHistoryService
  ) {}

  ngOnInit(): void {
    this.route.paramMap.subscribe((params) => {
      const patientId = Number(params.get('patientId'));
      console.log('Retrieved patientId from route:', patientId);

      if (patientId) {
        this.loadDentalHistory(patientId);
      } else {
        this.errorMessage = 'Invalid patient ID.';
        console.error(this.errorMessage);
      }
    });
  }

  // Fetch dental history data for a specific patient
  loadDentalHistory(patientId: number): void {
    this.isLoading = true;

    this.dentalHistoryService.getDentalHistoryByPatientId(patientId).subscribe({
      next: (data: DentalHistoryData[]) => {
        if (data.length > 0) {
          this.dentalHistoryData = data;
          this.filteredDentalHistoryData = [...data];
          console.log('Dental history for patient:', data);
        } else {
          this.errorMessage = `No dental history found for patient ID ${patientId}.`;
          console.warn(this.errorMessage);
        }
        this.isLoading = false;
      },
      error: (err) => {
        this.errorMessage = 'Failed to load dental history.';
        console.error(this.errorMessage, err);
        this.isLoading = false;
      },
    });
  }

  // Open modal for adding or editing dental history
  openAddEditModal(dentalHistory?: DentalHistoryData): void {
    if (dentalHistory) {
      this.modalTitle = 'Edit Dental History';
      this.selectedDentalHistory = { ...dentalHistory };
    } else {
      this.modalTitle = 'Add Dental History';
      this.selectedDentalHistory = null;
    }
    this.isAddEditModalVisible = true;
  }

  closeAddDentalHistoryModal(): void {
    this.isAddEditModalVisible = false;
  }
  

  // Handle submission of dental history (add or edit)
  handleDentalHistorySubmit(dentalHistory: DentalHistoryData): void {
    if (dentalHistory.id) {
      // Update existing record
      this.dentalHistoryService.updateDentalHistory(dentalHistory.id, dentalHistory).subscribe({
        next: () => {
          const index = this.dentalHistoryData.findIndex((item) => item.id === dentalHistory.id);
          if (index !== -1) {
            this.dentalHistoryData[index] = { ...dentalHistory };
          }
          this.filteredDentalHistoryData = [...this.dentalHistoryData];
          this.isAddEditModalVisible = false;
        },
        error: (err) => {
          this.errorMessage = 'Failed to update dental history.';
          console.error(this.errorMessage, err);
        },
      });
    } else {
      // Add new record
      this.dentalHistoryService.addDentalHistory(dentalHistory).subscribe({
        next: (newData) => {
          this.dentalHistoryData.push(newData);
          this.filteredDentalHistoryData = [...this.dentalHistoryData];
          this.isAddEditModalVisible = false;
        },
        error: (err) => {
          this.errorMessage = 'Failed to add dental history.';
          console.error(this.errorMessage, err);
        },
      });
    }
  }

  // Delete a dental history record
  deleteDentalHistory(dentalHistory: DentalHistoryData): void {
    this.dentalHistoryService.deleteDentalHistory(dentalHistory.id).subscribe({
      next: () => {
        this.dentalHistoryData = this.dentalHistoryData.filter((item) => item.id !== dentalHistory.id);
        this.filteredDentalHistoryData = [...this.dentalHistoryData];
        console.log(`Deleted dental history with ID ${dentalHistory.id}`);
      },
      error: (err) => {
        this.errorMessage = 'Failed to delete dental history.';
        console.error(this.errorMessage, err);
      },
    });
  }

  // Filter dental history data
  filterDentalHistoryData(search: string): void {
    this.searchTerm = search.trim();
    this.filteredDentalHistoryData = this.searchTerm
      ? this.dentalHistoryData.filter((dentalHistory) =>
          Object.values(dentalHistory)
            .join(' ')
            .toLowerCase()
            .includes(this.searchTerm.toLowerCase())
        )
      : [...this.dentalHistoryData];
  }

  // Sort dental history data
  sortDentalHistoryData(column: string): void {
    if (this.sortColumn === column) {
      this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';
    } else {
      this.sortColumn = column;
      this.sortDirection = 'asc';
    }

    this.filteredDentalHistoryData.sort((a, b) => {
      const valA = (a as any)[column]?.toString().toLowerCase() || '';
      const valB = (b as any)[column]?.toString().toLowerCase() || '';

      return this.sortDirection === 'asc' ? valA.localeCompare(valB) : valB.localeCompare(valA);
    });
  }
  handleActionClick(event: { action: string; row: DentalHistoryData }): void {
    const { action, row } = event;
  
    if (action === 'edit') {
      this.openAddEditModal(row); // Pass the row to open modal for editing
    } else if (action === 'delete') {
      this.deleteDentalHistory(row); // Pass the row to delete the record
    }
  }
  
  
}




/* ===== File: src\app\shareables\tables\patient-tables\patient-medicalhistory-table\patient-medicalhistory-table.component.html ===== */
<app-table-with-edit-delete
  [data]="filteredmedicalHistoryData"
  [columns]="columns"
  [itemsPerPage]="itemsPerPage"
  [(currentPage)]="currentPage"
  [(searchTerm)]="searchTerm"
  [pageSizeOptions]="[5, 10, 15, 20]"
  [showAddButton]="true"
  (searchTermChange)="filtermedicalHistoryData($event)"
  (currentPageChange)="currentPage = $event"
  (sort)="sortmedicalHistoryData($event)"
  (actionClick)="handleActionClick($event)"
  (add)="openAddMedicalHistoryModal()"
></app-table-with-edit-delete>

<!-- Add/Edit Dental History Modal -->
<app-add-edit-medical-history
  [isVisible]="isAddMedicalHistoryModalVisible"
  [title]="modalTitle"
  [medicalHistoryData]="selectedMedicalHistory"
  (closeModal)="closeAddMedicalHistoryModal()"
  (submitModal)="handleDentalHistorySubmit($event)"
></app-add-edit-medical-history>

/* ===== File: src\app\shareables\tables\patient-tables\patient-medicalhistory-table\patient-medicalhistory-table.component.scss ===== */


/* ===== File: src\app\shareables\tables\patient-tables\patient-medicalhistory-table\patient-medicalhistory-table.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { PatientMedicalhistoryTableComponent } from './patient-medicalhistory-table.component';

describe('PatientMedicalhistoryTableComponent', () => {
  let component: PatientMedicalhistoryTableComponent;
  let fixture: ComponentFixture<PatientMedicalhistoryTableComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [PatientMedicalhistoryTableComponent]
    });
    fixture = TestBed.createComponent(PatientMedicalhistoryTableComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\shareables\tables\patient-tables\patient-medicalhistory-table\patient-medicalhistory-table.component.ts ===== */
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MedicalHistoryData } from 'src/app/interfaces/patients.interface';
import { Router } from '@angular/router';
import { TableWithEditDeleteComponent } from 'src/app/my-components/tables/table-with-edit-delete/table-with-edit-delete.component';
import { AddEditMedicalHistoryComponent } from 'src/app/my-components/modals/add-edit-medical-history/add-edit-medical-history.component';

@Component({
  selector: 'app-patient-medicalhistory-table',
  standalone: true,
  imports: [CommonModule, TableWithEditDeleteComponent, AddEditMedicalHistoryComponent],
  templateUrl: './patient-medicalhistory-table.component.html',
  styleUrls: ['./patient-medicalhistory-table.component.scss']
})
export class PatientMedicalhistoryTableComponent {
  sortColumn: string = 'date'; // Default sort column
    sortDirection: string = 'asc'; // Default sort direction
    selectedMedicalHistory: MedicalHistoryData | null = null;
  
    medicalHistoryData: MedicalHistoryData[] = [
      { id: 1, allergies: 'Peanuts', illnesses: 'Asthma', action: 'View' },
      { id: 2, allergies: 'Penicillin', illnesses: 'Diabetes', action: 'View' }
    ];
  
    filteredmedicalHistoryData: MedicalHistoryData[] = [...this.medicalHistoryData];
  
    columns = [
      { key: 'allergies', label: 'Allergies', sortable: true },
      { key: 'illnesses', label: 'Illnesses', sortable: true },
      { key: 'action', label: 'Action', sortable: false }
    ];
  
    itemsPerPage = 10;
    searchTerm = '';
    currentPage = 1;
  
    isAddMedicalHistoryModalVisible: boolean = false;
    modalTitle: string = 'Add Medical History';
  
    constructor(private router: Router) {}
  
    ngOnInit(): void {
      this.sortmedicalHistoryData(this.sortColumn);
    }
  
    filtermedicalHistoryData(search: string): void {
      this.searchTerm = search.trim(); // Trim unnecessary spaces
  
      if (this.searchTerm === '') {
        // Reset to full list if the search box is cleared
        this.filteredmedicalHistoryData = [...this.medicalHistoryData];
      } else {
        // Filter dynamically based on search term
        this.filteredmedicalHistoryData = this.medicalHistoryData.filter((medical) =>
          Object.values(medical)
            .join(' ')
            .toLowerCase()
            .includes(this.searchTerm.toLowerCase())
        );
      }
    }
  
    sortmedicalHistoryData(column: string): void {
      this.sortColumn = column;
      this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';
  
      this.filteredmedicalHistoryData.sort((a, b) => {
        const valA = (a as any)[column]?.toString().toLowerCase() || ''; // Access dynamically
        const valB = (b as any)[column]?.toString().toLowerCase() || '';
  
        return this.sortDirection === 'asc' ? valA.localeCompare(valB) : valB.localeCompare(valA);
      });
    }
  
    openAddMedicalHistoryModal(): void {
      this.modalTitle = 'Add Medical History';
      this.isAddMedicalHistoryModalVisible = true;
    }
  
    closeAddMedicalHistoryModal(): void {
      this.isAddMedicalHistoryModalVisible = false;
    }
  
    handleDentalHistorySubmit(medicalHistory: MedicalHistoryData): void {
      if (medicalHistory.id) {
        // Edit existing data
        const index = this.medicalHistoryData.findIndex(item => item.id === medicalHistory.id);
        if (index !== -1) {
          this.medicalHistoryData[index] = { ...medicalHistory }; // Update the data
        }
      } else {
        // Add new data
        medicalHistory.id = Date.now(); // Generate unique ID for the new entry
        this.medicalHistoryData.push(medicalHistory);
      }
      this.filtermedicalHistoryData(this.searchTerm); // Refresh the table data
      this.closeAddMedicalHistoryModal(); // Close the modal
    }
  
    handleActionClick(event: { action: string; row: MedicalHistoryData }): void {
      if (event.action === 'edit') {
        this.editMedicalHistory(event.row);
      } else if (event.action === 'delete') {
        this.deleteMedicalHistory(event.row);
      }
    }
    
    editMedicalHistory(medicalHistory: MedicalHistoryData): void {
      this.modalTitle = 'Edit Medical History';
      this.selectedMedicalHistory = { ...medicalHistory }; // Pass the selected row
      this.isAddMedicalHistoryModalVisible = true; // Show the modal
    }
  
    deleteMedicalHistory(medicalHistory: MedicalHistoryData): void {
      this.medicalHistoryData = this.medicalHistoryData.filter(item => item.id !== medicalHistory.id);
      this.filtermedicalHistoryData(this.searchTerm); // Refresh the filtered data
    }
}


/* ===== File: src\app\shareables\tables\patient-tables\patient-prescription-table\patient-prescription-table.component.html ===== */
<section>
  <ng-container *ngIf="filteredPrescriptionData$ | async as prescriptions; else loading">
    <ng-container *ngIf="prescriptions.length > 0; else noData">
      <app-display-table
        [title]="pagetitle + ' List'"
        [data]="prescriptions || []"
        [columns]="columns"
        [itemsPerPage]="itemsPerPage"
        [(currentPage)]="currentPage"
        [searchTerm]="searchTerm"
        [pageSizeOptions]="[5, 10, 15, 20]"
        [showAddButton]="false"
        (searchTermChange)="filterPrescriptionData($event)"
        (currentPageChange)="currentPage = $event"
        (sort)="sortPrescriptionData($event)"
      ></app-display-table>
    </ng-container>

    <!-- ✅ Show if no prescriptions -->
    <ng-template #noData>
      <p class="no-data-message">No prescription data available.</p>
    </ng-template>
  </ng-container>

  <!-- ✅ Loading State -->
  <ng-template #loading>
    <p>Loading prescription details...</p>
  </ng-template>
</section>


/* ===== File: src\app\shareables\tables\patient-tables\patient-prescription-table\patient-prescription-table.component.scss ===== */


/* ===== File: src\app\shareables\tables\patient-tables\patient-prescription-table\patient-prescription-table.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { PatientPrescriptionTableComponent } from './patient-prescription-table.component';

describe('PatientPrescriptionTableComponent', () => {
  let component: PatientPrescriptionTableComponent;
  let fixture: ComponentFixture<PatientPrescriptionTableComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [PatientPrescriptionTableComponent]
    });
    fixture = TestBed.createComponent(PatientPrescriptionTableComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\shareables\tables\patient-tables\patient-prescription-table\patient-prescription-table.component.ts ===== */
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ActivatedRoute, Router } from '@angular/router';
import { DisplayTableComponent } from 'src/app/my-components/tables/display-table/display-table.component';
import { BehaviorSubject, combineLatest, map, Observable } from 'rxjs';
import { select, Store } from '@ngrx/store';
import { selectPrescriptionsByPatient, selectIsLoading, selectError } from 'src/app/ngrx/prescription/prescription.reducers';
import { PrescriptionsActions } from 'src/app/ngrx/prescription/prescription.actions';
import { Prescription } from 'src/app/interfaces/prescription.interface';

@Component({
  selector: 'app-patient-prescription-table',
  standalone: true,
  imports: [CommonModule, DisplayTableComponent],
  templateUrl: './patient-prescription-table.component.html',
  styleUrls: ['./patient-prescription-table.component.scss'],
})
export class PatientPrescriptionTableComponent implements OnInit {
  pagetitle = 'Patient Prescriptions';

  // ✅ Fetch prescriptions from NgRx Store
  prescriptionData$: Observable<Prescription[]> = this.store.pipe(select(selectPrescriptionsByPatient));
  isLoading$: Observable<boolean> = this.store.pipe(select(selectIsLoading));
  errorMessage$: Observable<string | null> = this.store.pipe(select(selectError));

  // ✅ BehaviorSubjects for search term and sorting
  private searchTermSubject = new BehaviorSubject<string>('');
  searchTerm$ = this.searchTermSubject.asObservable();

  private sortColumnSubject = new BehaviorSubject<string>('date');
  private sortDirectionSubject = new BehaviorSubject<'asc' | 'desc'>('asc');

  filteredPrescriptionData$: Observable<Prescription[]>;

  columns = [
    { key: 'date', label: 'Date', sortable: true },
    { key: 'medicine', label: 'Medicine', sortable: true },
    { key: 'notes', label: 'Notes', sortable: true },
  ];

  itemsPerPage = 10;
  currentPage = 1;

  constructor(private route: ActivatedRoute, private router: Router, private store: Store) {
    // ✅ Combine Observables for filtering & sorting
    this.filteredPrescriptionData$ = combineLatest([
      this.prescriptionData$,
      this.searchTerm$,
      this.sortColumnSubject,
      this.sortDirectionSubject,
    ]).pipe(
      map(([prescriptions, searchTerm, sortColumn, sortDirection]) => {
        let filtered = prescriptions;

        // ✅ Filter prescriptions based on search
        if (searchTerm.trim()) {
          filtered = prescriptions.filter((prescription) =>
            Object.values(prescription)
              .join(' ')
              .toLowerCase()
              .includes(searchTerm.toLowerCase())
          );
        }

        // ✅ Format the date before displaying it in the table
        filtered = filtered.map((prescription) => ({
          ...prescription,
          date: this.formatDate(prescription.date), // Format date
        }));

        // ✅ Sort filtered results
        return [...filtered].sort((a, b) => {
          const aValue = a[sortColumn as keyof Prescription] as string;
          const bValue = b[sortColumn as keyof Prescription] as string;

          return sortDirection === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
        });
      })
    );
  }

  ngOnInit(): void {
    this.route.paramMap.subscribe((params) => {
      const patientId = Number(params.get('patientId'));
      console.log('Extracted patientId:', patientId); // ✅ Debugging log

      if (!isNaN(patientId) && patientId > 0) {
        console.log('Dispatching action: loadPrescriptionsByPatientId');
        this.store.dispatch(PrescriptionsActions.loadPrescriptionsByPatientId({ patientId }));
      } else {
        console.error('Invalid patient ID detected, dispatching failure action');
        this.store.dispatch(PrescriptionsActions.loadPrescriptionsByPatientIdFailure({ error: 'Invalid patient ID' }));
      }
    });
  }

  // ✅ Format date to a readable format
  private formatDate(dateString: string): string {
    if (!dateString) return ''; // Handle empty dates
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' });
  }

  // ✅ Updates the search term for filtering
  filterPrescriptionData(search: string): void {
    this.searchTermSubject.next(search.trim());
  }

  // ✅ Sorting function using BehaviorSubject
  sortPrescriptionData(column: string): void {
    if (this.sortColumnSubject.getValue() === column) {
      this.sortDirectionSubject.next(this.sortDirectionSubject.getValue() === 'asc' ? 'desc' : 'asc');
    } else {
      this.sortColumnSubject.next(column);
      this.sortDirectionSubject.next('asc');
    }
  }

  get searchTerm(): string {
    return this.searchTermSubject.getValue(); // ✅ Retrieves the current search term
  }
}


/* ===== File: src\app\shareables\tables\patient-tables\patient-treatment-table\patient-treatment-table.component.html ===== */
<section>
    <app-display-table
    [data]="filteredtreatmentData"
    [columns]="columns"
    [itemsPerPage]="itemsPerPage"
    [(currentPage)]="currentPage"
    [(searchTerm)]="searchTerm"
    [pageSizeOptions]="[5, 10, 15, 20]"
    [showAddButton]="false"
    (searchTermChange)="filtertreatmentData($event)"
    (currentPageChange)="currentPage = $event"
    (sort)="sorttreatmentData($event)"
  ></app-display-table>
  </section>
  

/* ===== File: src\app\shareables\tables\patient-tables\patient-treatment-table\patient-treatment-table.component.scss ===== */


/* ===== File: src\app\shareables\tables\patient-tables\patient-treatment-table\patient-treatment-table.component.spec.ts ===== */
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { PatientTreatmentTableComponent } from './patient-treatment-table.component';

describe('PatientTreatmentTableComponent', () => {
  let component: PatientTreatmentTableComponent;
  let fixture: ComponentFixture<PatientTreatmentTableComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [PatientTreatmentTableComponent]
    });
    fixture = TestBed.createComponent(PatientTreatmentTableComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* ===== File: src\app\shareables\tables\patient-tables\patient-treatment-table\patient-treatment-table.component.ts ===== */
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { TreatmentData } from 'src/app/interfaces/patients.interface';
import { DisplayTableComponent } from 'src/app/my-components/tables/display-table/display-table.component';
import { ActivatedRoute, Router } from '@angular/router';
import { PatientTreatmentService } from 'src/app/services/patients/patient-treatment.service';

@Component({
  selector: 'app-patient-treatment-table',
  standalone: true,
  imports: [CommonModule, DisplayTableComponent],
  templateUrl: './patient-treatment-table.component.html',
  styleUrls: ['./patient-treatment-table.component.scss']
})
export class PatientTreatmentTableComponent implements OnInit {
  pagetitle = 'Patients';
  sortColumn: string = 'dateVisit'; // Default sort column
  sortDirection: string = 'asc'; // Default sort direction

  treatmentData: TreatmentData[] = [];
  filteredtreatmentData: TreatmentData[] = [];
  errorMessage: string = '';
  patientId: number | null = null;

  columns = [
    { key: 'dateVisit', label: 'Date Visit', sortable: true },
    { key: 'teethNos', label: 'Teeth No.s', sortable: true },
    { key: 'treatment', label: 'Treatment', sortable: true },
    { key: 'description', label: 'Description', sortable: false },
    { key: 'fees', label: 'Fees', sortable: false },
    { key: 'remarks', label: 'Remarks', sortable: false },
  ];

  itemsPerPage = 10;
  searchTerm = '';
  currentPage = 1;

  constructor(
    private router: Router,
    private route: ActivatedRoute,
    private patientTreatmentService: PatientTreatmentService
  ) {}

  ngOnInit(): void {
    this.route.paramMap.subscribe((params) => {
      const id = Number(params.get('id')); // Extract patient ID from route
      if (id) {
        this.patientId = id;
        this.loadTreatmentData(id); // Load treatment data for the specific patient
      } else {
        this.errorMessage = 'Invalid patient ID.';
      }
    });
  }

  loadTreatmentData(patientId: number): void {
    this.patientTreatmentService.getTreatments().subscribe({
      next: (data: TreatmentData[]) => {
        // Filter treatments specific to the patient by patientId
        this.treatmentData = data.filter((treatment) => treatment.patientId === patientId);
        this.filteredtreatmentData = [...this.treatmentData];
        this.sorttreatmentData(this.sortColumn);
      },
      error: (err) => {
        this.errorMessage = 'Failed to load treatment data.';
        console.error(err);
      }
    });
  }

  filtertreatmentData(search: string): void {
    this.searchTerm = search.trim();

    if (this.searchTerm === '') {
      this.filteredtreatmentData = [...this.treatmentData];
    } else {
      this.filteredtreatmentData = this.treatmentData.filter((treatment) =>
        Object.values(treatment)
          .join(' ')
          .toLowerCase()
          .includes(this.searchTerm.toLowerCase())
      );
    }
  }

  sorttreatmentData(column: string): void {
    this.sortColumn = column;
    this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';

    this.filteredtreatmentData.sort((a, b) => {
      const valA = (a as any)[column]?.toString().toLowerCase() || '';
      const valB = (b as any)[column]?.toString().toLowerCase() || '';

      return this.sortDirection === 'asc' ? valA.localeCompare(valB) : valB.localeCompare(valA);
    });
  }
}


/* ===== File: src\environments\environment.prod.ts ===== */
export const environment = {
    production: true,
    apiUrl: 'http://localhost:8082',
};
  

/* ===== File: src\environments\environment.test.ts ===== */
export const environment = {
    production: false,
    apiUrl: 'http://localhost:3000/',
};
  
